// This file contains BCD-UI Javascript Api stubs for IDE autosuggest
// BCD-UI version 5.6.0 (2022-12-21)


/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html Online Api}
 * @namespace 
 */
var bcdui = {};

/**
 * set up logger, we maintain only one logger
 */
bcdui.log = {};
/**
 * Context path of the current webapp
 */
bcdui.contextPath = "/";
/**
 * Is debug mode enabled?
 */
bcdui.isDebug = {};
/**
 * BCD-UI works with several Well-Known-Models, they can be found here
 */
bcdui.wkModels = {};


/**
@param {boolean} isDebugEnabled
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html#._setIsDebug) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html#._setIsDebug Online Api}
  @description Sets debug mode flag
  @method _setIsDebug
@memberOf bcdui
 */
bcdui._setIsDebug = function(isDebugEnabled) { console.log(isDebugEnabled); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html#.getContextPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.html#.getContextPath Online Api}
  @description 
  @method getContextPath
@return {string} Context path of the current webapp to resolve relative URLs
@memberOf bcdui
 */
bcdui.getContextPath = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.html Online Api}
 * @namespace 
 */
bcdui.component = {};



/**
@param {Object} args  The parameter map contains the following properties:
  @param {string} args.id  Id of the created object
  @param {targetHtmlRef} args.targetHtml  The target HTML element for the drag-and-drop matrix.
  @param {writableModelXPath} [args.targetModelXPath]  Where to write the result
  @param {(string|bcdui.core.DataProvider)} [args.config]  DataProvider containing the configuration for the cube configurator, per defaulz ./dimensionsAndMeasures.xml is loaded
  @param {(string|bcdui.component.cube.Cube)} args.cubeRenderer  Cube we belong to
  @param {boolean} [args.isRanking]  Show ranking editor. This is an Enterprise Edition only feature.
  @param {boolean} [args.isTemplate]  Show template Editor true/false. This is an Enterprise Edition only feature.
  @param {boolean} [args.showSummary]  Show summary of cube settings
  @param {string} [args.rankingTargetHtmlElementId]  Custom location for ranking editor
  @param {string} [args.templateTargetHtmlElementId]  Custom location for template editor
  @param {string} [args.summaryTargetHtmlElementId]  Custom location for summary display
  @param {(boolean|string)} [args.contextMenu]  If true, cube's default context menu is used, otherwise provide the url to your context menu xslt here.
  @param {boolean} [args.isDefaultHtmlLayout]  If true, a standard layout for dnd area, ranking, templates and summary is created. Separate targetHtmlElements will be obsolete then. If false, you need to provide containers with classes: bcdCurrentRowDimensionList, bcdCurrentColMeasureList, bcdCurrentColDimensionList, bcdCurrentMeasureList, bcdDimensionList, bcdMeasureList within an outer bcdCubeDndMatrix container. if your targetHtml got classes bcdDndBlindOpen or bcdDndBlindClosed, the actual dnd area is also put in collapsable boxes (either open or closed by default).
  @param {boolean} [args.hasUserEditRole]  Template Editor also has edit capability. If not given, bcdui.config.clientRights.bcdCubeTemplateEdit is used to determine state (either *(any) or cubeId to enable).
  @param {string} [args.applyFunction]  Function name which is used for the apply button in isDefaultHtmlLayout=true mode.
  @param {string} [args.url]  The URL the model for the grouping editor is loaded from. If omitted the WrsServlet is taken as default.
  @param {string} [args.expandCollapseCells]  When specified (with 'expand' or 'collapse' or 'collapse2nd'), cube turns on the expand/collapse mode. collapse2nd initially keeps level one open.
  @param {boolean} [args.doSortOptions]  When setting this to true, dimensions and measures lists are sorted by caption.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.html#.createCubeConfigurator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.html#.createCubeConfigurator Online Api}
  @description Creates a cube configurator, providing the cube:Layout section of the cube configuration, able of 1) Showing the drag and drop area for the dimensions and measures 2) Providing templates to the user 3) Allowing the user to save templates for him/herself 4) Allowing the user to create new measures with the formula editor
  @method createCubeConfigurator
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.component.createCubeConfigurator( { id: id, targetHtml: targetHtml, cubeRenderer: cubeRenderer } );
  //</pre>
  @example
  //<pre>
  new bcdui.core.SimpleModel({   id:  "myDndOptions", // define ID explicitely   url: "dndOptionsModel.xml"  );  bcdui.component.createCubeConfigurator({      id:                  "cubeConfigurator",    , config:              "myDndOptions"    , targetHtml:          "cubeConfiguratorDiv"    , targetModelId        "guiStatus"    , isRanking            true    , cubeRenderer:        "cube"    , rankingTargetHtmlElementId: "rankingDiv"  });
  //</pre>
  @example
  <-- <pre> -->
  <div class='container_24 bcdCubeDndMatrix'>   <div class='grid_24'>     <div class='grid_3 omega bcdCurrentRowDimensionList alpha'></div>     <div class='grid_3 omega bcdCurrentColMeasureList'></div>     <div class='grid_3 omega'>       <div class='bcdCurrentColDimensionList'></div>       <div class='bcdCurrentMeasureList'></div>     </div>     <div class='grid_5 omega'>       <div class='bcdHeader'>Dimensions</div>       <div class='bcdDimensionList'></div>     </div>     <div class='grid_5 omega'>       <div class='bcdHeader'>Measures</div>       <div class='bcdMeasureList'></div>     </div>   </div> </div>
  <-- </pre> -->
  @return null.
@memberOf bcdui.component
 */
bcdui.component.createCubeConfigurator = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.html Online Api}
 * @description The chart package contains classes to draw charts and for drawing primitives like circles, lines and polylines in SVG, see {@link bcdui.component.chart.SVGDrawer}. You can define a chart with js calls with {@link bcdui.component.chart.Chart} as well as be providing a XML definition according to http://www.businesscode.de/schema/bcdui/charts-1.0.0 using {@link bcdui.component.chart.XmlChart}.
 * @namespace 
 */
bcdui.component.chart = {};



/**
@param {Object} args  Paramater object
  @param {bcdui.core.DataProvider} args.inputModel  Input model to renderer
  @param {string} args.targetHtmlElementId  Target HTML element ID
  @param {string} [args.id]  Renderer ID
  @param {string} [args.chartRendererId]  ID of chart renderer
  @param {string} [args.elementStyle]  Style for legend HTML element
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.html#.createChartLegend) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.html#.createChartLegend Online Api}
  @description Create a legend for the chart, listing all series
  @method createChartLegend
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.component.chart.createChartLegend( { inputModel: inputModel, targetHtmlElementId: targetHtmlElementId } );
  //</pre>
  @return renderer that creates legend renderer
@memberOf bcdui.component.chart
 */
bcdui.component.chart.createChartLegend = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.html Online Api}
 * @description This namespace contains functionality directly related to BCD-UI cube
 * @namespace 
 */
bcdui.component.cube = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html Online Api}
 * @namespace 
 */
bcdui.component.cube.configurator = {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.toggleHideTotals) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.toggleHideTotals Online Api}
  @description 
  @method toggleHideTotals
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.toggleHideTotals = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.showTotals) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.showTotals Online Api}
  @description 
  @method showTotals
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.showTotals = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.hideTotals) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.hideTotals Online Api}
  @description 
  @method hideTotals
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.hideTotals = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setColumnSort) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setColumnSort Online Api}
  @description 
  @method setColumnSort
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.setColumnSort = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setSortMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setSortMeasure Online Api}
  @description 
  @method setSortMeasure
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.setSortMeasure = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setSortDimByMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setSortDimByMeasure Online Api}
  @description 
  @method setSortDimByMeasure
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.setSortDimByMeasure = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setCumulate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.setCumulate Online Api}
  @description 
  @method setCumulate
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.setCumulate = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.showThisTotals) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.showThisTotals Online Api}
  @description 
  @method showThisTotals
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.showThisTotals = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.hideDimMember) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.hideDimMember Online Api}
  @description Hides (client side filter) the occurrences of a selected dimension member, i.e. for example all values for a country Results in cube:Layout/cube:Hide/f:Filter expressions
  @method hideDimMember
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.hideDimMember = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.excludeDimMember) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.excludeDimMember Online Api}
  @description Excludes (server side filter) the occurrences of a selected dimension member, i.e. for example all values for a country Results in f:Filter expressions
  @method excludeDimMember
@memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.excludeDimMember = function() {};



/**
@param targetModelId
  @param cubeId
  @param args  \{ row, col \}
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.addRowMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.addRowMeasure Online Api}
  @description adding row measure for cube (opening calcNode editor and put formula to cube model)
  @method addRowMeasure
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.cube.configurator.addRowMeasure( targetModelId, cubeId, args );
  //</pre>
  @memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.addRowMeasure = function(targetModelId, cubeId, args) { console.log(targetModelId, cubeId, args); };



/**
@param targetModelId
  @param cubeId
  @param args  \{ row, col \}
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.addColumnMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.addColumnMeasure Online Api}
  @description adding column measure for cube (opening calcNode editor and put formula to cube model)
  @method addColumnMeasure
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.cube.configurator.addColumnMeasure( targetModelId, cubeId, args );
  //</pre>
  @memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.addColumnMeasure = function(targetModelId, cubeId, args) { console.log(targetModelId, cubeId, args); };



/**
@param targetModelId
  @param cubeId
  @param args
  @param args.calcId
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.editUserMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.editUserMeasure Online Api}
  @description opening calcNode editor for edit current formula
  @method editUserMeasure
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.cube.configurator.editUserMeasure( { calcId: calcId } );
  //</pre>
  @memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.editUserMeasure = function(targetModelId, cubeId, args) { console.log(targetModelId, cubeId, args); };



/**
@param targetModelId
  @param cubeId
  @param args
  @param args.calcId
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.deleteUserMeasure) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configurator.html#.deleteUserMeasure Online Api}
  @description deleting userCalc node from measures
  @method deleteUserMeasure
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.cube.configurator.deleteUserMeasure( { calcId: calcId } );
  //</pre>
  @memberOf bcdui.component.cube.configurator
 */
bcdui.component.cube.configurator.deleteUserMeasure = function(targetModelId, cubeId, args) { console.log(targetModelId, cubeId, args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html Online Api}
 * @namespace 
 */
bcdui.component.cube.configuratorDND = {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.init) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.init Online Api}
  @description 
  @method init
@memberOf bcdui.component.cube.configuratorDND
 */
bcdui.component.cube.configuratorDND.init = function() {};



/**
@param {string} cubeBucketModelId  The id of the cubeBucketModel
  @param {string} configId  The id of the used configuration
  @param {boolean} [noClear]  true if current selection should not get changed
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.fillBucketModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.fillBucketModel Online Api}
  @description Used for initial filling but can also be used to reinitialize bucket model (e.g. after hiding selectable measures)
  @method fillBucketModel
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.cube.configuratorDND.fillBucketModel( cubeBucketModelId, configId );
  //</pre>
  @memberOf bcdui.component.cube.configuratorDND
 */
bcdui.component.cube.configuratorDND.fillBucketModel = function(cubeBucketModelId, configId, noClear) { console.log(cubeBucketModelId, configId, noClear); };



/**
@param {string} cubeId  The id of the linked cube
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.reDisplay) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.configuratorDND.html#.reDisplay Online Api}
  @description Refreshes the cube drag'n drop area This is e.g. necessary when a template is applied or the layout is cleaned or a client sided cube action is applied and you want to have e.g. icons being refreshed in the dnd area, or you have some custom options which remove measures dimensions on special rules and the dnd area needs to be in sync with the changes
  @method reDisplay
@memberOf bcdui.component.cube.configuratorDND
 */
bcdui.component.cube.configuratorDND.reDisplay = function(cubeId) { console.log(cubeId); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.templateManager.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.templateManager.html Online Api}
 * @namespace 
 */
bcdui.component.cube.templateManager = {};



/**
@param {string} objectId  The id of the linked object (cube or scorecard)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.templateManager.html#.clearLayout) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.templateManager.html#.clearLayout Online Api}
  @description Removes the current layout
  @method clearLayout
@memberOf bcdui.component.cube.templateManager
 */
bcdui.component.cube.templateManager.clearLayout = function(objectId) { console.log(objectId); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.html Online Api}
 * @description This namespace contains functionality directly related to BCD-UI docUpload
 * @namespace 
 */
bcdui.component.docUpload = {};



/**
@param args  The parameter map contains the following properties:
  @param {string} args.scope  The scope identifier
  @param {string} [args.id]  The id of the returned wrs modelwrapper
  @param {(string|array)} [args.instance]  Array or string or space separated string of instance ids in case you want to limit the output
  @param {filterBRefs} [args.filterBRefs]  The space separated list of binding Refs that will be used in filter clause of request document
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.html#.getUploadOverview) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.html#.getUploadOverview Online Api}
  @description Generate a wrs modelwrapper holding overview information for the given scope (optionally limited to instances) The wrs holds 1 row per instance with the information about loaded, needed and missing required documents
  @method getUploadOverview
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.component.docUpload.getUploadOverview( { scope: scope } );
  //</pre>
  @return a wrs model holding the overview information
@memberOf bcdui.component.docUpload
 */
bcdui.component.docUpload.getUploadOverview = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html Online Api}
 * @description Export package is the API to the WYSIWYG and detail exports of BCD-UI WYSIWYG can be pdf, excel or image
 * @namespace 
 */
bcdui.component.exports = {};



/**
@param {Object} args  The parameter map contains the following properties:
  @param {(string|HtmlElement)} args.rootElement  The id of or the root element itself
  @param {string} [args.fileName]  The name of the returned pdf
  @param {(Array.<string>|string)} [args.css]  An array or space separated list of URLs containing CSS files to be used, relative the the current page. This allows using different styling on export than on the page. You can also use an bcdPdfStyle for inline style only to be applied on export. Absolute paths starting with '/' are relative to the context path. Use more specific rule precedence. (css precedence based on later declaration is not supported). Local css are being cached.
  @param {boolean} [args.orientationLandscape]  Set this flag to true to make the PDF appear in landscape page orientation
  @param {string} [args.dimension]  Physical dimension of the output like 'A5' or 'LETTER', default is A4.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsPdf) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsPdf Online Api}
  @description Produces a WYSIWYG pdf export of a windows.document subtree, needs pdf extension, part of EnterpriseEdition
  @method exportWysiwygAsPdf
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.exports.exportWysiwygAsPdf( { rootElement: rootElement } );
  //</pre>
  @example
  //<pre>
  bcdui.component.exports.exportWysiwygAsPdf( { rootElement: "myReportDiv", css: ["/bcdui/theme/css/allStyles.css", "my.css"] } );
  //</pre>
  @memberOf bcdui.component.exports
 */
bcdui.component.exports.exportWysiwygAsPdf = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties:
  @param {(string|HtmlElement)} args.rootElement  The id of or the root element itself
  @param {string} [args.fileName]  The name of the returned Excel document
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsExcel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsExcel Online Api}
  @description Produces a WYSIWYG Excel export of a windows.document subtree
  @method exportWysiwygAsExcel
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.exports.exportWysiwygAsExcel( { rootElement: rootElement } );
  //</pre>
  @memberOf bcdui.component.exports
 */
bcdui.component.exports.exportWysiwygAsExcel = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties:
  @param {(string|HtmlElement)} args.rootElement  The id of or the root element itself
  @param {string} [args.fileName]  The name of the returned image
  @param {string} [format]  Image format, supported are 'jpg', 'png', 'bmp' or 'gif'
  @param {(Array.<string>|string)} [args.css]  An array or space separated list of URLs containing CSS files to be used, relative the the current page. This allows using different styling on export than on the page. You can also use an bcdPdfStyle for inline style only to be applied on export. Absolute paths starting with '/' are relative to the context path. Use more specific rule precedence. (css precedence based on later declaration is not supported). Local css are being cached.
  @param {boolean} [args.orientationLandscape]  Set this flag to true to make the PDF appear in landscape page orientation
  @param {string} [args.dimension]  Physical dimension of the output like 'A5' or 'LETTER', default is A4.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsImage) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportWysiwygAsImage Online Api}
  @description Produces a WYSIWYG image export of a windows.document subtree, needs pdf extension, part of EnterpriseEdition
  @method exportWysiwygAsImage
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.exports.exportWysiwygAsImage( { rootElement: rootElement } );
  //</pre>
  @example
  //<pre>
  bcdui.component.exports.exportWysiwygAsImage( { rootElement: "myReportDiv, format: "gif" } );
  //</pre>
  @memberOf bcdui.component.exports
 */
bcdui.component.exports.exportWysiwygAsImage = function(args, format) { console.log(args, format); };



/**
@param {Object} args  The argument map with the following properties
  @param {(string|bcdui.core.DataProvider)} args.wrq  Model containing the wrs request according to XSD http://www.businesscode.de/schema/bcdui/wrs-request-1.0.0
  @param {string} [args.type]  Can be "slk" or "csv" or "xlsx". slk is efficient as csv and preserves numbers, use "xlsx" to preserve non-latin characters in addition
  @param {string} [args.fileName]  Name of the response file, depending on type, can also be provided via /wrq:WrsRequest/&commat;bcdFileName from within the request
  @param {string} [args.vfsFilename]  when using vfs stored export lists, you can define a vfs path name here, if not, it is generated out of url/user information
  @param {string} [args.exportMode]  full - using the wrq as it is, show - always showing a column selector, silent - use stored column information (at least 1 column specified) if available, otherwise full
  @param {boolean} [args.allowSave]  ability to save to vfs, ensure that vfs binding and user rights are available when turned on
  @param {boolean} [args.allDeselected]  for the column picjer, all columns are initially selected by default and you can deselect some. Settings this flag to true, you inverse this behaviour
  @param {function} [args.wrqModify]  function to do post wrq processing just before sending the request
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.detailExport) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.detailExport Online Api}
  @description Uses SylkServlet, CsvServlet or ExcelExportServlet export servlets to provide the data of a WrsRequest, the response opens asynchronously in an extra window
  @method detailExport
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.exports.detailExport( { wrq: wrq } );
  //</pre>
  @memberOf bcdui.component.exports
 */
bcdui.component.exports.detailExport = function(args) { console.log(args); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#._doExport) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#._doExport Online Api}
  @description 
  @method _doExport
@memberOf bcdui.component.exports
 */
bcdui.component.exports._doExport = function() {};



/**
@param {Object} args  The argument map with the following properties
  @param {bcdui.core.DataProvider} args.inputModel  containing wrs:WrsContainer with 1..n wrs:Wrs or wrq:WrsRequest elements, containing wrs:Header or rnd:Wrs2Excel defining target sheets
  @param {string} [args.fileName]  URL name used as suffix, must end with .xlsx
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportToExcelTemplate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.exports.html#.exportToExcelTemplate Online Api}
  @description Uses ExcelExportServlet to export Wrs(s) into XLSX template
  @method exportToExcelTemplate
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.exports.exportToExcelTemplate( { inputModel: inputModel } );
  //</pre>
  @memberOf bcdui.component.exports
 */
bcdui.component.exports.exportToExcelTemplate = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.html Online Api}
 * @namespace 
 */
bcdui.component.far = {};



/**
@param {Object} args  The parameter map contains the following properties.
  @param {xPath} args.dimensions_optionsModelRelativeValueXPath  xpath relative to 'dimensions_optionsModelXPath' that references a value attribute, i.e. '../&commat;value'
  @param {xPath} args.dimensions_optionsModelXPath  items considered dimensions, xpath must reference the caption attribute on the item-set; Reference deep link to items (including levels) in case you have hierarhical structure i.e. $config/far:Configurator/far:Dimensions//* /&commat;caption
  @param {object} args.dimensions_treeConfig  tree configuration object (see component documentation)
  @param {xPath} args.measures_optionsModelRelativeValueXPath  xpath relative to 'dimensions_optionsModelXPath' that references a value attribute, i.e. '../&commat;value'
  @param {xPath} args.measures_optionsModelXPath  items considered dimensions, xpath must reference the caption attribute on the item-set; Reference deep link to items (including levels) in case you have hierarhical structure i.e. $config/far:Configurator/far:Dimensions//* /&commat;caption
  @param {object} args.measures_treeConfig  tree configuration object (see component documentation)
  @param {writableModelXPath} args.targetModelXPath  Target xPath to write the far:ConfiguratorLayout configuration into.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doSortOptions]  Can be set to 'true' if the options should be sorted alphabetically. This is disabled per default to avoid CPU wasting.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.html#.createFarConfigurator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.html#.createFarConfigurator Online Api}
  @description A FAR configurator UI displaying 3 side by side choosers for choosing Dimensions, Measures and Sorting of the items, writes far:ConfiguratorLayout format into targetModelXPath; this widget is configured by number of parameters referencing various nodesets as Dimensions and Measures source items. It is expected that every dimension and measure item is represented by an element in options model providing the value and caption in separate attributes on an element,i.e. Item[&commat;value &commat;caption]. This widget supports flat or hierarhical input. For either input (flat/hierarchical) you need to provider tree configuration object containing information about how determine your hierarchy. i.e. { levelNodeName : 'far:Category', itemNodeName : 'far:Item', isDefaultCollapsed: true }
  @method createFarConfigurator
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.far.createFarConfigurator( { dimensions_optionsModelRelativeValueXPath: dimensions_optionsModelRelativeValueXPath, dimensions_optionsModelXPath: dimensions_optionsModelXPath, dimensions_treeConfig: dimensions_treeConfig, measures_optionsModelRelativeValueXPath: measures_optionsModelRelativeValueXPath, measures_optionsModelXPath: measures_optionsModelXPath, measures_treeConfig: measures_treeConfig, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.component.far
 */
bcdui.component.far.createFarConfigurator = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.enhancer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.enhancer.html Online Api}
 * @description enhancement DSL adapter utility : far-config to enhanced configuration
 * @namespace 
 */
bcdui.component.far.enhancer = {};



/**
@param {object} args  The arguments
  @param {bcdui.core.DataProvider} args.config  Configuration document from http://www.businesscode.de/schema/bcdui/far-1.0.0
  @param {string} [args.componentId]  An ID for the component, 'far' is the default. This is not the data provider's, this ID is used as component identifer to support multiple components on single page
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel, containing the filters at /SomeRoot/f:Filter, far:Far/far:ConfiguratorLayout element, etc. default is 'guiStatusEstablished'
  @param {chainDef} [args.chain]  Overrides default chain definition.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.enhancer.html#.createEnhancedConfiguration) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.enhancer.html#.createEnhancedConfiguration Online Api}
  @description Create an enhanced configuration data provider which is required as a configuration for any part of the FAR component.
  @method createEnhancedConfiguration
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.component.far.enhancer.createEnhancedConfiguration( { config: config } );
  //</pre>
  @return {bcdui.core.DataProvider} Dataprovider with enhanced configuration document                                   based on the input configuration. This data provider                                   does not listen to changes on the input configuration                                   document.
@memberOf bcdui.component.far.enhancer
 */
bcdui.component.far.enhancer.createEnhancedConfiguration = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.html Online Api}
 * @description This namespace contains functionality directly related to BCD-UI grid
 * @namespace 
 */
bcdui.component.grid = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.html Online Api}
 * @description The implementation of the Scorecard class.
 * @namespace 
 */
bcdui.component.scorecard = {};



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} [args.applyFunction]  Function name which is used for the apply button in isDefaultHtmlLayout=true mode. Default is bcdui.core.lifecycle.applyAction.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {dataProvider} [args.config]  Model containing the configuration for the scorecard configurator. By default this is taken from dimensionsAndKpis.xml.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {boolean} [args.hasUserEditRole]  Template Editor also has edit capability. If not given, bcdui.config.clientRights.bcdScorecardTemplateEdit is used to determine state (either *(any) or scorecardId to enable).
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isDefaultHtmlLayout]  If true, a standard layout for dnd area is created. If false, you need to provide containers with classes: bcdCurrentKpiList, bcdCurrentScRowDimensionList, bcdCurrentAspectList, bcdKpiList, bcdScDimensionList, bcdAspectList within an outer bcdScorecardDndMatrix container. if your targetHtml got classes bcdDndBlindOpen or bcdDndBlindClosed, the actual dnd area is also put in collapsable boxes (either open or closed by default).
  @param {boolean} [args.isRanking]  Enable the ranking feature. This is an Enterprise Edition only feature.
  @param {boolean} [args.isTemplate]  Enable the template feature. This is an Enterprise Edition only feature.
  @param {string} [args.rankingTargetHtmlElementId]  If isRanking is true then this attribute can be used to control the div where the ranking editor is placed.
  @param {string} [args.reportName]  Name of the report is used to access the persistent layouts.
  @param {boolean} [args.rowAspect]  Enables another drag'n drop box for aspects (marked with rowAspect='true') which are put in front of all aspects. KPI dimensions needs to be a row dimension in this case.
  @param {dataProvider} [args.scorecard]  Id of the scorecardRenderer the configurator belongs to. If not given, the surrounding renderer is assumed to be a cmp:scorecard.
  @param {boolean} [args.showSummary]  Enable the summary feature.
  @param {string} [args.summaryTargetHtmlElementId]  If showSummary is true then this attribute can be used to control the div where the summary is placed.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {dataProvider} [args.targetModel]  The configuration is written to $guiStatus/guiStatus:Status/scc:Layout[scorecardId='scorecardId'] by default. While the xpath /RootNode/scc:Layout[scorecardId='scorecardId'] is fixed, you can specify an own targetModel if needed.
  @param {string} [args.templateTargetHtmlElementId]  If isTemplate is true then this attribute can be used to control the div where the template editor is placed.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.html#.createScorecardConfigurator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.html#.createScorecardConfigurator Online Api}
  @description Creates a scorecard configurator, providing the scc:Layout section of the scorecard configuration, able of showing the drag and drop area for the dimensions and kpis and aspects.
  @method createScorecardConfigurator
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.scorecard.createScorecardConfigurator( { } );
  //</pre>
  @memberOf bcdui.component.scorecard
 */
bcdui.component.scorecard.createScorecardConfigurator = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html Online Api}
 * @description A namespace for the BCD-UI scorecardConfigurator widget. For creation &commat;see {@link bcdui.component.scorecard.createScorecardConfigurator}
 * @namespace 
 */
bcdui.component.scorecardConfigurator = {};



/**
@param {string} scorecardId  The id of the linked scorecard
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html#.reDisplay) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html#.reDisplay Online Api}
  @description Refreshes the scorecard drag'n drop area This is e.g. necessary when a template is applied or the layout is cleaned
  @method reDisplay
@memberOf bcdui.component.scorecardConfigurator
 */
bcdui.component.scorecardConfigurator.reDisplay = function(scorecardId) { console.log(scorecardId); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html#._itemRendererAspects) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecardConfigurator.html#._itemRendererAspects Online Api}
  @description 
  @method _itemRendererAspects
@memberOf bcdui.component.scorecardConfigurator
 */
bcdui.component.scorecardConfigurator._itemRendererAspects = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.html Online Api}
 * @description The implementation of the TextNavigation class.
 * @namespace 
 */
bcdui.component.textnavigation = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.html Online Api}
 * @description This namespace contains functionality directly related to BCD-UI tree
 * @namespace 
 */
bcdui.component.tree = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html Online Api}
 * @description This namespace contains the functions for expanding and collapsing tree nodes in the tree viewer.
 * @namespace 
 */
bcdui.component.treeView = {};



/**
@param {string} rendererId  Id of the treeView's renderer
  @param {string} levelId  Which level to change
  @param {boolean} isExpand  True for expand, false for collapse
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html#.expandCollapse) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html#.expandCollapse Online Api}
  @description Expand or collapse a level for a treeView renderer
  @method expandCollapse
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.treeView.expandCollapse( rendererId, levelId, isExpand );
  //</pre>
  @memberOf bcdui.component.treeView
 */
bcdui.component.treeView.expandCollapse = function(rendererId, levelId, isExpand) { console.log(rendererId, levelId, isExpand); };



/**
@param {Object} args  The argument map containing the following elements:
  @param {string} args.rendererId  Id of the treeView's renderer
  @param {boolean} args.isExpand  True for expand, false for collapse
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html#.expandCollapseAll) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.treeView.html#.expandCollapseAll Online Api}
  @description This function expands or collapses all levels of a treeView. It relies on the &commat;dimId and wrs:Data of the primary model of the renderer to calculate all levels and sets the guiStatus accordingly.
  @method expandCollapseAll
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.treeView.expandCollapseAll( { rendererId: rendererId, isExpand: isExpand } );
  //</pre>
  @memberOf bcdui.component.treeView
 */
bcdui.component.treeView.expandCollapseAll = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.userCalcEditor.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.userCalcEditor.html Online Api}
 * @namespace 
 */
bcdui.component.userCalcEditor = {};



/**
@param {Object} args  The argument map:
  @param {writableModelXPath} args.targetModelXPath  The XPath to write to.
  @param {string} [args.id]  The base id of the field. If nothing is specified the id is generated.
  @param {modelXPath} [args.optionsModelXPath]  An XPath returning a node-set holding the allowed
  @param {modelXPath} [args.uniqueOptionsModelXPath]  variables for the formula editor. The parameter "optionsModelRelativeValueXPath" can optionally be set to define non-visible values belonging to the visible options denoted by this XPath.
  @param {xPath} [args.optionsModelRelativeValueXPath]  If specified this XPath is applied to each node returned by the "optionsModelXPath" to get a non-visible value to be written to the target node. When no "optionsModelRelativeValueXPath" is given there is no distinction between the caption and value of each option.
  @param {string} [args.dialogCaption]  Caption of dialog window, it will be used as i18n key to translate the caption.
  @param {boolean} [args.isFormatOptionsVisible]  Show format fields (format, scale, percent)
  @param {boolean} [args.validateVariableNamesCheckbox]  Show checkbox which enabling\disabling validation of variable names with list in optionsModel while input formula
  @param {string} [args.validateVariableNamesCaption]  Caption of checkbox, which enable\disable formula variables validation
  @param {function} args.successCallBack  Callback function which called after success saving model after closing modal window
  @param {boolean} [args.skipServerSidedFunctions]  Set to true to disable usage of server sided functions like CntDist.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.userCalcEditor.html#.showUserCalcEditor) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.userCalcEditor.html#.showUserCalcEditor Online Api}
  @description Brings up a user calc editor, i.e. an inout field with autocomplete for entering formulas that can be used in calculation.xslt
  @method showUserCalcEditor
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.component.userCalcEditor.showUserCalcEditor( { targetModelXPath: targetModelXPath, successCallBack: successCallBack } );
  //</pre>
  @memberOf bcdui.component.userCalcEditor
 */
bcdui.component.userCalcEditor.showUserCalcEditor = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html Online Api}
 * @description <p>  This namespace encapsulates consists of the lower layer of BCDUI core functionality. It is composed of three blocks of functionality: <dl><dt> Core Classes                                                              </dt><dd><p> The core classes are the foundation for most BCDUI objects on the page. The processes these objects are reflecting are running  asynchronously and implemented in the form of a state-machine behaviour. The central interface for these classes is the {@link bcdui.core.DataProvider} interface. </p></dd><dt> Page Lifecycle Support                                                    </dt><dd><p> These are functions dealing with the loading of XML and creating and executing XSLT, provided by the central {@link bcdui.core.xmlLoader} object. Additionally there are function for managing page status. This status is encapsulated in the {@link guiStatus} object which can be compressed and uncompressed to transport it in URLs and browser bookmarks. </p></dd><dt> Utility functions                                                         </dt><dd><p> The core package provides lots of utility functions to support XML processing, enhance cross-browser compatibility and to simplify JavaScript development. Most of these functions are located directly under the bcdui.core namespace. </p></dd></dl></p><p> The functions and classes provided here can be used directly or they can be accessed through a higher architecture layer such as the {@link bcdui.factory} namespace.  </p>
 * @namespace 
 */
bcdui.core = {};

/**
 * The full URL to the webRowSet servlet.
 */
bcdui.core.webRowSetServletPath = {};
/**
 * The full URL to the webRowSet servlet at servletsSessionCached path
 */
bcdui.core.webRowSetServletPathSessionCached = {};
/**
 * A fixed empty model which can be used in various cases when the real model is notyet available. The model contains a single root element &lt;Empty/>.
 */
bcdui.core.emptyModel = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.createQueryString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.createQueryString Online Api}
  @description encode parameters into a query-string
  @method createQueryString
@return {string} the query string, with encoded parameters; this string does not start with '?'
@memberOf bcdui.core
 */
bcdui.core.createQueryString = function() {};



/**
@param {string} url  The URL containing the parameter.
  @param {string} parameterName  The parameter name.
  @param {string} [defaultValue]  The default value when the result would be null. If not specified it returns null if the parameter is not found.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.getUrlParameter) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.getUrlParameter Online Api}
  @description Extracts the value of a parameter definition from the URL. For example if the URL is "http://myHost/myApp/myReport.jsp?guiStatusGZ=abc" and the parameterName is "guiStatusGZ" the return value is "abc".
  @method getUrlParameter
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.getUrlParameter( url, parameterName );
  //</pre>
  @return {string} The value of the parameter or the default value (usually NULL)if the parameter is empty or not found.
@memberOf bcdui.core
 */
bcdui.core.getUrlParameter = function(url, parameterName, defaultValue) { console.log(url, parameterName, defaultValue); };



/**
@param {string} url  The URL where the parameter replacement should be applied.
  @param {string} parameterName  The name of the parameter.
  @param {string} unEscapedValue  The parameter value which must not be escaped. This function escapes it. If this is NULL the parameter definition is removed.
  @param {boolean} [asAnchor]  A boolean value (which is false by default) indicating if the parameter definition should be placed in the anchor section of the URL.
  @param {boolean} [allowMultiple]  If set to true, allows multiple occurences of parameter (i.e. resulting in a parsed array on the server)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.setUrlParameter) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.setUrlParameter Online Api}
  @description Replaces a parameter=value definition inside a URL. For example if the url is "/myApp/myReport.jsp?guiStatusGZ=abc&menuId=xyz", the parameterName is "guiStatusGZ" and the unEscapedValue is "newValue" the result will be "/myApp/myReport.jsp?menuId=xyz&guiStatusGZ=newValue". Please note that this function does not preserve the original parameter ordering. <br/> Additionally it can also put parameter definitions in the anchor section of the URL, for example like "/myApp/myReport.jsp?menuId=xyz#guiStatusGZ=bla".
  @method setUrlParameter
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.setUrlParameter( url, parameterName, unEscapedValue );
  //</pre>
  @return {string} The transformed URL.
@memberOf bcdui.core
 */
bcdui.core.setUrlParameter = function(url, parameterName, unEscapedValue, asAnchor, allowMultiple) { console.log(url, parameterName, unEscapedValue, asAnchor, allowMultiple); };



/**
@param {string} str  The string to be quotes as an XPath string.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.quoteXPathString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.quoteXPathString Online Api}
  @description Quotes a string so that it can be used within an XPath for selectNodes / selectSingleNode. For example the string myValue becomes 'myValue' . The quotes are automatically added so that it is a valid XPath string.
  @method quoteXPathString
@return {string} The XPath string representing str.
@memberOf bcdui.core
 */
bcdui.core.quoteXPathString = function(str) { console.log(str); };



/**
@param {(DomDocument|DomElement|bcdui.core.DataProvider)} baseElement  The Dataprovider, DOM document or the XML element the path is evaluated on.
  @param {string} path  The XPath identifying the element to be retrieved or created.
  @param {boolean} [enableWrsExtensions]  Set this flag to "true" if the function should treat wrs elements differently (like converting wrs:R to wrs:M or creating wrs:I elements). It is "true" by default.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.createElementWithPrototype) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.createElementWithPrototype Online Api}
  @description This function works similar to selectSingleNode in that executes an XPath on a DOMDocument or XML element and returns an XML element. However if the element does not exists it creates XML elements on the XPath so that the XPath returns an element afterwards. For example if the document contains only a root element and the path is <pre> /Root/Filter[&commat;name = 'abc']/Item </pre> it does the following: <ol> <li>create an element "Filter" under the root node,</li> <li>set an attribute "name" with content "abc" on it,</li> <li>create an Item under it,</li> <li>return the Item. So the XPath "/Root/Filter[&commat;name = 'abc']/Item" can be regarded as an XML prototype that is created if the element does not exist.</li> </ol> </p> <p> Please note that this function accepts only a very limited set of XPaths because otherwise the inversion of the XPath would be too complicated to be computed. For example it is not allowed to specify "//" in the XPath and the "or" conjunction cannot be used. If you want to modify an existing wrs cell, bcdui.wrs.wrsUtil.setCellValue might be a more convenient function to use.
  @method createElementWithPrototype
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.createElementWithPrototype( baseElement, path );
  //</pre>
  @return {Element} The XML element to be found under the specified XPath.
@memberOf bcdui.core
 */
bcdui.core.createElementWithPrototype = function(baseElement, path, enableWrsExtensions) { console.log(baseElement, path, enableWrsExtensions); };



/**
@param {function} fn  The function executed as soon as the browser has finished loading.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.ready) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.ready Online Api}
  @description Registers a callback function to be executed when the browser has finished loading. If the loading has already finished the function is executed immediately.
  @method ready
@memberOf bcdui.core
 */
bcdui.core.ready = function(fn) { console.log(fn); };



/**
@param {Object} obj  The abstract executable object which should be reexecuted
  @param {function} [readyFunction]  Function to be executed once on ready status
  @param {boolean} [shouldRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.reExecute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.html#.reExecute Online Api}
  @description Reexecutes the process implemented by the concrete sub-class.
  @method reExecute
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.reExecute( obj );
  //</pre>
  @memberOf bcdui.core
 */
bcdui.core.reExecute = function(obj, readyFunction, shouldRefresh) { console.log(obj, readyFunction, shouldRefresh); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html Online Api}
 * @description <p>  This namespace contains XML-related functions to make the BCD-UI library work on different browsers' XML implementation. These functions deal with the following issues: <dl><dt> XML Document creation                                                     </dt><dd><p> Factory functions for creating XML documents, parsing and serialization and creating XSLT processors. </p></dd><dt> XML Manipulation + IE API Compatibilty                                    </dt><dd><p> The Mozilla / Webkit XML classes are augmented so that they implement the IE-compatible interface. Then the users can focus on this API only. </p></dd><dt> Namespace handling                                                        </dt><dd><p> Align the handling of XML namespaces and prefixes so that the well-known BCD-UI prefixes as well as user prefixes can be used in the JavaScript API. </p></dd></dl></p><p> </p>
 * @namespace 
 */
bcdui.core.browserCompatibility = {};

/**
 * Allows for quick testing of IE version, if not iE, this is simply undefined
 */
bcdui.core.browserCompatibility.ieVersion = {};
/**
 * Asynchronous creation of an XSLTProcessor object from a DOM document.
 */
bcdui.core.browserCompatibility.asyncCreateXsltProcessor = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.resolveNamespace) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.resolveNamespace Online Api}
  @description 
  @method resolveNamespace
@return {string} URI for a given prefix
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.resolveNamespace = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.newDOMDocument) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.newDOMDocument Online Api}
  @description 
  @method newDOMDocument
@return {DomDocument} A new DOM document
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.newDOMDocument = function() {};



/**
@param {DomDocument} doc  To be cloned
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cloneDocument) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cloneDocument Online Api}
  @description 
  @method cloneDocument
@return {DomDocument} A clone of the given DOM document
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.cloneDocument = function(doc) { console.log(doc); };



/**
@param {string} serializedDoc  A serialized XML document.
  @param {string} msg  Optional for better error message.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.createDOMFromXmlString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.createDOMFromXmlString Online Api}
  @description Parses given xml string and creates a DOMDocument out of it.
  @method createDOMFromXmlString
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.browserCompatibility.createDOMFromXmlString( serializedDoc, msg );
  //</pre>
  @return {DomDocument} The DOMDocument parsed from the serialized document string.
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.createDOMFromXmlString = function(serializedDoc, msg) { console.log(serializedDoc, msg); };



/**
@param doc  The document (doc or string) which should be cleaned
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.removeObsoleteNS) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.removeObsoleteNS Online Api}
  @description removes obsolete namespace declarations and moves used ones to the root element
  @method removeObsoleteNS
@return {String} The serialized and namespace-cleaned representation of the doc
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.removeObsoleteNS = function(doc) { console.log(doc); };



/**
@param {HtmlElement} targetElement  The targetElement which is used for appending the new element.
  @param {string} name  The element name which may contain a well-known prefix.
  @param {boolean} insertBeforeTargetElement  Preprend instead of append element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.appendElementWithPrefix) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.appendElementWithPrefix Online Api}
  @description Creates a new element whose name can contain a well-known prefix (like "wrs") and appends it to the specified target element. This function should be used rather than createElementNS, because the latter is not available on the Internet Explorer.
  @method appendElementWithPrefix
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.browserCompatibility.appendElementWithPrefix( targetElement, name, insertBeforeTargetElement );
  //</pre>
  @return {DomElement} The new XMLElement.
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.appendElementWithPrefix = function(targetElement, name, insertBeforeTargetElement) { console.log(targetElement, name, insertBeforeTargetElement); };



/**
@param {object} args  An argument map containing the following elements:
  @param {DomDocument} args.model  The XSLT document the XSLTProcessor instance should be
  @param {function} args.callBack  The callback function executed when the processor has been created. It takes the processor instance as argument
  @param {string} args.callerDebug  Additional (debug) information from the caller for logging
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.asyncCreateXsltProcessor) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.asyncCreateXsltProcessor Online Api}
  @description Asynchronous creation of an XSLTProcessor object from a DOM document.
  @method asyncCreateXsltProcessor
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.browserCompatibility.asyncCreateXsltProcessor( { model: model, callBack: callBack, callerDebug: callerDebug } );
  //</pre>
  @memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.asyncCreateXsltProcessor = function(args) { console.log(args); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt Online Api}
  @description 
  @method cleanupGeneratedXslt
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.cleanupGeneratedXslt = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.extractMetaDataFromStylesheetDoc) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.extractMetaDataFromStylesheetDoc Online Api}
  @description 
  @method extractMetaDataFromStylesheetDoc
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.extractMetaDataFromStylesheetDoc = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.preXslImportByProc) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.preXslImportByProc Online Api}
  @description 
  @method preXslImportByProc
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.preXslImportByProc = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.MSXMLDocumentWrapper) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.MSXMLDocumentWrapper Online Api}
  @description To be able to attach new functions like createElementNS to our XMLDocument, we need to wrap MSXML ActiceX objects here  Sadly, we cannot provide legacy .xml, .text via implicit getter (defineProperty is not available in IE8). Switching to an explicit function xml() or so is also no real option since we cannot provide that for MSXML elements (unless we would proxy them all them) and often it is unknown whether we have an element (no proxy) or a document (is proxied). So, just use standard XMLSerializer from now on.  New native XML objects of MS do not support selectSingleNode() nor evaluate(), we still have to use MSXML, can't use document.implementation.createDocument(null,null,null);
  @method MSXMLDocumentWrapper
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.MSXMLDocumentWrapper = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.jQueryXhr) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.jQueryXhr Online Api}
  @description 
  @method jQueryXhr
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.jQueryXhr = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt Online Api}
  @description Helper to support namespace-alias for Gecko
  @method cleanupGeneratedXslt
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.cleanupGeneratedXslt = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.html#.cleanupGeneratedXslt Online Api}
  @description 
  @method cleanupGeneratedXslt
@memberOf bcdui.core.browserCompatibility
 */
bcdui.core.browserCompatibility.cleanupGeneratedXslt = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html Online Api}
 * @description This namespace contains implementations that apply to all versions of Internet Explorer.
 * @namespace 
 */
bcdui.core.browserCompatibility.ie = {};

/**
 * The currently used MSXML version which is one of the versions supplied inthe {@link bcdui.core.browserCompatibility.ie.msxmlVersions} array.
 */
bcdui.core.browserCompatibility.ie.currentMSXMLVersion = {};


/**
@param {HtmlElement} targetElement  The targetElement which is used for appending the new element.
  @param {string} name  The element name which may contain a well-known prefix.
  @param {boolean} insertBeforeTargetElement  Preprend instead of append element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html#.appendElementWithPrefix) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html#.appendElementWithPrefix Online Api}
  @description Creates a new element whose name can contain a well-known prefix (like "wrs"). It uses createElement, because IE does not implement createElementNS. The element is then appended to the specified target element.
  @method appendElementWithPrefix
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.browserCompatibility.ie.appendElementWithPrefix( targetElement, name, insertBeforeTargetElement );
  //</pre>
  @return {DomElement} The new XMLElement.
@memberOf bcdui.core.browserCompatibility.ie
 */
bcdui.core.browserCompatibility.ie.appendElementWithPrefix = function(targetElement, name, insertBeforeTargetElement) { console.log(targetElement, name, insertBeforeTargetElement); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html#.createIE_DOMFromXmlString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.html#.createIE_DOMFromXmlString Online Api}
  @description Sadly, new DOMParser().parseFromString() (IE9) does produce an XML document which is not aware of xPath, so we need keep using MSXML and loadXML
  @method createIE_DOMFromXmlString
@memberOf bcdui.core.browserCompatibility.ie
 */
bcdui.core.browserCompatibility.ie.createIE_DOMFromXmlString = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html Online Api}
 * @namespace 
 */
bcdui.core.compression = {};



/**
@param {DomDocument} doc  The DOM document to be compressed.
  @param {function} fn  The callback function executed when the compression succeeds. This function gets a string argument with the compressed document.
  @param {function} [errorFn]
  @param {boolean} [isSync]  If set to true the compression is forced to call the callback *fn* synchronously, i.e. keeping the event call stack, etc
  @param {boolean} [compressAll]  I f set to true 'tiny' compression is taken into account even for non guiStatus docs
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html#.compressDOMDocument) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html#.compressDOMDocument Online Api}
  @description Compresses a DOMDocument and encodes it in a string. This string can then be added to the URL to pass the DOMDocument to another page. Whenever possible this function tries to do the compression and encoding on the client. However if the client-side encoding is too big it makes a server request to get a more compact encoding. URL length limits for GET in chars: <ul> <li>IE       - 2048 <li>FF       - 65536 <li>Webkit   - 80000 <li>Opera    - 190000 <li>Tomcat/Apache  - 8190 overall, including url, header etc </ul> therefore max guiStatusGZ length: max URL length minus path length
  @method compressDOMDocument
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.compression.compressDOMDocument( doc, fn );
  //</pre>
  @memberOf bcdui.core.compression
 */
bcdui.core.compression.compressDOMDocument = function(doc, fn, errorFn, isSync, compressAll) { console.log(doc, fn, errorFn, isSync, compressAll); };



/**
@param {string} compressedXmlString  The encoded and compressed XML document to be reconstructed.
  @param id
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html#.uncompressDOMDocument) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.compression.html#.uncompressDOMDocument Online Api}
  @description This function decodes an encoded and compressed XML document passed as the {@link bcdui.core.compression.compressDOMDocument compressedXmlString()} argument. It can either make the computations on the client or on the server dependent on the encoding type.
  @method uncompressDOMDocument
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.core.compression.uncompressDOMDocument( compressedXmlString, id );
  //</pre>
  @return {bcdui.core.DataProvider} A DataProvider instance holding theuncompressed data when it is in the Ready state.
@memberOf bcdui.core.compression
 */
bcdui.core.compression.uncompressDOMDocument = function(compressedXmlString, id) { console.log(compressedXmlString, id); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.event.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.event.html Online Api}
 * @namespace 
 */
bcdui.core.event = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html Online Api}
 * @description This namespace contains functions related to BCD-UI page lifecycle management.
 * @namespace 
 */
bcdui.core.lifecycle = {};



/**
@param {Object} args
  @param {boolean} [args.cleanXPath]  Additional XPath to be cleaned from the guiStatus
  @param {boolean} [args.validateFilters]  True or false whether or not to check IsValid flags of guiStatus filters
  @param {DomDocument} [args.statusDocument]  optionally, other statusDocument than guiStatus
  @param {boolean} [args.removeAllParams]  True or false whether or not to remove all url parameters first
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.applyAction) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.applyAction Online Api}
  @description Takes the current guiStatus and re-invokes the current page with it <code>/guiStatus:Status/guiStatus:ClientSettings</code> is removed as it only serves for temporary information
  @method applyAction
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.lifecycle.applyAction( { } );
  //</pre>
  @memberOf bcdui.core.lifecycle
 */
bcdui.core.lifecycle.applyAction = function(args) { console.log(args); };



/**
@param {url} href  target URL to jump to.
  @param {DomDocument} [statusDocument]  status document to pass as guiStatusGZ parameter to href.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.jumpTo) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.jumpTo Online Api}
  @description Jumps to another url optionally setting status document, this function is executed asynchronously.
  @method jumpTo
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.lifecycle.jumpTo( href );
  //</pre>
  @memberOf bcdui.core.lifecycle
 */
bcdui.core.lifecycle.jumpTo = function(href, statusDocument) { console.log(href, statusDocument); };



/**
@param {Object} args
  @param {Object} [args.proposedName]  Name of the bookmark
  @param {Object} [args.cleanClientSettings]  True or false whether or not to clean /guiStatus:Status/guiStatus:ClientSettings from the $guiStatus
  @param {Object} [args.cleanXPath]  Additional XPath to be cleaned from the guiStatus, useful for removing current period filter for example
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.bookmarkAction) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.bookmarkAction Online Api}
  @description Creates a bookmark entry for the current page + guiStatus
  @method bookmarkAction
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.core.lifecycle.bookmarkAction( { } );
  //</pre>
  @memberOf bcdui.core.lifecycle
 */
bcdui.core.lifecycle.bookmarkAction = function(args) { console.log(args); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.switchToMainUrl) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.html#.switchToMainUrl Online Api}
  @description 
  @method switchToMainUrl
@memberOf bcdui.core.lifecycle
 */
bcdui.core.lifecycle.switchToMainUrl = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.magicChar.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.magicChar.html Online Api}
 * @description These are named magic UTF-8 constants, defined by BCD-UI. When referring to it in xml, use &#xE0F0;
 * @namespace 
 */
bcdui.core.magicChar = {};

/**
 * Indicates a null dimension value in expressions like "DE|\uE0F0" for DE-total or simple an empty station value
 */
bcdui.core.magicChar.dimEmpty = "";
/**
 * Indicates that the null in the expression above stands for a real null in the data
 */
bcdui.core.magicChar.dimNull = {};
/**
 * Indicates that the null in the expression above stands for a null due to aggregation level (grouping=1)
 */
bcdui.core.magicChar.dimTotal = {};
/**
 * Grand total column
 */
bcdui.core.magicChar.measureGTC = {};
/**
 * Sub total column
 */
bcdui.core.magicChar.measureSTC = {};
/**
 * Grand total row
 */
bcdui.core.magicChar.measureGTR = {};
/**
 * Subtotal row
 */
bcdui.core.magicChar.measureSTR = {};
/**
 * Used when concatenating strings as a separator which cannot (should not) appear in any data
 */
bcdui.core.magicChar.separator = "";
/**
 * Used in expressions similar to zin(), i.e. a null should become a value which cannot (should not) appear in any data and is also != separator
 */
bcdui.core.magicChar.nonWord = "";


/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.html Online Api}
 * @description A namespace containing a set of status classes used by the BCD-UI system. They are used by the subclasses of the {@link bcdui.core.AbstractExecutable AbstractExecutable} to implement their status system. See {@link bcdui.core.AbstractExecutable#getStatus getStatus()}. </P> The statuses are useful during debugging, if parts of the page do not get ready. Normally, after loading and processing, all AbstractExecutable reach {@link bcdui.core.AbstractExecutable#isReady .isReady()}  === true, if everything is OK. It depends on the exact concrete subclass of AbstractExecutable, which of the statuses below means successful final, i.e. isReady(). You can retrieve this final-success status via {@link bcdui.core.AbstractExecutable#getReadyStatus .getReadyStatus()} of the subclass.
 * @namespace 
 */
bcdui.core.status = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html Online Api}
 * @description Most parts of this package are not intended to be used from JavaScript and thus not part of the API documentation. <p/> The factory package implements the functionality necessary to use BCD-UI objects in the context of jsp, XSLT-templates and XAPI and widget XPath expressions, in other words, wherever objects are connected by id rather than by providing JavaScript objects. <p/> The main difference between JavaScript and declarative contexts are that <ul> <li>All objects are identified and connected by a string id rather than by JavaScript references. For this reason, all objects created by the factory are registered automatically. <li>Second, it is allowed for objects to be created in an order following HTML output, as for example jsp tags are put into their output place. This leads to situations, where an object receives an object as input, which is only defined further down, something that cannot happen in JavaScript. Therefore the factories in here delay the object creation until all objects ot depends on are defined. </ul>
 * @namespace 
 */
bcdui.factory = {};

/**
 * This is a singleton object of type ({@link bcdui.factory.ObjectRegistry}) where instances of {@link bcdui.core.DataProvider}can be registered by their globally unique id. It allows listeners to wait for these registrations so that they can safely accessthese objects no matter which time they are created at. Therefore it plays a vital role in the development of robust code and forthe creation of a higher abstraction layer like JSP markup.
 */
bcdui.factory.objectRegistry = new bcdui.factory.ObjectRegistry();


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html#.createDataProviderWithXPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html#.createDataProviderWithXPath Online Api}
  @description Creates a dataprovider from an xPath, its value is the evaluated xPath
  @method createDataProviderWithXPath
@memberOf bcdui.factory
 */
bcdui.factory.createDataProviderWithXPath = function() {};



/**
@param args  The parameter map
  @param {(bcdui.core.DataProvider|SymLink|String)} args.targetModel  The ID of the Model (DataProvider) whose content is supposed to be transformed.
  @param {(bcdui.core.DataProvider|SymLink|String)} [args.chain]  from modelWrapper - A DataProvider (or SymLink or its ID) which contains the list of style sheets that make up the transformation chain of this renderer. This DataProvider must contain an XML document satisfying the XML Schema 'chain-1.0.0.xsd'. The 'url' and 'chain' parameters are mutually exclusive.
  @param {String} [args.url]  from modelWrapper - This parameter can be set when the renderer should only apply one single XSLT style sheet. It contains the URL pointing to it. If this parameter is set the 'chain' parameter must be omitted.
  @param {(bcdui.core.DataProvider|SymLink)} [args.inputModel]  from modelWrapper - The DataProvider instance that becomes the input of the transformation chain. If omitted the first element of the dataProviders[] array is the input.
  @param {(bcdui.core.DataProvider|Array.<SymLink>)} [args.dataProviders]  from modelWrapper - An array of DataProviders passed to the transformation chain. These data providers can be access in the transformation style sheets with xsl:param.
  @param {Object} [args.parameters]  from modelWrapper - A mapping from parameter names to DataProviders (or SymLinks) which are passed to the transformation chain. This is a more convenient way to pass parameters compared to the dataProviders array.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html#.executeXSLT) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.html#.executeXSLT Online Api}
  @description Executes a transformation chain producing an XML document. Then it replaces the XML document of the specified target DataProvider with the generated XML document. This is useful when the target DataProvider should be initialized with some client-side computed values. The behavior of the function is similar to the createModelWrapper function and therefore it inherits all parameters from it. The only additional parameter required is the "targetModel" parameter described below.
  @method executeXSLT
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.factory.executeXSLT( { targetModel: targetModel } );
  //</pre>
  @example
  //<pre>
  bcdui.factory.executeXSLT({
        targetModel    : myModel,
        url            : "../../insertValues.xslt",
        parameters     : { rowCount: 5 },
      });
  //</pre>
  @memberOf bcdui.factory
 */
bcdui.factory.executeXSLT = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.logging.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.logging.html Online Api}
 * @namespace 
 */
bcdui.logging = {};



/**
@param {Object} args  The parameter map containing
  @param {Array.<string>} args.idRef  Id(s) of DataProvider(s) to wait for, or wait for all renderers registered at the moment of {@link bcdui.core.ready}
  @param {string} [args.logName]  If provided, this is the name for which the log is written. If not given, idRef is used
  @param {string} [args.addInfo]  Optionally any text that should be also logged
  @param {function} [args.jsCallback]  A callback function can be supplied which is triggered once the log has captured data. The callback is called with a parameter object with a duration property, indicating the logged duration
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.logging.html#.logPage) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.logging.html#.logPage Online Api}
  @description Useful for performance testing. <p/> Sends a log message with the duration since start of page load to the server perf-log table, once a certain set of DataProviders or all current Renderers are ready Use this for example to trace the duration from page loading start to the end of load of a major or all Renderers to be shown to the user. <p/> Well-known bindingSet bcd_log_pageperformance must be available for using this.
  @method logPage
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.logging.logPage( { idRef: idRef } );
  //</pre>
  @memberOf bcdui.logging
 */
bcdui.logging.logPage = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html Online Api}
 * @namespace 
 */
bcdui.util = {};



/**
@param {string} url  URL with the parameters
  @param separator
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.toQueryParams) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.toQueryParams Online Api}
  @description Logic derived from PrototypeJs library to "Parses a URI-like query string and returns an object composed of parameter/value pairs".
  @method toQueryParams
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.toQueryParams( url, separator );
  //</pre>
  @return {string} An object with the parameters of the url as properties
@memberOf bcdui.util
 */
bcdui.util.toQueryParams = function(url, separator) { console.log(url, separator); };



/**
@param {string} string  Value to be unescaped
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.unescapeHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.unescapeHtml Online Api}
  @description 
  @method unescapeHtml
@return {string} unescaped string
@memberOf bcdui.util
 */
bcdui.util.unescapeHtml = function(string) { console.log(string); };



/**
@param {string} string  Value to be escaped
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.escapeHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.escapeHtml Online Api}
  @description 
  @method escapeHtml
@return {string} Escaped string
@memberOf bcdui.util
 */
bcdui.util.escapeHtml = function(string) { console.log(string); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#._sendFormRequest) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#._sendFormRequest Online Api}
  @description sends a HTTP request using HTML form submit  {string} url                   the url to call {object} [args]                optional arguments {string} [args.method=get]     request method {string} [args.target=_blank]  the target {string} [args.enctype=application/x-www-form-urlencoded]  the enctype {object} [args.parameters]     object map with parameters to send
  @method _sendFormRequest
@memberOf bcdui.util
 */
bcdui.util._sendFormRequest = function() {};



/**
@param {string} elementName  The name of the custom element to create, must adhere to custom element standards.
  @param {function} createdCallback  The function which is called on the element once it is attached to the document, the context is set to the element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.createCustomElement) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.createCustomElement Online Api}
  @description Custom element creation helper.
  @method createCustomElement
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.util.createCustomElement( elementName, createdCallback );
  //</pre>
  @memberOf bcdui.util
 */
bcdui.util.createCustomElement = function(elementName, createdCallback) { console.log(elementName, createdCallback); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.getUuid) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.getUuid Online Api}
  @description Generates a new UUID
  @method getUuid
@return {string} uuid
@memberOf bcdui.util
 */
bcdui.util.getUuid = function() {};



/**
@param {string} name  The name of the subjectSetting
  @param {string} value  The value of for the subjectSetting specified by the name parameter. Can be a comma-separated value list
  @param {function} callback  The function which is called after a successful call of the subjectPreferences servlet
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.setSubjectPreference) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.html#.setSubjectPreference Online Api}
  @description sets a subject preference
  @method setSubjectPreference
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.util.setSubjectPreference( name, value, callback );
  //</pre>
  @memberOf bcdui.util
 */
bcdui.util.setSubjectPreference = function(name, value, callback) { console.log(name, value, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html Online Api}
 * @description This namespace contains the clipboard functions, objects and constants.
 * @namespace 
 */
bcdui.util.clipboard = {};



/**
@param {string} data  Data to be copied to clipboard
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.copy) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.copy Online Api}
  @description Copy
  @method copy
@memberOf bcdui.util.clipboard
 */
bcdui.util.clipboard.copy = function(data) { console.log(data); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.paste) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.paste Online Api}
  @description Paste
  @method paste
@return {Promise} - resolving with clipboard data
@memberOf bcdui.util.clipboard
 */
bcdui.util.clipboard.paste = function() {};



/**
@param {string} [data]  Optional parameter containing CSV data which should be converted instead of the clipboard data. If omitted the CSV data is taken from the clipboard.
  @param {boolean} [emptyRowIfNoData]  If true and there is no data to paste, an emtpy row with one column is produced in the resulting XML, this is useful for pasting as new rows, in case only empty-cells were previously copied to the clipboard.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.pasteCSVasXML) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.pasteCSVasXML Online Api}
  @description Gets CSV data from the clipboard (or the provided data) and converts it to XML according to the csv-1.0.0.xsd.
  @method pasteCSVasXML
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.util.clipboard.pasteCSVasXML( );
  //</pre>
  @memberOf bcdui.util.clipboard
 */
bcdui.util.clipboard.pasteCSVasXML = function(data, emptyRowIfNoData) { console.log(data, emptyRowIfNoData); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.clearData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.clipboard.html#.clearData Online Api}
  @description Cleans the current clipboard
  @method clearData
@memberOf bcdui.util.clipboard
 */
bcdui.util.clipboard.clearData = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html Online Api}
 * @description Functions related to processing and formatting of (XML-) dates.
 * @namespace 
 */
bcdui.util.datetime = {};



/**
@param {(Date|string)} date  The date object to be parsed.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.parseDate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.parseDate Online Api}
  @description Parses a date if the argument is a string or returns the date otherwise. The date can be in XML date or timestamp format.
  @method parseDate
@return {Date} The parsed date or the "date" argument if it is already a date object.
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.parseDate = function(date) { console.log(date); };



/**
@param {String} date  The date string to be parsed.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isValidDate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isValidDate Online Api}
  @description Checks if date passed is valid date
  @method isValidDate
@return {boolean} Whether the parsed "date" argument is valid date string.
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.isValidDate = function(date) { console.log(date); };



/**
@param {(Date|string)} startDate  First day of the date range
  @param {(Date|string)} endDate  Last day of the date range
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isYearRange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isYearRange Online Api}
  @description Tests if the specified date range exactly covers exactly one or more years
  @method isYearRange
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.datetime.isYearRange( startDate, endDate );
  //</pre>
  @return {boolean}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.isYearRange = function(startDate, endDate) { console.log(startDate, endDate); };



/**
@param {(Date|string)} startDate  First day of the date range
  @param {(Date|string)} endDate  Last day of the date range
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isQuarterRange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isQuarterRange Online Api}
  @description Tests if the date range corresponds to exactly to one quarter (Jan - Mar, Apr - Jun, Jul - Sep or Oct - Dec of the same year)
  @method isQuarterRange
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.datetime.isQuarterRange( startDate, endDate );
  //</pre>
  @return {boolean}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.isQuarterRange = function(startDate, endDate) { console.log(startDate, endDate); };



/**
@param {(Date|string)} startDate  First day of the date range
  @param {(Date|string)} endDate  Last day of the date range
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isMonthRange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isMonthRange Online Api}
  @description Tests if the given date range covers exactly one or more months.
  @method isMonthRange
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.datetime.isMonthRange( startDate, endDate );
  //</pre>
  @return {boolean}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.isMonthRange = function(startDate, endDate) { console.log(startDate, endDate); };



/**
@param {(Date|string)} startDate  First day of the date range
  @param {(Date|string)} endDate  Last day of the date range
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isWeekRange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.isWeekRange Online Api}
  @description Tests if the given date range covers exactly one or more calendar weeks.
  @method isWeekRange
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.datetime.isWeekRange( startDate, endDate );
  //</pre>
  @return {boolean}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.isWeekRange = function(startDate, endDate) { console.log(startDate, endDate); };



/**
@param {integer} value  An integer of how many periods the input is to be shifted. Negative values are allowed.
  @param {Date} startDate
  @param {Date} endDate
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.increasePeriod) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.increasePeriod Online Api}
  @description Shifts the given period by the given value The value is assumed to have the same period type (qu, mo, dy) as startDate and endDate
  @method increasePeriod
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.util.datetime.increasePeriod( value, startDate, endDate );
  //</pre>
  @memberOf bcdui.util.datetime
 */
bcdui.util.datetime.increasePeriod = function(value, startDate, endDate) { console.log(value, startDate, endDate); };



/**
@param {(Date|string)} date  date for which to determine the CW
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getISOWeekYear) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getISOWeekYear Online Api}
  @description Calculates The year of the ISO week the date lies within. This can be different from the year of the date, especially when the year has 53 ISO weeks.
  @method getISOWeekYear
@return {integer} cwYr
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.getISOWeekYear = function(date) { console.log(date); };



/**
@param {(Date|string)} date  date for which to determine the CW
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getISOWeekNumber) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getISOWeekNumber Online Api}
  @description Calculates the ISO week number the date belongs to. Derived from Klaus Tondering's Calendar document.
  @method getISOWeekNumber
@return {integer} cw
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.getISOWeekNumber = function(date) { console.log(date); };



/**
@param {(Date|string)} startDate  First day of the date range
  @param {(Date|string)} endDate  Last day of the date range
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.prettyPrintDateRange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.prettyPrintDateRange Online Api}
  @description Pretty prints a date range
  @method prettyPrintDateRange
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.datetime.prettyPrintDateRange( startDate, endDate );
  //</pre>
  @return {String} A string describing the date range (e.g. "Jul 2010" or "CW 30, 2010").
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.prettyPrintDateRange = function(startDate, endDate) { console.log(startDate, endDate); };



/**
@param {int} month
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getShortMonthName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.getShortMonthName Online Api}
  @description The month name as abbreviated string (e.g. "Jul")
  @method getShortMonthName
@return {String} .
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.getShortMonthName = function(month) { console.log(month); };



/**
@param {Date} date
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.formatDate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.formatDate Online Api}
  @description The date in the XML date format (e.g. "2010-07-23")
  @method formatDate
@return {String}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.formatDate = function(date) { console.log(date); };



/**
@param {Date} date
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.formatDateTime) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.datetime.html#.formatDateTime Online Api}
  @description The date in the XML datetime format (e.g. "2010-07-23T00:00:00")
  @method formatDateTime
@return {String}
@memberOf bcdui.util.datetime
 */
bcdui.util.datetime.formatDateTime = function(date) { console.log(date); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.Event.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.Event.html Online Api}
 * @description Constants for standard key event values
 * @namespace 
 */
bcdui.util.Event = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html Online Api}
 * @description Utilities for working with URLs
 * @namespace 
 */
bcdui.util.url = {};



/**
@param {string} relativeBaseUrl  The URL the relativeUrl is based on. This may be a relative or an absolute URL.
  @param {string} relativeUrl  The relative URL to be resolved.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.translateRelativeURL) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.translateRelativeURL Online Api}
  @description This utility function applies a relative URL to a base URL and returns the resulting URL. It is quite useful to compute for example the value of the xml:base attribute of XIncludes, because the xml:base URL it the model's data URL applied to the browser's href. For example if the relativeBaseUrl is "/myProject/reports/myReport.jsp" and the relativeUrl is "../include/data.xml" the result will be "/myProject/include/data.xml".
  @method translateRelativeURL
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.url.translateRelativeURL( relativeBaseUrl, relativeUrl );
  //</pre>
  @return {string} The result of applying the relativeUrl to the relativeBaseUrl.
@memberOf bcdui.util.url
 */
bcdui.util.url.translateRelativeURL = function(relativeBaseUrl, relativeUrl) { console.log(relativeBaseUrl, relativeUrl); };



/**
@param {String} url  The (relative or absolute) url to a full URL path.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.resolveToFullURLPathWithCurrentURL) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.resolveToFullURLPathWithCurrentURL Online Api}
  @description Converts a relative URL (like ../Ziplet) to a full URL path (like (/myApp/ZipLet), based on the current page location.
  @method resolveToFullURLPathWithCurrentURL
@return {String} The full URL path which is the absolute URLwithout the host/protocol/port part, starting with slash.
@memberOf bcdui.util.url
 */
bcdui.util.url.resolveToFullURLPathWithCurrentURL = function(url) { console.log(url); };



/**
@param {string} url  The URL to be inspected.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.isAbsoluteURL) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.isAbsoluteURL Online Api}
  @description Tests if the specified URL is an absolute URL or null. In this case it returns true and false otherwise.
  @method isAbsoluteURL
@return {boolean} True if the URL is either null or an absolute URL.
@memberOf bcdui.util.url
 */
bcdui.util.url.isAbsoluteURL = function(url) { console.log(url); };



/**
@param {string} url  The URL the folder is computed from.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.extractFolderFromURL) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.extractFolderFromURL Online Api}
  @description Gets the folder containing the document identified by the URL. So if the URL is for example "http://xxxxx/root/data.xml" it returns "http://xxxxx/root/". If the URL is already pointing to a folder (ending with "/") it simply returns this URL.
  @method extractFolderFromURL
@return {string} The parent folder of the element denoted by the URL orthe URL itself if it is already a folder (ending with slash "/").
@memberOf bcdui.util.url
 */
bcdui.util.url.extractFolderFromURL = function(url) { console.log(url); };



/**
@param {DomElement} DomElement  The point where the xml:base resolution should start.
  @param {string} url  The URL to be resolved.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.resolveURLWithXMLBase) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.url.html#.resolveURLWithXMLBase Online Api}
  @description Resolves a URL with its correct xml:base. To compute the xml:base for the URL it may be necessary to resolve the xml:base with its ancestor xml:base elements unless one of them is an absolute URL.
  @method resolveURLWithXMLBase
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.url.resolveURLWithXMLBase( DomElement, url );
  //</pre>
  @return {string} The URL resolved with all xml:base elements of the elementitself and its ancestor elements.
@memberOf bcdui.util.url
 */
bcdui.util.url.resolveURLWithXMLBase = function(DomElement, url) { console.log(DomElement, url); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html Online Api}
 * @description Utilities for working with DOM
 * @namespace 
 */
bcdui.util.xml = {};



/**
@param {string} xmlString  The string to be processed.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.quoteXMLString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.quoteXMLString Online Api}
  @description Replaces the XML control characters in the specified string with the appropriate pre-defined entities.
  @method quoteXMLString
@return {string} The parameter with XML control characters replaced.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.quoteXMLString = function(xmlString) { console.log(xmlString); };



/**
@param {HtmlElement} targetElement  The element the content (child elements + attributes) of the source element should be copied to.
  @param {HtmlElement} sourceElement  The source for the elements and attributes copied under the target element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.cloneElementContent) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.cloneElementContent Online Api}
  @description Copies all child elements and attributes from a source XML element to a target XML element.
  @method cloneElementContent
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.xml.cloneElementContent( targetElement, sourceElement );
  //</pre>
  @return {Element} The targetElement.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.cloneElementContent = function(targetElement, sourceElement) { console.log(targetElement, sourceElement); };



/**
@param {DomElement} element
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.nextElementSibling) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.nextElementSibling Online Api}
  @description Computes which XML element is the next sibling of the given element. In contrast to the nextSibling DOM function this function does only return an XML element (not a comment, text node etc.) or null if there is no sibling element. If the function is supported by the browser (e.g. FireFox) the native implementation is used. In other browsers (e.g. Internet Explorer) it is computed here.
  @method nextElementSibling
@return {Element} The element immediately following the specified element ornull if there is no such element.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.nextElementSibling = function(element) { console.log(element); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.previousElementSibling) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.previousElementSibling Online Api}
  @description 
  @method previousElementSibling
@memberOf bcdui.util.xml
 */
bcdui.util.xml.previousElementSibling = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.firstElementChild) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.firstElementChild Online Api}
  @description 
  @method firstElementChild
@memberOf bcdui.util.xml
 */
bcdui.util.xml.firstElementChild = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.lastElementChild) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.lastElementChild Online Api}
  @description 
  @method lastElementChild
@memberOf bcdui.util.xml
 */
bcdui.util.xml.lastElementChild = function() {};



/**
@param {DomElement} element  The XML element to be renamed.
  @param {string} newName  The new name of the XML element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.renameElement) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.renameElement Online Api}
  @description Renames an XML element and optionally filters its child elements (which is useful in conjunction with the wrs-Format).
  @method renameElement
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.xml.renameElement( element, newName );
  //</pre>
  @return {DomElement} The renamed XML element.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.renameElement = function(element, newName) { console.log(element, newName); };



/**
@param {(DomDocument|bcdui.core.DataProvider)} doc  The document the XPath specified in the "path" argument is evaluated on.
  @param {(writableModelXPath|String)} path  The XPath pointing to the nodes to be removed.
  @param {boolean} [enableWrsExtensions]  Set this flag to "true" if the function should treat wrs elements differently (like converting wrs:R to wrs:D instead of removing it). It is "true" by default.
  @param {boolean} [removeEmptyElements]  A flag indicating if elements which do not contain any content anymore should be removed. The default value is "false". This is for example very useful when the path is something like /Items/Item/&commat;value and the respective Item elements need to be cleared as well.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.removeXPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.removeXPath Online Api}
  @description Removes XML elements from a DOM document. These XML elements are identified with an XPath.
  @method removeXPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.xml.removeXPath( doc, path );
  //</pre>
  @return {number} The number of removed nodes.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.removeXPath = function(doc, path, enableWrsExtensions, removeEmptyElements) { console.log(doc, path, enableWrsExtensions, removeEmptyElements); };



/**
@param {(DomDocument|DomElement|bcdui.core.DataProvider)} baseElement  The DOM document or the XML element the path is evaluated on.
  @param {(modelXPath|String)} path  The XPath identifying the element to be retrieved or created.
  @param {boolean} [enableWrsExtensions]  Set this flag to "true" if the function should treat wrs elements differently (like converting wrs:R to wrs:M or creating wrs:I elements). It is "true" by default.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.createElementWithPrototype) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.createElementWithPrototype Online Api}
  @description This function works similar to selectSingleNode in that executes an XPath on a DOMDocument or XML element and returns an XML element. However if the element does not exists it creates XML elements on the XPath so that the XPath returns an element afterwards. For example if the document contains only a root element and the path is <pre> /Root/Filter[&commat;name = 'abc']/Item </pre> it does the following: <ol> <li>create an element "Filter" under the root node,</li> <li>set an attribute "name" with content "abc" on it,</li> <li>create an Item under it,</li> <li>return the Item. So the XPath "/Root/Filter[&commat;name = 'abc']/Item" can be regarded as an XML prototype that is created if the element does not exist.</li> </ol> </p> <p> Please note that this function accepts only a very limited set of XPaths because otherwise the inversion of the XPath would be too complicated to be computed. For example it is not allowed to specify "//" in the XPath and the "or" conjunction cannot be used. </p>
  @method createElementWithPrototype
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.util.xml.createElementWithPrototype( baseElement, path );
  //</pre>
  @return {Element} The XML element to be found under the specified XPath.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.createElementWithPrototype = function(baseElement, path, enableWrsExtensions) { console.log(baseElement, path, enableWrsExtensions); };



/**
@param {(DomElement|DomAttribute)} node
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.getParentNode) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.getParentNode Online Api}
  @description Determines the parent element of a node, no matter if it is an attribute node or an element. It is quite useful especially for attribute nodes, because the parentNode property does not work on them.
  @method getParentNode
@return {Element} The parent element of the specified node.
@memberOf bcdui.util.xml
 */
bcdui.util.xml.getParentNode = function(node) { console.log(node); };



/**
@param {(string|DomDocument|DomElement|DomAttribute)} doc  XML Document as a String or Document or Node. If a document or a node is provided, they are cloned. A node is re-built as a document.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.parseDocument) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.util.xml.html#.parseDocument Online Api}
  @description Parses an XML document and register well-known namespaces and their prefixes to enable xPath lookups thru JS API, i.e. document.selectSingleNode("/wrs:Wrs/wrs:Header").
  @method parseDocument
@return wrapped Document with namespace resolver and .selectSingleNode(), .selectNodes() API
@memberOf bcdui.util.xml
 */
bcdui.util.xml.parseDocument = function(doc) { console.log(doc); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html Online Api}
 * @description A namespace for the BCD-UI widgets.
 * @namespace 
 */
bcdui.widget = {};

/**
 * well known html dom events, which are fired by widgets at given circumstances,these events are fired by widgets using jQuery.trigger() and can be consumed byjQuery.on()
 */
bcdui.widget.events = {};
/**
 * Enumeration with modalbox types
 */
bcdui.widget.modalBoxTypes = {};


/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {modelXPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {boolean} [args.optionsModelIsSuggestionOnly]  If true, values different from the options model can are allowed. Default is that, if an optionsModel is given, only values from that model are allowed.
  @param {writableModelXPath} [args.additionalFilterXPath]  An additional XPath created, kept up-to-date during writing, not only when a final value us choosen, not listened on. Usually used to control a server-side filtered options model.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty.
  @param {string} [args.clearOption]  If != 'false', an additional option to clear the selection is shown in the drop-down box. If 'true' bcd_autoCompletionBox_clearOption is used for the text, otherwise this is the i18n key.
  @param {string} [args.emptyValue]  If != 'false', a text is displayed if nothing is selected / entered. If 'true' bcd_autoCompletionBox_emptyValue is used for the text, otherwise this is the i18n key.
  @param {boolean} [args.mandatory]  An empty value is invalid if this parameters sets to true. Default is false.
  @param {string} [args.wildcard]  For a f:Filter with &commat;op='like', this controls the prefilling with wildcards ('*') when the value is yet empty and the field gets the focus. Can be 'contains', 'startswith' or 'endswith'. The user can overwrite this by adding/removing wildcards when editing the field. The wildcards apply to filtering within the top down list and for server side filters, both plain and for retrieving drop-down values dynamically from the server.
  @param {boolean} [args.bcdAutofit]  If true, drop down resizes depending on available options.
  @param {boolean} [args.isSortOptions]  A flag that can be set to 'true' if the options shown in popup should be sorted alphabetically.
  @param {integer} [args.maxlength]  Maximum number of characters for the input field.
  @param {string} [args.onEnterKey]  Handler function NAME triggered on ENTER key.
  @param {string} [args.onEscKey]  Handler function NAME triggered on ESC key.
  @param {string} [args.onTabKey]  Handler function NAME triggered on TAB key.
  @param {string} [args.onBlur]  Handler function NAME triggered on blur event.
  @param {string} [args.onFocus]  Handler function NAME triggered on focus event.
  @param {boolean} [args.setCursorPositionAtEnd]  If true, the cursor is automatically positioned at the end of the input box.
  @param {boolean} [args.setFocus]  If true, let this input field get focus after creation.
  @param {string} [args.tabIndex]  Tab index of html element.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @param {boolean} [args.isPassword]  If true, input element type will be 'password'.
  @param {string} [args.label]  If provided, renders label element to this input
  @param {boolean} [args.hideWildcardChar]  If true, no asterisk characters are shown
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createInputField) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createInputField Online Api}
  @description Creates a field where the user can enter a value or select it from a list of pre-defined values. These values are copied to a target model under a specified target XPath. When there is a list of allowed values the inputField can also apply a caption-value translation so that the displayed values can differ from the data that is actually placed in XML.This function creates an input field in the given target HTML element. This input field can be a text box or a combo box, dependent on the parameters.
  @method createInputField
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createInputField( { targetModelXPath: targetModelXPath, targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createInputField = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The targetModelXPath for the dimensionChooser acts slightly different than for other widgets. The path points a node which will hold the value for the selected level. The widget builds up filter expressions automatically, so your targetXPath doesn't need any f:Expression statements, e.g. /guiStatus:Status/guiStatus:Dimension[&commat;id='dimensionChooser']/&commat;value.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} args.dimension  Unique name to select a dimension from the dimension model (located at '/bcdui/conf/dimensions.xml'.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.url]  The URL the model is loaded from. This URL can be extended with a compressed request document if a requestDocument parameter is provided. If omitted the WrsServlet is taken.
  @param {string} [args.multiSelect]  Make a multi selected dimension chooser. Can be 'true'|'false'|'check', 'false' is default.
  @param {boolean} [args.allowMixedSelect]  Allow heterogene selection in multi select chooser.
  @param {string} [args.checkBoxCaption]  Caption of checkbox to turn on and of the multiselect.
  @param {string} [args.clearOption]  If != 'false', an additional option to clear the level selection is shown in the drop-down box. If 'true' bcd_autoCompletionBox_clearOption is used for the text, otherwise this is the i18n key.
  @param {string} [args.clearOptionLevel]  See clearOption. This value is for the level selector input box only. If not specified, clearOption is used.
  @param {string} [args.emptyValue]  If != 'false', a text is displayed if no level is selected. If 'true' bcd_autoCompletionBox_emptyValue is used for the text, otherwise this is the i18n key.
  @param {string} [args.emptyValueLevel]  See emptyValue. This value is for the level selector input box only. If not specified, emptyValue is used.
  @param {boolean} [args.mandatory]  An empty value is invalid if this parameters sets to true. Default is false.
  @param {boolean} [args.useCaptions]  If true, the chooser will receive captions and codes. By convention the bref of the captions column is 'bRef'_caption. By default no captions are created.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {string} [args.configurationModelId]  ModelId of chooser configuration xml file. This model can hold a per-level configuration which allows additional filtering.
  @param {string} [args.limitLevels]  Space separated list of levelIds. The available levels from the dimensions model get limited to this subset.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @param {string} [args.label]  If provided, renders label element to this input
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createDimensionChooser) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createDimensionChooser Online Api}
  @description This function creates an dimension chooser in the given target HTML element.
  @method createDimensionChooser
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createDimensionChooser( { targetModelXPath: targetModelXPath, targetHtml: targetHtml, dimension: dimension } );
  //</pre>
  @example
  <-- <pre> -->
  <Caption>Configuration Model</Caption>The Level element can have one child element called FilterCondition. It is a textnode which specifies an additional xpath statementwhich is added as an AND condition in the request document filter element. You should use brackets around it.There are several Level element attributes (see bcdui.core.AutoModel for details) which allows loading of additional bRefs orfiltering: bRef, filterBRefs, mandatoryfilterBRefsSubset, additionalFilterXPath.You can also modify the handling of the Level input fields (see bcdui.widget.InputField): optionsModelIsSuggestionOnly, wildcard.A server sided options model filter can be set via serverSideOptionsModelFilter attribute.If there is a need to hide a level for direct selection (but the level is needed as dependency for a different level selection)you can use the visible attriute.
  <-- </pre> -->
  @example
  //<pre>
  &lt;Configuration xmlns="http://www.businesscode.de/schema/bcdui/renderer-1.0.0"&gt;  &lt;Level id="customerGroup" bRefs="ecom"&gt;    &lt;FilterCondition&gt;( ../wrs:C[2]='1')&lt;/FilterCondition&gt;  &lt;/Level&gt;&lt;/Configuration&gt;When using 'customerGroup' level (which is bound to one bRef (wrs:C[1])) another bRef 'ecom' is used and checked against value '1' via the given filter condition.  
  //</pre>
  @example
  //<pre>
  &lt;Configuration xmlns="http://www.businesscode.de/schema/bcdui/renderer-1.0.0"&gt;  &lt;Level id="station" bRefs="facility_type s_isselectable"&gt;    &lt;FilterCondition&gt;( ../wrs:C[4]='1' and (not($guiStatus///f:Filter/f:Or[@id='facility_type']/f:Expression[@bRef='facility_type']/@value) or ../wrs:C[3] = $guiStatus//f:Filter/f:Or[@id='facility_type']/f:Expression[@bRef='facility_type']/@value) )&lt;/FilterCondition&gt;  &lt;/Level&gt;&lt;/Configuration&gt;When using 'station' level (which is bound to two bRef (wrs:C[1] and wrs:C[2])) two more bRefs 'facility_type' and 's_isselectable' are used.s_isselectable (which will be wrs:C[4] is checked against the value '1' and facility_type is checked against a guiStatus filter (if available)).So you can easily filter available level data with other possibly set client or server filters.
  //</pre>
  @example
  //<pre>
  &lt;Configuration xmlns="http://www.businesscode.de/schema/bcdui/renderer-1.0.0"&gt;  &lt;Level id="group" wildcard="startswith" serverSideOptionsModelFilter="true" hideWildcardChar="true"/&gt;&lt;/Configuration&gt;  Group level information is generated while typing.
  //</pre>
  @example
  //<pre>
  &lt;Configuration xmlns="http://www.businesscode.de/schema/bcdui/renderer-1.0.0"&gt;  &lt;Level id="group" visible="false"/&gt;&lt;/Configuration&gt;Group level does not appear in Level drop down but can be used as a dependency level for a different level selection.
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createDimensionChooser = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this widget will place entered selected items into. The underlying XML  format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @param {string} [args.label]  If provided, renders label element to this widget
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createSingleSelect) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createSingleSelect Online Api}
  @description Creates a single selection radio button group where a value can be selected and stored to the target model.
  @method createSingleSelect
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createSingleSelect( { targetModelXPath: targetModelXPath, targetHtml: targetHtml, optionsModelXPath: optionsModelXPath } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createSingleSelect = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target. Keep in mind when specifying a targetModelXPath for the multiSelect, you should use a f:Or in your expression. For example: /guiStatus:Status/f:Filter/f:Or/f:Expression[&commat;bRef='country' and &commat;op='=']/&commat;value.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {string} [args.delimiter]  If defined, will switch to delimiter-based storing, i.e. multiple values will be written into one DOM node and separated by given delimiter.
  @param {integer} [args.visibleSize]  Number of visible elements in list.
  @param {boolean} [args.isCheckBox]  Use checkbox html element instead of multiselect.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @param {boolean} [args.doSortOptions]  Set to true if widget should sort options.
  @param {string} [args.label]  If provided, renders label element to this input, unless args.isCheckBox = true
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createMultiSelect) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createMultiSelect Online Api}
  @description Creates a multi selection box where multiple values can be selected and stored to the target model.
  @method createMultiSelect
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createMultiSelect( { targetModelXPath: targetModelXPath, targetHtml: targetHtml, optionsModelXPath: optionsModelXPath } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createMultiSelect = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  Unless you don't use the useSimpleXPath option, this targetModelXPath acts slightly different than for other widgets. You only define a root node like '/guiStatus:Status/f:Filter/f:And[&commat;id='period']' here. The period chooser places its f:Expression elements below this given rootnode automatically. The number of expressions and how they are added depends on periodChooser settings (e.g. a range or writing mo/yr instead of yyyy-mm-dd etc.)
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.caption]  Default 'Date', it will be used as i18n key to translate the caption if isFreeRangeSelectable set to true, then caption may contain two terms for 'From' and 'To' captions. Divider: ';' Example: caption = 'i18.md.From;i18.md.To'
  @param {string} [args.firstSelectableDay]  The first day that can be selected. A week or month can only be selected if all days are selectable.
  @param {boolean} [args.lastSelectableDay]  The last day that can be selected. A week or month can only be selected if all days are selectable.
  @param {boolean} [args.isFreeRangeSelectable]  Allows date free range selection.
  @param {boolean} [args.isSecondSelectable]  Allows second selection.
  @param {boolean} [args.isMinuteSelectable]  Allows minute selection.
  @param {boolean} [args.isHourSelectable]  Allows hour selection.
  @param {boolean} [args.isDaySelectable]  Allows day selstion.
  @param {boolean} [args.isWeekSelectable]  Allows week selection.
  @param {boolean} [args.isMonthSelectable]  Allows month selection.
  @param {boolean} [args.isQuarterSelectable]  Allows quarter selection
  @param {boolean} [args.isYearSelectable]  Allows year selection.
  @param {boolean} [args.mandatory]  An empty value is invalid if this parameters sets to true. Default is false.
  @param {boolean} [args.outputPeriodType]  Produces selected dates as one of known date periods. For example if this contains mo and the user selects a data range, which fits a month, mo with be written. This is usefull if you allow free range but you also have a month aggregation for performance optimization. On the other hand, if this is not set and the user selects a month in the widget, then the month is written in terms of dy.
  @param {boolean} [args.showPrevNextButtons]  If this is set to 'true' the buttons Previous Period and Next Period are showed. The default value is 'false'.
  @param {boolean} [args.suppressCaptions]  Set this to true if the buttons should not have any caption text. Default is false.
  @param {boolean} [args.textInput]  Add the free range feature.
  @param {boolean} [args.validate]  Turn on-off the validation of the keyboard entered date values.
  @param {modelXPath} [args.optionsModelXPath]  Allows to use a single period chooser widget for different logical types of dates (see args.postfix), which then can be selected from a drop-down. The node set found at this xPath lists the postfixes.
  @param {string} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {string} [args.postfix]  An optional postfix which is added to the filter bRefs (dy/mo.., see above). Use this if you deal with different types of dates. If optionsModel is given, this value should be one of the available ones.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {string} [args.useSimpleXPath]  Set this to true if you want a minimal periodchooser setup (only day selectable via popcalendar) which only writes an ISO date to an XPath which you provide (not a complex one in normal mode).
  @param {string} [args.autoPopup]  Set this to true if the popup calendar should appear after creation.
  @param {string} [args.suppressButtons]  Set this to true if from and to buttons should be hidden. Default is false.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @param {boolean} [args.showClearButton]  Set this to true if you need one clear button which removes the currently set date.
  @param {string} [args.label]  If provided, renders label element to this periodchooser.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createPeriodChooser) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createPeriodChooser Online Api}
  @description Creates a period chooser. The period chooser supports a number of options and formats, see parameters. You can control what kind of periods a user may select and in which format it is written. Note that the bRef written are <b>always</b> <code>yr, qr, mo, cwyr, cw or dy</code> with an optional postfix of there are different types of dates.<br/> The period chooser outputs to args.targetModelXPath, which may point to any model but needs to end with <code>f:And[&commat;id='myPeriod']</code>, where &commat;id is the period chooser's id.
  @method createPeriodChooser
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createPeriodChooser( { targetModelXPath: targetModelXPath, targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createPeriodChooser = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this widget will place entered selected items into. The underlying XML  format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.caption]  Default '', it will be used as i18n key to translate the caption.
  @param {boolean} [args.mandatory]  An empty value is invalid if this parameters sets to true. Default is false.
  @param {modelXPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {string} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {boolean} [args.validate]  Turn on-off the validation of the formula.
  @param {boolean} [args.validateVariableNamesCheckbox]  Show or hide checkbox for validate variables option.
  @param {string} [args.skipValidationCaption]  Caption to be shown for skipping validation. Default is 'Skip check of values'.
  @param {boolean} [args.skipServerSidedFunctions]  Set to true to disable usage of server sided functions like CntDist. Default is false.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {boolean} [args.enableNavPath]  Set to true if widget should not be added to navpath handling.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFormulaEditor) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFormulaEditor Online Api}
  @description Displays a field where the user can enter a formula
  @method createFormulaEditor
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createFormulaEditor( { targetModelXPath: targetModelXPath, targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createFormulaEditor = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} [args.title]  Modal box title. You can also use titleTranslate.
  @param {string} [args.titleTranslate]  It will be used as i18n key to translate the title.
  @param {string} [args.message]  Modal box message. You can also use messageTranslate.
  @param {string} [args.messageTranslate]  It will be used as i18n key to translate the message.
  @param {integer} [args.modalBoxType]  One of three types modalBoxTypes.ok, modalBoxTypes.warning, modalBoxTypes.error. By default = modalBoxTypes.ok
  @param {integer} [args.width]  Width of modal box. 300 by default
  @param {integer} [args.height]  Height of modal box. auto by default
  @param {string} [args.onclick]  Optional js function which is called after closing the modal box
  @param {string} [args.position]  jQuery position parameter bag. Default is center top
  @param {string} [args.htmlElementId]  Id of a html segment which is taken as messagebox instead. ModalBoxType is ignored in this case.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.showModalBox) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.showModalBox Online Api}
  @description Open and show modalbox
  @method showModalBox
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.showModalBox( { } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.showModalBox = function(args) { console.log(args); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.hideModalBox) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.hideModalBox Online Api}
  @description Hide opened modalbox
  @method hideModalBox
@memberOf bcdui.widget
 */
bcdui.widget.hideModalBox = function() {};



/**
@param {Object} args  The parameter map contains the following properties.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.menuHandlerClassName]  Javascript menu handler class name, could extend bcdui.widget.menu.Menu.
  @param {boolean} [args.menuRootElementId]  Root menu HTML element (UL) id
  @param {string} [args.modelId]  xml model id, can be used for menues defined in folder '/WEB-INF/bcdui/menu/'.
  @param {string} [args.modelUrl]  Optional: URL where model get data from, allows reading a random xml file from the server.
  @param {string} [args.parameters]  Own action handler.
  @param {(string|chainDef)} [args.rendererUrl]  URL to XSLT stylesheet that renders the model or chain definition; default is "/bcdui/js/widget/menu/menu.xslt"
  @param {string} [args.menuId]  Optional menuId to use one specific menu out of the available ones. If not available, the default one is used.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createMenu) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createMenu Online Api}
  @description Creates menu with default renderer an default menu js handler.
  @method createMenu
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createMenu( { targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createMenu = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.modelId]  id of model holding custom model definition. If not provided, a standard one with just logout is created.
  @param {string} [args.userName]  string to use as the username, by default it takes bcdui.config.userName
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createCredentialsMenu) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createCredentialsMenu Online Api}
  @description Creates credential menu
  @method createCredentialsMenu
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createCredentialsMenu( { targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createCredentialsMenu = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} args.defElementId  Html element id where tabs are defined.
  @param {string} [args.args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.handlerJsClassName]  Own JS class name to handler click action on tab.
  @param {string} [args.rendererUrl]  URL to own renderer.
  @param {boolean} [args.isPersistent]  Set this to true to make the tab selection persistent.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTabMenu) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTabMenu Online Api}
  @description Creates tab menu widget.
  @method createTabMenu
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createTabMenu( { targetHtml: targetHtml, defElementId: defElementId } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createTabMenu = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {targetHtmlRef} args.targetHtml  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {string} [args.caption]  Caption shown in the blindUpDown Header.
  @param {string} [args.defaultState]  'closed' or empty String for opened, default is closed.
  @param {number} [args.duration]  The duration of the blind effect, valid values are from 0 to 1.0 as decimal.
  @param {writableModelXPath} [args.targetModelXPath]  The xPath pointing to the root-node this input widget will place entered selected items into. with attribute status=open/closed
  @param {boolean} [args.noEffect]  True for a simple show/hide without blind effect (blind can influence charts gradients on IE
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createBlindUpDownArea) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createBlindUpDownArea Online Api}
  @description Creates a BlindUpDown Area.
  @method createBlindUpDownArea
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createBlindUpDownArea( { targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createBlindUpDownArea = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {bcdui.core.DataProvider} args.inputModel  A model with context menu definition according to namespace http://www.businesscode.de/schema/bcdui/contextMenu-1.0.0
  @param {string} [args.targetRendererId]  The renderer the tooltip is attached to. The HTML listeners are placed on the targetHtml of this renderer.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {boolean} [args.refreshMenuModel]  This flag can be set to 'true' if the menu model needs to be executed always. Needs to be true, if the menu depends on the position in a table, i.e. technically on bcdColIdent and bcdRowIdent.
  @param {string} [args.url]  This parameter can be set when you only want to apply one single XSLT style sheet. It contains the URL pointing to it. If this parameter is set no nested 'chain' tag must be provided; provided XSLT must produce HTML.
  @param {string} [args.identsWithin]  Id of an element. If given bcdColIdent and bcdRowIdent are set to the innermost values given between the event source and the element given here. bcdRow/ColIdent do not need to be set at the same element.
  @param {boolean} [args.tableMode]  This flag can be set to 'true' if the 'bcdRowIdent' and 'bcdColIdent' parameters should be extracted from the HTML and added as parameters on the tooltipRenderer. They are derived from 'bcdRowIdent' and 'bcdColIdent' attributes of tr rows and header columns (td or th).
  @param {targetHtmlRef} [args.targetHtml]  The HTML listeners are placed on this Element instead of the targetHtml of the given targetRendererId.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createContextMenu) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createContextMenu Online Api}
  @description Create an instance of dynamic context menu. Consider setting args.refreshMenuModel to true. If 'tableMode' is set to 'true' the renderer is expected to render an HTML table with the appropriate 'bcdRowIdent/bcdColIdent' attributes of tr rows header columns.
  @method createContextMenu
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createContextMenu( { inputModel: inputModel } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createContextMenu = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} [args.targetRendererId]  The renderer the tooltip is attached to. The HTML listeners are placed on the targetHtml of this renderer. If 'tableMode' is set to 'true' the renderer is expected to render an HTML table with the appropriate 'bcdRowIdent/bcdColIdent' attributes of tr rows header columns.
  @param {string} [args.id]  ID of the Executable object which renders this widget this must be UNIQUE and MUST NOT have same names as any global JavaScript variable. If not given, an auto-id is generated.
  @param {integer} [args.delay]  The delay in Miliseconds that the tooltip should wait before it appears.
  @param {string} [args.filter]  An optional filter on the tag name where the tooltip should appear. In 'tableMode' it is recommended to set it on 'td' or 'th|td'.
  @param {string} [args.identsWithin]  Id of an element. If given bcdColIdent and bcdRowIdent are set to the innermost values given between the event source and the element given here. bcdRow/ColIdent do not need to be set at the same element.
  @param {string} [args.stylesheetUrl]  This parameter can be set when you only want to apply one single XSLT style sheet. It contains the URL pointing to it. If this parameter is set no nested 'chain' tag must be provided
  @param {boolean} [args.tableMode]  This flag can be set to 'true' if the 'bcdRowIdent' and 'bcdColIdent' parameters should be extracted from the HTML and added as parameters on the tooltipRenderer. They are derived from 'bcdRowIdent' and 'bcdColIdent' attributes of tr rows and header columns (td or th).
  @param {targetHtmlRef} [args.targetHtml]  The HTML listeners are placed on this Element instead of the targetHtml of the given targetRendererId.
  @param {string} [args.tooltipTargetHtmlId]  Existing HTML Element Id which is used for the tooltip. By default this is 'bcdTooltipDiv'.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTooltip) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTooltip Online Api}
  @description Generates a tooltip for another renderer.
  @method createTooltip
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createTooltip( { } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createTooltip = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {HtmlElement} args.tableElement  The HTML Table Element which you want to use for injection
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this widget will place entered selected items into
  @param {bcdui.core.DataProvider} args.inputModel  WRS datamodel representing the table columns
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel where the widget will write its content to.
  @param {boolean} [args.useCustomHeaderRenderer]  Set to true when your code adds bcdFilterButton classes on its own (e.g. grid)
  @param {function} [args.callback]  Function which will be executed after a change of the filters have been performed
  @param {function} [args.getCaptionForColumnValue]  Function (colIdx, colValue) which returns the rendered caption for the cell. By default standard wrs &commat;caption, wrs:references and unit/scale handling is supported already. Deprecated (prefer valueCaptionProvider parameter).
  @param {function} [args.getFilteredValues]  Function (colIdx) which needs to return a wrs:C array which holds the valid values for the current column. Use this to e.g. only show prefiltered values . Deprecated (prefer valueCaptionProvider parameter).
  @param {function} [args.valueCaptionProvider]  Function (inputModel, colIdx) which needs to return a Promise which resolves with an array of objects {value, caption, isFiltered}
  @param {Object} [args.columnFiltersCustomFilter]  CustomColumnFilter functions passed to column filter. columnFiltersCustomFilter is an array holding an object per bRef/column and an operations array which defines id, caption, valueCaptionProvider, filterFunction and gridFilterRowFunction
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTableHeadFilter) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createTableHeadFilter Online Api}
  @description injectFilter in table
  @method createTableHeadFilter
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createTableHeadFilter( { tableElement: tableElement, targetModelXPath: targetModelXPath, inputModel: inputModel } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createTableHeadFilter = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {(string|bcdui.core.Renderer)} args.renderer  Id of the registered renderer to work on or the render itself
  @param {boolean} [args.isSync]  Decide whether the action is to be called synchronous or not
  @param {boolean} [args.alwaysShowHeader]  If filtering leads to no rows to be displayed, this flag will show the table header to allow removal of filters
  @param {function} [args.getCaptionForColumnValue]  Function (colIdx, colValue) which returns the rendered caption for the cell. By default standard wrs &commat;caption, wrs:references and unit/scale handling is supported already
  @param {function} [args.getFilteredValues]  Function (colIdx) which needs to return a wrs:C array which holds the valid values for the current column. Use this to e.g. only show prefiltered values
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFilterTableHeader) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFilterTableHeader Online Api}
  @description Create filter table header
  @method createFilterTableHeader
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createFilterTableHeader( { renderer: renderer } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createFilterTableHeader = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} args.rendererId  Id of the renderer to work on
  @param {boolean} [args.storeSize]  Decide whether the action is to be called synchronous or not
  @param {boolean} [args.enableColumnFilters]  Set to true if you wnat to enable column filters, too
  @param {function} [args.getCaptionForColumnValue]  if you enabled column filters, you can set its getCaptionForColumnValue here
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFixedTableHeader) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createFixedTableHeader Online Api}
  @description Create fixed table header by adding a fixed copy of the original Its size is derived from the "original" header, still in place for the table
  @method createFixedTableHeader
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createFixedTableHeader( { rendererId: rendererId } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createFixedTableHeader = function(args) { console.log(args); };



/**
@param {string} msgKey
  @param {string} defaultValue
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.i18nAlert) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.i18nAlert Online Api}
  @description shows a js alert box with the given message
  @method i18nAlert
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.i18nAlert( msgKey, defaultValue );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.i18nAlert = function(msgKey, defaultValue) { console.log(msgKey, defaultValue); };



/**
@param {string} msgKey
  @param {string} defaultValue
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.i18nConfirm) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.i18nConfirm Online Api}
  @description shows a js confirm box with the given message
  @method i18nConfirm
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.i18nConfirm( msgKey, defaultValue );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.i18nConfirm = function(msgKey, defaultValue) { console.log(msgKey, defaultValue); };



/**
@param {(element|string)} elOrId  An existing HTML element or its id representing a widget targetHtml
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getWidgetCaption) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getWidgetCaption Online Api}
  @description Get widgetCaption information from the given target
  @method getWidgetCaption
@return string of found widgetCaption or empty string
@memberOf bcdui.widget
 */
bcdui.widget.getWidgetCaption = function(elOrId) { console.log(elOrId); };



/**
@param {Object} [args]  The parameter map contains the following properties.
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.title]  A title string which is used during filename generation for exports
  @param {string} [args.values]  A space separated string which lists the ordered targetIds of the widgets which should be queried
  @param {string} [args.separator]  A string used for delimiter between single widget navpath values, default is ' ' (space)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.createNavPath Online Api}
  @description Writes navpath widget information to the given target and updates this information changes
  @method createNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.createNavPath( { } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.createNavPath = function(args) { console.log(args); };



/**
@param {function} callback  A callback function which gets the final navpath string and an object holding the single ids/captions
  @param {string} [values]  A space separated string which lists the ordered targetIds of the widgets which should be queried (or empty for all)
  @param {string} [separator]  A string used for delimiter between single widget navpath values
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getLiveNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getLiveNavPath Online Api}
  @description Get current live navpath widget information via callback for the given widget targets. This function regets the current caption information from the widgets themselves and does not use the navPath model which represents the captions when entering the page
  @method getLiveNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.getLiveNavPath( callback );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.getLiveNavPath = function(callback, values, separator) { console.log(callback, values, separator); };



/**
@param {string} [values]  A space separated string which lists the ordered targetIds of the widgets which should be queried (or empty for all)
  @param {string} [separator]  A string used for delimiter between single widget navpath values
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getCurrentNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.getCurrentNavPath Online Api}
  @description Get current navpath widget information for the given widget targets.
  @method getCurrentNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.getCurrentNavPath( );
  //</pre>
  @return string containing the current navPath for your selected values
@memberOf bcdui.widget
 */
bcdui.widget.getCurrentNavPath = function(values, separator) { console.log(values, separator); };



/**
@param {object} args  arguments
  @param {function} args.open  function to execute when dialog is opened, it gets args object with properties: targetHtml
  @param {function} [args.close]  function to execute after dialog is closed
  @param {function} [args.beforeClose]  function to execute before dialog is closed - it gets args object with properties: targetHtml; if this function returns false, the dialog is not closed.
  @param {string} [args.title]  dialog title
  @param {number} [args.width]  dialog width; > 1 means absolute size <= 1 means percentage of the current view-port size, i.e. .75 = 75% of view-port size
  @param {number} [args.width]  dialog height; > 1 means absolute size <= 1 means percentage of the current view-port size, i.e. .75 = 75% of view-port size
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.openDialog) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.openDialog Online Api}
  @description opens a modal dialog ready for renderer and delegates to callbacks from arguments; you can trigger 'dialog-close' event within body to close the dialog programmatically, any argument to this event will be provided to the resolving promise as well as to the 'close' callback. In addition to those parameters described in this documentation you can provide any other valid parameter according to jQueryUI Dialog Widget API. This dialog returns a Promise resolving with value provided to 'dialog-close' event, allowing you to easily build on cascading dialogs utilizing promise chain.
  @method openDialog
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.openDialog( { open: open } );
  //</pre>
  @example
  //<pre>
  bcdui.widget.openDialog({  open : (args) => {    new bcdui.core.Renderer({      targetHtml : args.targetHtml, chain : "confirm.buy.dott"    });  },  title : bcdui.i18n.TAG + "confirm.buy"});
  //</pre>
  @return {Promise} resolving with value provided from 'dialog-close' event, when dialog is closed.
@memberOf bcdui.widget
 */
bcdui.widget.openDialog = function(args) { console.log(args); };



/**
@param {Object} args
  @param {HtmlElement} args.targetHtml  targetHtml containing/being table
  @param {string} [args.width]  the width of the table  (e.g. 10, 20px or 30em)
  @param {string} [args.height]  the height of the table (e.g. 10, 20px or 30em)
  @param {boolean} [args.header]  make header sticky
  @param {boolean} [args.footer]  make footer sticky
  @param {integer} [args.nFirstCols]  make the first n columns sticky
  @param {integer} [args.nFirstRows]  make the first n rows sticky
  @param {integer} [args.nLastCols]  make the last n columns sticky
  @param {integer} [args.nLastRows]  make the last n rows sticky
  @param {boolean} [args.bcdDimension]  make all dimension cells (cube) sticky (higher prio than other options)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.stickyTable) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.html#.stickyTable Online Api}
  @description make parts of the given table sticky
  @method stickyTable
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.stickyTable( { targetHtml: targetHtml } );
  //</pre>
  @memberOf bcdui.widget
 */
bcdui.widget.stickyTable = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html Online Api}
 * @description A namespace for the BCD-UI detailView widget.
 * @namespace 
 */
bcdui.widget.detailView = {};



/**
@param args
  @param {(String|Element)} args.targetHtmlElement  to attach listener to
  @param {(String|bcdui.core.Renderer)} args.targetRenderer  optional the target renderer, targetHtmlElement has precedence
  @param {Boolean} args.consumeEvent  optional, default is: FALSE, consumes the event or allow propagation
  @param {String} args.childElementSelector  filter (jQuery) compatible for filtering on nested children, default is "tbody tr"
  @param {String} args.event  event to attach on , default is 'dblclick'
  @param {function} args.filterFunction  a filter function to check on target element if to pass, default is a filter function expecting targetElement to have 'bcdrowident' attribute this function shall return TRUE of FALSE, an argument is provided to the function containing following properties:
  @param args.filterFunction.eventContext.event  the event
  @param args.eventContext.targetElement  the target element where event has occurred
  @param {function} args.renderViewContainerFunction  a function which renders the view container, the default implementation is
  @param args.renderViewContainerFunction.renderDialogContainer(),  please refer to docs for more infos, arguments passed to this function:
  @param {Object} args.renderViewContainerFunction.factoryArgs  the initial factory args which were provided attachDetailView() function, may be null
  @param {Object} args.renderViewContainerFunction.eventContext.event  the event object which triggered this function, may be null
  @param {Element} args.renderViewContainerFunction.eventContext.targetElement  the target element which event occurred, may be null
  @param {Element} args.renderViewContainerFunction.referenceElement  is eventContext.targetElement
  @param {Element} args.renderViewContainerFunction.targetHtmlElement  element to attach view container on
  @param {function} args.renderViewContainerFunctionParamsFactory  factory for additional params which are mixed-in to the argument of renderViewContainerFunction() available through extra.* property; this function gets same arguments as 'renderViewContainerFunction'
  @param {function} args.containerViewRenderedCb  a function which is called by renderViewContainerFunction() once container is contructed
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html#.attachDetailView) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html#.attachDetailView Online Api}
  @description 
  @method attachDetailView
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.detailView.attachDetailView( { targetHtmlElement: targetHtmlElement, targetRenderer: targetRenderer, consumeEvent: consumeEvent, childElementSelector: childElementSelector, event: event, filterFunction: filterFunction, filterFunction: filterFunction, eventContext: eventContext, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunction: renderViewContainerFunction, renderViewContainerFunctionParamsFactory: renderViewContainerFunctionParamsFactory, containerViewRenderedCb: containerViewRenderedCb } );
  //</pre>
  @return args, additionally contains .unbind() function which stops this handler working; when called that function, you have to attachDetailView() again
@memberOf bcdui.widget.detailView
 */
bcdui.widget.detailView.attachDetailView = function(args) { console.log(args); };



/**
@param args
  @param args.targetHtmlElement  the target element this container is attached to
  @param {Element} args.referenceElement  the the element this detail container is constructed for
  @param args.containerViewRenderedCb.  the function which is called once target container is constructed and argument with following properties is provided:
  @param {Element} args.containerViewRenderedCb.targetHtmlElement  the element to render content into, this may be reused so ensure executing .empty() before adding content
  @param {Element} args.containerViewRenderedCb.referenceElement  see above --- specific parameters, which are available in this function, but is not API contract, i.e. in case you provide your custom renderViewContainer function --- extra.dialog{Object}                - extra parameters to jQuery Dialog UI plugin, which are mixed-in at construction time; you overwrite the defaults! extra.dialog.disableCloseControl    - special param to remove the [close] control from standard ui-dialog bar, so close() can be issued via API/Event only
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html#.renderDialogContainer) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.detailView.html#.renderDialogContainer Online Api}
  @description renders a details view container for given element, this implementation renders jQuery.dialog, you can override any attributes via extra.dialog object parameter
  @method renderDialogContainer
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.detailView.renderDialogContainer( { targetHtmlElement: targetHtmlElement, referenceElement: referenceElement, containerViewRenderedCb: containerViewRenderedCb, containerViewRenderedCb: containerViewRenderedCb, containerViewRenderedCb: containerViewRenderedCb } );
  //</pre>
  @return jQuery object ( container element )
@memberOf bcdui.widget.detailView
 */
bcdui.widget.detailView.renderDialogContainer = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.dimensionChooser.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.dimensionChooser.html Online Api}
 * @description A namespace for the BCD-UI dimensionChooser widget. For creation &commat;see {@link bcdui.widgetNg.createDimensionChooser}
 * @namespace 
 */
bcdui.widget.dimensionChooser = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.dimensionChooser.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.dimensionChooser.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.dimensionChooser.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widget.dimensionChooser
 */
bcdui.widget.dimensionChooser.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.effects.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.effects.html Online Api}
 * @description A namespace for the BCD-UI widget effects.
 * @namespace 
 */
bcdui.widget.effects = {};

/**
 * default duration of effects
 */
bcdui.widget.effects.defaultDuration = 0.2;


/**
@param {Object} args  The parameter map contains the following properties.
  @param {Object} args.idOrElement  HTML element or ID that contains element(s) to blind Up/Down
  @param {string} [args.blindBodyClassName]  CSS className of HTML element to blind Up/Down
  @param {integer} [args.duration]  duration in seconds used for blind animation
  @param {boolean} [args.noEffect]  True for a simple show/hide without blind effect (blind can influence charts gradients on IE
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.effects.html#.blindUpDown) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.effects.html#.blindUpDown Online Api}
  @description blinds the content Up/Down
  @method blindUpDown
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.effects.blindUpDown( { idOrElement: idOrElement } );
  //</pre>
  @memberOf bcdui.widget.effects
 */
bcdui.widget.effects.blindUpDown = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.html Online Api}
 * @description A namespace for the BCD-UI formulaEditor widget.
 * @namespace 
 */
bcdui.widget.formulaEditor = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.Parser.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.Parser.html Online Api}
 * @description A namespace for the BCD-UI formulaParser widget.
 * @namespace 
 */
bcdui.widget.formulaEditor.Parser = {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.Parser.html#.shunting_yard) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.formulaEditor.Parser.html#.shunting_yard Online Api}
  @description Parse a maths formula in input like "2+3*A" into a calc:Calc expression If optionsModel and optionsModelXPath are given, only variable names (like A) are allowed which exist in the options model
  @method shunting_yard
@memberOf bcdui.widget.formulaEditor.Parser
 */
bcdui.widget.formulaEditor.Parser.shunting_yard = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html Online Api}
 * @description A namespace for the BCD-UI inputField widget. For creation &commat;see {@link bcdui.widget.createInputField}
 * @namespace 
 */
bcdui.widget.inputField = {};

/**
 * observable events
 */
bcdui.widget.inputField.events = {};


/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.inputField.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widget.inputField
 */
bcdui.widget.inputField.getNavPath = function(id, callback) { console.log(id, callback); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html#.buildRequestTransformator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.inputField.html#.buildRequestTransformator Online Api}
  @description Transformator for building a MultiLevelSuggestion request Connect the inputfield with a (auto)model using this as request builder (input doesn't matter, use guistatus) And refresh it via additionalFilterXPath, same as for plain suggest
  @method buildRequestTransformator
@memberOf bcdui.widget.inputField
 */
bcdui.widget.inputField.buildRequestTransformator = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.html Online Api}
 * @namespace 
 */
bcdui.widget.menu = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.multiSelect.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.multiSelect.html Online Api}
 * @description A namespace for the BCD-UI multiSelect widget. For creation &commat;see {@link bcdui.widget.createMultiSelect}
 * @namespace 
 */
bcdui.widget.multiSelect = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.multiSelect.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.multiSelect.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.multiSelect.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widget.multiSelect
 */
bcdui.widget.multiSelect.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.html Online Api}
 * @description A namespace for the BCD-UI notifications widget.
 * @namespace 
 */
bcdui.widget.notifications = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html Online Api}
 * @description A namespace for the BCD-UI periodChooser widget. For creation &commat;see {@link bcdui.widget.createPeriodChooser}
 * @namespace 
 */
bcdui.widget.periodChooser = {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#._getValidPostfix) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#._getValidPostfix Online Api}
  @description 
  @method _getValidPostfix
@memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser._getValidPostfix = function() {};



/**
@param {String} id  id of the period chooser widget
  @param {String} period_type  new period_type
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.switchPostfix) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.switchPostfix Online Api}
  @description Switch periodchooser to a different period_type by replacing the bRef attributes and the bcdPostfix attribute
  @method switchPostfix
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.periodChooser.switchPostfix( id, period_type );
  //</pre>
  @memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.switchPostfix = function(id, period_type) { console.log(id, period_type); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.init) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.init Online Api}
  @description 
  @method init
@memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.init = function() {};



/**
@param parameters
  @param {integer} parameters.rangeSize  Size of the range.
  @param {String} parameters.targetModelXPath  The xPath pointing to the period filter within the transformed document.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.periodToRangeTransformator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.periodToRangeTransformator Online Api}
  @description A transformer, taking the input, leaving everything 1:1 except a period filter, which is transformed to a range with the given date or range end as the end and keeping the input period type
  @method periodToRangeTransformator
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.periodChooser.periodToRangeTransformator( { rangeSize: rangeSize, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.periodToRangeTransformator = function(parameters) { console.log(parameters); };



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.periodChooser.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.getNavPath = function(id, callback) { console.log(id, callback); };



/**
@param {DomDocument} targetModelDoc  containing the filter nodes which needs to get worked on
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.rebuildDateFromDateToFromFilter) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.rebuildDateFromDateToFromFilter Online Api}
  @description adds/overwrites dateFrom/dateTo attributes on periodChoosers filter nodes (outer And) based on the currently available filters
  @method rebuildDateFromDateToFromFilter
@memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.rebuildDateFromDateToFromFilter = function(targetModelDoc) { console.log(targetModelDoc); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.popUpCalendar) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.periodChooser.html#.popUpCalendar Online Api}
  @description 
  @method popUpCalendar
@memberOf bcdui.widget.periodChooser
 */
bcdui.widget.periodChooser.popUpCalendar = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.singleSelect.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.singleSelect.html Online Api}
 * @description A namespace for the BCD-UI singleSelect widget. For creation &commat;see {@link bcdui.widget.createSingleSelect}
 * @namespace 
 */
bcdui.widget.singleSelect = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.singleSelect.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.singleSelect.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widget.singleSelect.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widget.singleSelect
 */
bcdui.widget.singleSelect.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.visualizeXml.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.visualizeXml.html Online Api}
 * @description Utility package for raw data visualization used for debugging purposes.
 * @namespace 
 */
bcdui.widget.visualizeXml = {};



/**
@param {object} args  The argument map containing the following elements:
  @param {targetHtmlRef} args.targetHtml  Id of the html element where to show the output.
  @param {string} [args.title]  Title of the content box; if not provided, the title is set to the ID of the visualized model.
  @param {string} [args.idRef]  Id of the model to be visualized
  @param {bcdui.core.DataProvider} [args.inputModel]  Instead of an id, the model can be provided directly
  @param {boolean} [args.isAutoRefresh]  Automatically redraw when model changes
  @param {string} [args.stylesheetUrl]  renderer stylesheet
  @param {function} [args.onReady]  onReady function for renderer
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.visualizeXml.html#.visualizeModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.visualizeXml.html#.visualizeModel Online Api}
  @description Visualiazes data of a model / data provider
  @method visualizeModel
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widget.visualizeXml.visualizeModel( { targetHtml: targetHtml } );
  //</pre>
  @example
  //<pre>
  // Load, transform and visualize a modellet sm = new bcdui.core.SimpleModel("input.xml");let mw = new bcdui.core.ModelWrapper({inputModel: sm, chain: "transformer.xslt"});bcdui.widget.visualizeXml.visualizeModel({targetHtml: "testOutput", inputModel: mw, title: "Transformed Output"});
  //</pre>
  @memberOf bcdui.widget.visualizeXml
 */
bcdui.widget.visualizeXml.visualizeModel = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html Online Api}
 * @description New generation of Widgets
 * @namespace 
 */
bcdui.widgetNg = {};



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {function} [args.onchange]  the HTML onchange event
  @param {function} [args.onclick]  the HTML onclick event
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.values]  A pipe separated value of two string which are used for a checked/unchecked state. By default this is 1 and 0.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createCheckbox) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createCheckbox Online Api}
  @description Basic checkbox which implements a 1/0 switch. The label (if used) is placed right to the checkbox.
  @method createCheckbox
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createCheckbox( { targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createCheckbox = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {i18nToken} [args.caption]
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {url} [args.href]  HTML href
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {function} [args.onClickAction]  Function to execute on click. Behaves like addEventListener, i.e. it expects a reference to a function. "onClickAction:&#160;bcdui.core.lifecycle.applyAction" or "onClickAction:&#160;function(){&#160;alert("Hello");&#160;}". The context of the function is set to the element this widget it attached to. To provide a context and parameters to the called function use bind: "onClickAction:&#160;myFunc.bind(&#160;ctx,&#160;param1&#160;, param2&#160;)". In case of declarative environments, like HTML5 Custom Element &lt;bcd-buttongNg&gt;, it is a string with executable javascript code "onClickAction=&#160;'bcdui.core.lifecycle.applyAction();'".
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {xPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {boolean} [args.stayPressed]  button stays pressed and is disabled until page reload.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {i18nToken} [args.text]
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createButton) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createButton Online Api}
  @description A BCD-UI button (not HTML native) conforming to the theme. If an optionsModelXPath is given, it will be rendered as a dropDown button.
  @method createButton
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createButton( { } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createButton = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {function} [args.asyncValidationFunction]  Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending' CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason, the widget switches to invalid state.
  @param {string} [args.autocomplete]  HTML autocomplete attribute. Can be on or off.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doTrimInput]  If enabled, the input is trimms leading/trailing spaces before writing to data model
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isSync]  Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)
  @param {boolean} [args.isTextSelectedOnFocus]  if set, the text will be selected once the field gets a focus, so that further user input will replace the content. In case 'setCursorPositionAtEnd' is also set to true - this option has precedence.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {number} [args.max]  Sets the maximum value for an integer or numeric type input field (HTML5 only).
  @param {integer} [args.maxlength]  if defined, limits the input to the given length.
  @param {number} [args.min]  Sets the minimum value for an integer or numeric type input field (HTML5 only).
  @param {function} [args.onchange]  the HTML onchange event
  @param {function} [args.onclick]  the HTML onclick event
  @param {string} [args.pattern]  regular expression pattern to validate the input
  @param {i18nToken} [args.placeholder]  A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {boolean} [args.setCursorPositionAtEnd]  if set the cursor position will always be at the end of the input once the input field gets a focus
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {enum} [args.type]  a type of this input field. Following types are supported for validation: text: a simple text input email: a simple text input with email validation, uses email input where available password: a password input int: an integer value (uses to html5 type=number with step=1 where available) numeric: a decimal value (corresponds to html5 type=number with step=any and uses where available)
  @param {string} [args.validationFunction]  Name of a widget validator function which will be attached additionally to implicit validators. the API of given function is: validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] }, the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character to classify an i18n-key of the message, rather than a message itself. the args parameter is the htmlElementId of the widget to validate. Please use: bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value. There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[] This validator MUST ignore NULL or empty value.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createInput) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createInput Online Api}
  @description A simple text field input allowing user to enter arbitrary text. Specific input type can be preset via 'type' attribute. The input can be generally validated using 'pattern' paramter (html5 compliant) containing the JS regular expression, in such a case a built-in validation for WRS binding is overridden by provided validator and effectively disabled.
  @method createInput
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createInput( { targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createInput = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {enum} [args.type]  Select a calendar year and a month or a date. Uses HTML5 native if available. For other cases two or three single selects next to each other. Writes XML format 2013-12[-01]. (gYearMonth or date)
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createDateInput) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createDateInput Online Api}
  @description Date picker for temporal types supports native html5 widget and fallsback to custom implementation in case browser does not support it.
  @method createDateInput
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createDateInput( { targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createDateInput = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {function} [args.asyncValidationFunction]  Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending' CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason, the widget switches to invalid state.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {(boolean|i18nToken)} [args.clearOption]  if enabled, there will be an option to clear the selection. This attribute may be true|false or a string, in latter case the option is considered enabled and a string follows the i18nToken type definition.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doAutoSelectSolelyOption]  If enabled, and there is only one option available, the widget will switch to that value.
  @param {boolean} [args.doRetainInputSchema]  This option is 'false' per default, what means that the internal options model generates following schema: /Values/Value[&commat;caption]+ per matched item. The Value element itself holds the ID with optional &commat;caption attribute holding either ID or mapped caption in case optionsModelRelativeValueXPath is provided. In some cases you might want to work with internal options model and elements of the input document. Then you can enable this flag, which effictively disables any semantics, such as 'caption' or 'id' - as the internal options document will contain only matched elements from the input document, pay attention if you select an attribute in your xpath.
  @param {boolean} [args.doSortOptions]  Can be set to 'true' if the options should be sorted alphabetically. This is disabled per default to avoid CPU wasting.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.ignoreCaption]  Do not use &commat;caption, use id for caption as well. The caption mode is disabled.
  @param {boolean} [args.isSync]  Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions. Wins over &commat;caption and &commat;ignoreCaption param.
  @param {string} [args.pattern]  regular expression pattern to validate the input
  @param {i18nToken} [args.placeholder]  A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {enum} [args.skin]  Currently supporting combo style only
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.validationFunction]  Name of a widget validator function which will be attached additionally to implicit validators. the API of given function is: validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] }, the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character to classify an i18n-key of the message, rather than a message itself. the args parameter is the htmlElementId of the widget to validate. Please use: bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value. There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[] This validator MUST ignore NULL or empty value.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSingleSelect) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSingleSelect Online Api}
  @description Renders a browser does natively for select or radio.
  @method createSingleSelect
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createSingleSelect( { optionsModelXPath: optionsModelXPath, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createSingleSelect = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {function} [args.applyListItemSelectionFunction]  this function is called when applying value from a dropdown selection (custom rendering mode only), it gets following parameters: (instance, htmlElementId, bcdCaption, bcdId) the bcdCaption is the string provided by options model and the bcdId is the value, in case provided by options model, too. The default implementation is executing { instance._syncWrite(htmlElementId, bcdCaption); }
  @param {function} [args.asyncValidationFunction]  Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending' CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason, the widget switches to invalid state.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {(boolean|i18nToken)} [args.clearOption]  if enabled, there will be an option to clear the selection. This attribute may be true|false or a string, in latter case the option is considered enabled and a string follows the i18nToken type definition.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableNativeSupport]  This parameter disables native HTML5 support for this widget. Please read more on side-effects in widget documentation.
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doRetainInputSchema]  This option is 'false' per default, what means that the internal options model generates following schema: /Values/Value[&commat;caption]+ per matched item. The Value element itself holds the ID with optional &commat;caption attribute holding either ID or mapped caption in case optionsModelRelativeValueXPath is provided. In some cases you might want to work with internal options model and elements of the input document. Then you can enable this flag, which effictively disables any semantics, such as 'caption' or 'id' - as the internal options document will contain only matched elements from the input document, pay attention if you select an attribute in your xpath.
  @param {boolean} [args.doSortOptions]  Can be set to 'true' if the options should be sorted alphabetically. This is disabled per default to avoid CPU wasting.
  @param {boolean} [args.doTrimInput]  If enabled, the input is trimms leading/trailing spaces before writing to data model
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {string} [args.filterFunction]  function name of filtering function receiving keystrokes; it gets { value, onComplete } and must call onComplete() callback once its done
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isSync]  Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)
  @param {boolean} [args.isTextSelectedOnFocus]  if set, the text will be selected once the field gets a focus, so that further user input will replace the content. In case 'setCursorPositionAtEnd' is also set to true - this option has precedence.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {integer} [args.maxlength]  if defined, limits the input to the given length.
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values
  @param {string} [args.optionsRendererId]  * only applies to non-native implementation of this widget - to use this option you have to flag disableNativeSupport * The renderer provided here *must* exist prior binding to widget, that is it has to be known to ObjectRegistry at this time. At is recommended to construct your renderer with suppressInitialRendering=true, so that it does not run at the construction time and also provide targetHTMLElementId pointing to invisible container, since the renderer would reset containers CSS class having visual effects at construction time. Default options rendering stylesheet is located at /bcdui/widgetNg/suggestInput/optionsRenderer.xslt but you can provide your own here; the transformation has to output HTML with root element DIV containing block elements each representing an inidivual value. The children elements provides the value via bcdValue attribute. The rendered list is displayed in a dialog so user can pick-up an item. After that, the value is written to model which is found at bcdValue attribute. This way you can render complex HTML content. Recommended format is: div[div[&commat;bcdValue]*] You can also respect current widget value i.e. to implement prefiltering, the values are provided as parameters to the stylesheet. Please refer to original stylesheet documentation for more information and parameters which are provided during transformation. the targetHTMLElementId of the renderer is automatically bound to internal options list box, the input document to this renderer is the options-model of the widget.
  @param {string} [args.pattern]  regular expression pattern to validate the input
  @param {i18nToken} [args.placeholder]  A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {boolean} [args.setCursorPositionAtEnd]  if set the cursor position will always be at the end of the input once the input field gets a focus
  @param {integer} [args.suggestItemCount]  Number of items to suggest during typing, this applies to non-native implementation only.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.validationFunction]  Name of a widget validator function which will be attached additionally to implicit validators. the API of given function is: validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] }, the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character to classify an i18n-key of the message, rather than a message itself. the args parameter is the htmlElementId of the widget to validate. Please use: bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value. There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[] This validator MUST ignore NULL or empty value.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {enum} [args.wildcard]  The wildcards apply to filtering within the drop down list and for server side filters. This option applies only if bound to a f:Expression element and is ignored otherwise. For a f:Filter with &commat;op='like', this controls the prefilling with wildcards ('*') when the value is yet empty and the field gets the focus. Can be 'contains', 'startswith' or 'endswith'. The user can overwrite this by adding/removing wildcards when editing the field.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSuggestInput) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSuggestInput Online Api}
  @description Allowing to either depict certain value from a list or accepting new value not in list. This input type always offers an input prompt which either acts as pre-filter for the list or also allows to enter new items. This widget can handle big number of options at good performance as well as supports complex options layout in non-native mode. Furthermore it provides you with ability to access remote data. [No ID/Caption mapping is available here.]
  @method createSuggestInput
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createSuggestInput( { optionsModelXPath: optionsModelXPath, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createSuggestInput = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {integer} args.cols  HTML Parameter on the textarea to set number of columns
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {function} [args.asyncValidationFunction]  Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending' CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason, the widget switches to invalid state.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doTrimInput]  If enabled, the input is trimms leading/trailing spaces before writing to data model
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isSync]  Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)
  @param {boolean} [args.isTextSelectedOnFocus]  if set, the text will be selected once the field gets a focus, so that further user input will replace the content. In case 'setCursorPositionAtEnd' is also set to true - this option has precedence.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {integer} [args.maxlength]  if defined, limits the input to the given length.
  @param {string} [args.pattern]  regular expression pattern to validate the input
  @param {i18nToken} [args.placeholder]  A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {integer} [args.rows]  HTML Parameter on the textarea to set number of rows
  @param {boolean} [args.setCursorPositionAtEnd]  if set the cursor position will always be at the end of the input once the input field gets a focus
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.validationFunction]  Name of a widget validator function which will be attached additionally to implicit validators. the API of given function is: validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] }, the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character to classify an i18n-key of the message, rather than a message itself. the args parameter is the htmlElementId of the widget to validate. Please use: bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value. There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[] This validator MUST ignore NULL or empty value.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createTextArea) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createTextArea Online Api}
  @description Free Text input, standard HTML textarea
  @method createTextArea
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createTextArea( { cols: cols, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createTextArea = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {integer} args.cols  HTML Parameter on the textarea to set number of columns
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {function} [args.asyncValidationFunction]  Like 'validationFunction' but this one must return a Promise resolving with validation result. While validating, the widget sets 'bcdValidationPending' CSS class on the owning html element. The value is written to the model after a positive validation result. If a Promise is rejected for any reason, the widget switches to invalid state.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doTrimInput]  If enabled, the input is trimms leading/trailing spaces before writing to data model
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isSync]  Uses synchronously validation when set to true. This also disables the use of asyncValidationFunction. Only necessary for setups where you can't handle waiting for the async write of data (e.g. grid widgets)
  @param {boolean} [args.isTextSelectedOnFocus]  if set, the text will be selected once the field gets a focus, so that further user input will replace the content. In case 'setCursorPositionAtEnd' is also set to true - this option has precedence.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {integer} [args.maxlength]  if defined, limits the input to the given length.
  @param {integer} [args.maxVals]  Only the first maxVals distinct values are used.
  @param {string} [args.outSep]  Letter treated as separators in the targetModel and also expected when reading in values from there, defaults to comma.
  @param {string} [args.pasteSeps]  Letters treated as separators between values when pasting. Defaults: comma, semicolon, space, pipe, tab, newline.
  @param {string} [args.pattern]  regular expression pattern to validate the input
  @param {i18nToken} [args.placeholder]  A default text displayed if no content was entered, this is i18n key or true for default. May be empty to display nothing.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {integer} [args.rows]  HTML Parameter on the textarea to set number of rows
  @param {boolean} [args.setCursorPositionAtEnd]  if set the cursor position will always be at the end of the input once the input field gets a focus
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {boolean} [args.toUpper]  If true, all values are translated to uppercase.
  @param {string} [args.validationFunction]  Name of a widget validator function which will be attached additionally to implicit validators. the API of given function is: validatorFunction(htmlElementId) : returns either NULL or object containing validationMessage (String or array of Strings) property, i.e. { validationMessage : String } or { validationMessage[] : String[] }, the validationMessage carries the message to be displayed to the user. The String may start with bcdui.i18n.TAG character to classify an i18n-key of the message, rather than a message itself. the args parameter is the htmlElementId of the widget to validate. Please use: bcdui.widgetNg.validation.validators.widget.getValue(htmlElementId) to properly retrieve widgets value. There is only one validator function allowed. In order to use or re-use or combine existing validations please do so in your validationFunction (that is delegate to other validators) and simply aggregate validation results into array of validationMessage[] This validator MUST ignore NULL or empty value.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createPasteList) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createPasteList Online Api}
  @description Text area to paste list of elements for an in-clause
  @method createPasteList
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createPasteList( { cols: cols, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createPasteList = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {boolean} [args.allowUnknownTargetValue]  If true, target items are not removed when they are not part of the source's options model.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doSortOptions]  Can be set to 'false' if the options should not be sorted alphabetically.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {function} [args.onBeforeChange]  Handler function triggered before change, if false is returned, the change is rejected receives property map: {element = the widget element, dir = one of bcdui.widgetNg.sideBySideChooser.CHANGE_DIRECTION.*, scope = object with .items to move, which can also be modified (i.e. remove items not eligible to move)}
  @param {function} [args.onChange]  Handler function triggered after change
  @param {xPath} [args.optionsModelRelativeFilterPredicate]  xPath expression relative to 'optionsModelXPath' which can be used to filter options model items
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values
  @param {string} [args.sourceCaption]  Caption(header) for source block items. Can be an i18n key (with leading i18n token).
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {string} [args.targetCaption]  Caption(header) for target block items. Can be an i18n key (with leading i18n token).
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {string} [args.wrsInlineValueDelim]  Delimiter used for WRS read and write. Default is a slash.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSideBySideChooser) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSideBySideChooser Online Api}
  @description Offers a SideBySiderChooser where you can select items on a source side and move them to a target side
  @method createSideBySideChooser
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createSideBySideChooser( { optionsModelXPath: optionsModelXPath, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createSideBySideChooser = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {modelXPath} args.optionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {boolean} [args.allowUnknownTargetValue]  If true, target items are not removed when they are not part of the source's options model.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doSortOptions]  Can be set to 'false' if the options should not be sorted alphabetically.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {function} [args.onBeforeChange]  Handler function triggered before change, if false is returned, the change is rejected receives property map: {element = the widget element, dir = one of bcdui.widgetNg.chipsChooser.CHANGE_DIRECTION.*, scope = object with .items to move, which can also be modified (i.e. remove items not eligible to move)}
  @param {function} [args.onChange]  Handler function triggered after change
  @param {function} [args.onItemMoved]  Handler function triggered after an item was moved. Receives property map: {from = source, to = destination, dir = one of bcdui.widgetNg.connectable.CHANGE_DIRECTION.*}
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {string} [args.wrsInlineValueDelim]  Delimiter used for WRS read and write. Default is a slash.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createChipsChooser) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createChipsChooser Online Api}
  @description Offers a ChipsChooser where you can select items on a source side and move them to a target side
  @method createChipsChooser
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createChipsChooser( { optionsModelXPath: optionsModelXPath, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createChipsChooser = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} args.scope  Defines the scope of the box. Source.
  @param {boolean} [args.allowUnknownTargetValue]  If true, target items are not removed when they are not part of the source's options model.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {string} [args.className]  Optional additional classname which is added to the container.
  @param {boolean} [args.dblClick]  If true, double clicking an item moves it. Default is true.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.doSortOptions]  Can be set to 'true' if the options should be sorted using the 'sortOptionsFunction' function. This is disabled per default to avoid CPU wasting.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {function} [args.generateItemHelperHtml]  Function to generate the html for helper container item which appears when you drag items. Basically the function for jQuery's sortable helper function. By default the first 5 items are listed.
  @param {function} [args.generateItemHtml]  Function to generate the html for one container item. Gets object with properties: value, caption, position; see implementation documentation to read more about the structure to return by this function.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isDoubleClickTarget]  If true (and box is target) then double click moves items from source to this target, otherwise first found target. Default is false.
  @param {function} [args.onBeforeChange]  Handler function triggered before change of this box only, if false is returned, the change is rejected receives property map: {element = the widget element, dir = one of bcdui.widgetNg.connectable.CHANGE_DIRECTION.*, scope = object with .items to move, which can also be modified (i.e. remove items not eligible to move)}
  @param {function} [args.onChange]  Handler function triggered after change. It's triggered on source AND destination of the change (e.g. source/target, target/source and target/target)
  @param {function} [args.onItemMoved]  Handler function triggered after an item was moved. Receives property map: {from = source, to = destination, dir = one of bcdui.widgetNg.connectable.CHANGE_DIRECTION.*}
  @param {xPath} [args.optionsModelRelativeFilterPredicate]  xPath expression relative to 'optionsModelXPath' which can be used to filter options model items
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values
  @param {writableModelXPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]. If you specify an optionsmodelxpath, the box automatically acts as source.
  @param {boolean} [args.showLasso]  If true, you get a selection lasso. Default is true.
  @param {function} [args.sortOptionsFunction]  a compareFunction(a,b) passed to Array.prototype.sort(); with a, b are objects with { caption, value } A function used to sort items in the connectable. The defaulting implementation uses alphabetic sorting on caption.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {writableModelXPath} [args.targetModelXPath]  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted. If you specify a targetmodelxpath, the box automatically acts as target
  @param {boolean} [args.unselectAfterMove]  If true, the items get unselected after being moved. Default is false.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @param {string} [args.wrsInlineValueDelim]  Delimiter used for WRS read and write. Default is a slash.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createConnectable) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createConnectable Online Api}
  @description Offers a simple container with multi select, drag'n drop functionalities
  @method createConnectable
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createConnectable( { scope: scope } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createConnectable = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {xPath} args.bRefOptionsModelXPath  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display.
  @param {writableModelXPath} args.targetModelXPath  Target xPath for this filter to work with. This widget creates a filter compatible ( http://www.businesscode.de/schema/bcdui/filter-1.0.0 ) structure beyond given target element, and will use f:And, f:Or and f:Expression elements to represent the filter. You can choose either f:And, f:Or or any other element as a target. While choosing f:And/f:Or, the user will not be able do modify that root conjunction whereas there is no such restriction when using another (or custom) element as a target element.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {xPath} [args.bRefOptionsModelRelativeValueXPath]  xPath expression relative to 'bRefOptionsModelXpath' providing values for options to display, if this is defined, values referenced by bRefOptionsModelXpath are treated as captions.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createUniversalFilter) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createUniversalFilter Online Api}
  @description 
  @method createUniversalFilter
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createUniversalFilter( { bRefOptionsModelXPath: bRefOptionsModelXPath, targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createUniversalFilter = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {writableModelXPath} args.targetModelXPath  The xPath pointing to the root-node this input widget will place entered selected items into. The underlying XML format of data written is implemented by individual widget. If pointing into a Wrs, it switches to Wrs mode, i.e. the wrs:R will be marked as modified, target node will not be deleted.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.disableResetControl]  set this parameter to 'false' to enable built-in reset-control, which empties content once clicked.
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {boolean} [args.isRange]  If enabled, the slider will operate in range-selection mode, providing min/max handles to define a range.
  @param {boolean} [args.keepEmptyValueExpression]  A flag that can be set to 'true' if the target node should not be removed as soon as the value is empty. TODO: better spec
  @param {function} [args.labelRenderingFunction]  Your custom rendering function to render the label, which gets args with following properties: targetHtml, values[], captions[]; this function is executed on every update to the widget but also while sliding. This option is only effective unless native 'tooltips' option is used.
  @param {string} [args.labelRenderingFunctionTargetHtml]  jQuery selector to access element to use as targetHtml for labelRenderingFunction, if you choose to use your custom one. This option is only effective unless native 'tooltips' option is used.
  @param {number} [args.max]  Defines the maximum value, must not be set if optionsModelXpath is provided.
  @param {number} [args.min]  Defines the minimum value, must not be set if optionsModelXpath is provided.
  @param {xPath} [args.optionsModelRelativeValueXPath]  xPath expression relative to 'optionsModelXPath' providing values for options to display, if this is defined, values referenced by optionsModelXPath are treated as captions.
  @param {modelXPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]. If not provided, the widget is not linked to discrete values, in this case the min/max options has to be provided.
  @param {xPath} [args.relativeTargetXPathMax]  When operating in range-mode, this defines the relative xpath to targetModelXPath, to write the 'max' value. This option not defined in non-range mode.
  @param {xPath} [args.relativeTargetXPathMin]  When operating in range-mode, this defines the relative xpath to targetModelXPath, to write the 'min' value. This option not defined in non-range mode.
  @param {boolean} [args.required]  An empty string or not set value is not allowed if required is true. Disabled fields are not evaluated.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSlider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createSlider Online Api}
  @description A slider widget providing UI with a moving handle to select a value or to select a range. The implementation is based on noUiSlider, so is the API. Please refer to original documentation to explore all options. You can use full options from JS-API, however, they are not available from declarative context. Currently, the range mode is restricted to 2 handles only and you cannot provide start option, since it is read from the model.
  @method createSlider
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createSlider( { targetModelXPath: targetModelXPath } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createSlider = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {string} args.instance  A given instance for the current comments.
  @param {string} args.scope  A given scope for the current comments.
  @param {string} [args.addBRefs]  Space separated list of additional bRefs you want to load.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {string} [args.caption]  A caption string which appears in the top add row.
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {stringList} [args.filterBRefs]  The space separated list of binding Refs that will be used in filter clause of request document.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {i18nToken} [args.label]  If provided, enables widget to render a label element
  @param {function} [args.onBeforeSave]  Function which is called before each save operation. Parameter holds current wrs dataprovider. Function needs to return true to save or false for skipping save process and resetting data.
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createComment) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createComment Online Api}
  @description Offers a simple container with comment functionality
  @method createComment
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createComment( { instance: instance, scope: scope } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createComment = function(args) { console.log(args); };



/**
@param {Object} args  The parameter map contains the following properties.
  @param {boolean} [args.autofocus]  requests the widget to set the focus once it is rendered or enabled for the first time. Only one widget can have a focus, so in case the focus is requested by many widgets it is undefined which one will win.
  @param {i18nToken} [args.caption]
  @param {boolean} [args.disabled]  All input widgets can be set to be disabled. If disabled, a widget cannot receive a focus, also a style cannot be changed in many browsers. There is no read-only. Also consult read-only vs disabled: http://www.w3.org/TR/html4/interact/forms.html#h-17.12
  @param {boolean} [args.displayBalloon]  hints and validation messages are displayed in a fly-over if user moves the mouse over the widget. Additionally, they are also displayed in a balloon in bottom-left corner of a browser window in a balloon, which is static and appears as long as the widget has focus.
  @param {boolean} [args.enableNavPath]  Set to true if widget should be added to navpath handling.
  @param {i18nToken} [args.hint]  A general feature is the hint indicator on the widget so user can hover it with a mouse to reveal information about it. image aus theme intern handled by tooltip.
  @param {string} [args.id]  Id of the widget, if not provided this id will be auto-generated. Must be unique. The id must not be used from jQuery UI API, the id should be used within declarative scope only, i.e. X-API / JSP. If provided, this id will overwrite targetHtml element's id.
  @param {xPath} [args.optionsModelXPath]  xPath pointing to an absolute xpath (starts with $model/..) providing a node-set of available options to display; especially this one supports cross references between models, i.e. $options / * / Value[&commat;id = $guiStatus / * / MasterValue]
  @param {integer} [args.tabindex]  the HTML compliant tabIndex
  @param {targetHtmlRef} [args.targetHtml]  An existing HTML element this widget should be attached to, provide a dom element, a jQuery element or selector, or an element id.
  @param {i18nToken} [args.text]
  @param {string} [args.widgetCaption]  A caption which is used as prefix for navPath generation for this widget.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createLabel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.html#.createLabel Online Api}
  @description A BCD-UI label. If an optionsModelXPath is given, it will be rendered as an unordered list.
  @method createLabel
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.widgetNg.createLabel( { } );
  //</pre>
  @memberOf bcdui.widgetNg
 */
bcdui.widgetNg.createLabel = function(args) { console.log(args); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.button.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.button.html Online Api}
 * @description A namespace for the BCD-UI button widget. For creation &commat;see {@link bcdui.widgetNg.createButton}
 * @namespace 
 */
bcdui.widgetNg.button = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.checkbox.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.checkbox.html Online Api}
 * @description A namespace for the BCD-UI checkbox widget. For creation &commat;see {@link bcdui.widgetNg.createCheckbox}
 * @namespace 
 */
bcdui.widgetNg.checkbox = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.checkbox.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.checkbox.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.checkbox.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.checkbox
 */
bcdui.widgetNg.checkbox.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html Online Api}
 * @description A namespace for the BCD-UI chipsChooser widget. For creation &commat;see {@link bcdui.widgetNg.createChipsChooser}
 * @namespace 
 */
bcdui.widgetNg.chipsChooser = {};

/**
 * onBeforeChange dir attribute value, can be used to identify the direction of the item move
 */
bcdui.widgetNg.chipsChooser.CHANGE_DIRECTION = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html#.init) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html#.init Online Api}
  @description 
  @method init
@memberOf bcdui.widgetNg.chipsChooser
 */
bcdui.widgetNg.chipsChooser.init = function() {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.chipsChooser.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.chipsChooser.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.chipsChooser
 */
bcdui.widgetNg.chipsChooser.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.html Online Api}
 * @description Common functionality for new generation of Widgets
 * @namespace 
 */
bcdui.widgetNg.commons = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html Online Api}
 * @description A namespace for the BCD-UI balloon widget.
 * @namespace 
 */
bcdui.widgetNg.commons.balloon = {};

/**
 * constants
 */
bcdui.widgetNg.commons.balloon.CONST = {};
/**
 * PrototypeJS element maps key for internal configuration object
 */
bcdui.widgetNg.commons.balloon.MAPKEY_CONFIG = {};
/**
 * the singleton data provider which is data provider to the tooltip renderer,it fetches the ID of element from 'bcdRowIdent' data provider, locates thatelement, fetches the tooltip message and validation messages from the 'bcdHint'attribute (or 'hint' option) and '_validationMessages_' map value respectively, parses them into a DOMdocument which is returned to the renderer to be rendered.
 */
bcdui.widgetNg.commons.balloon.DATA_PROVIDER = {};
/**
 * singleton tooltip renderer
 */
bcdui.widgetNg.commons.balloon.TOOLTIP_RENDERER = {};
/**
 * singleton balloon renderer
 */
bcdui.widgetNg.commons.balloon.BALLOON_RENDERER = {};


/**
@param {(element|string)} htmlElementId  The target to attach ballon to.
  @param {object} [args]  Object literal containing following properties
  @param {boolean} [args.noTooltip]  If balloon is attach a tooltip (mouseover) is attached as well,you can disable it here.
  @param {boolean} [args.noBalloon]  If set to TRUE the static balloon is not displayed
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.attach) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.attach Online Api}
  @description attaches the balloon to given, focusable element, this function does nothing in case a balloon is already attached on this element.
  @method attach
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.commons.balloon.attach( { } );
  //</pre>
  @return true if attached, false if not; if both noTooltip and noBalloon parameters are set, this function returns FALSE and has no effect.
@memberOf bcdui.widgetNg.commons.balloon
 */
bcdui.widgetNg.commons.balloon.attach = function(htmlElementId, args) { console.log(htmlElementId, args); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.displayHintBalloon) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.displayHintBalloon Online Api}
  @description permanently displays the hint-balloon for given htmlElementId using the default tooltip technique but reposition it (next to the element) as tray-message, you have to hide the the balloon executing general hideHintBalloon()  configuration params:  - balloonRendererId  configuration object is expected to be in the element map: bcdui.widgetNg.commons.balloon.MAPKEY_CONFIG
  @method displayHintBalloon
@memberOf bcdui.widgetNg.commons.balloon
 */
bcdui.widgetNg.commons.balloon.displayHintBalloon = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.hideHintBalloon) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.hideHintBalloon Online Api}
  @description hides previously visible balloon
  @method hideHintBalloon
@memberOf bcdui.widgetNg.commons.balloon
 */
bcdui.widgetNg.commons.balloon.hideHintBalloon = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.messagesToXML) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.commons.balloon.html#.messagesToXML Online Api}
  @description construct XML string out of messages and tooltip data  DTD: BalloonData&lt;Tooltip?,Messages?> Tooltip&lt;CDATA> ValidationMessages&lt;Item+> Item&lt;CDATA>
  @method messagesToXML
@return NULL (if no messages found / tooltip) or DOM string
@memberOf bcdui.widgetNg.commons.balloon
 */
bcdui.widgetNg.commons.balloon.messagesToXML = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.html Online Api}
 * @description A namespace for the BCD-UI connectable widget. For creation &commat;see {@link bcdui.widgetNg.createConnectable}
 * @namespace 
 */
bcdui.widgetNg.connectable = {};

/**
 * onBeforeChange dir attribute value, can be used to identify the direction of the item move
 */
bcdui.widgetNg.connectable.CHANGE_DIRECTION = {};


/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.input.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.input.html Online Api}
 * @description A namespace for the BCD-UI input widget. For creation &commat;see {@link bcdui.widgetNg.createInput}
 * @namespace 
 */
bcdui.widgetNg.input = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.input.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.input.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.input.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.input
 */
bcdui.widgetNg.input.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html Online Api}
 * @description A namespace for the BCD-UI sideBySideChooser widget. For creation &commat;see {@link bcdui.widgetNg.createSideBySideChooser}
 * @namespace 
 */
bcdui.widgetNg.sideBySideChooser = {};

/**
 * onBeforeChange dir attribute value, can be used to identify the direction of the item move
 */
bcdui.widgetNg.sideBySideChooser.CHANGE_DIRECTION = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html#.init) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html#.init Online Api}
  @description 
  @method init
@memberOf bcdui.widgetNg.sideBySideChooser
 */
bcdui.widgetNg.sideBySideChooser.init = function() {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.sideBySideChooser.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.sideBySideChooser.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.sideBySideChooser
 */
bcdui.widgetNg.sideBySideChooser.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.singleSelect.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.singleSelect.html Online Api}
 * @description A namespace for the BCD-UI singleSelect widget. For creation &commat;see {@link bcdui.widgetNg.createSingleSelect}
 * @namespace 
 */
bcdui.widgetNg.singleSelect = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.singleSelect.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.singleSelect.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.singleSelect.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.singleSelect
 */
bcdui.widgetNg.singleSelect.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.slider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.slider.html Online Api}
 * @description A namespace for the BCD-UI slider widget. For creation
 * @namespace 
 */
bcdui.widgetNg.slider = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.slider.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.slider.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.slider.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.slider
 */
bcdui.widgetNg.slider.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.suggestInput.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.suggestInput.html Online Api}
 * @description A namespace for the BCUDI GUI suggestInput widget. For creation &commat;see {@link bcdui.widgetNg.createSuggestInput}
 * @namespace 
 */
bcdui.widgetNg.suggestInput = {};



/**
@param {string} id  targetHtml of widget
  @param {function} callback  to be called with generated caption
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.suggestInput.html#.getNavPath) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.suggestInput.html#.getNavPath Online Api}
  @description 
  @method getNavPath
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.suggestInput.getNavPath( id, callback );
  //</pre>
  @return {string} NavPath information via callback for widget
@memberOf bcdui.widgetNg.suggestInput
 */
bcdui.widgetNg.suggestInput.getNavPath = function(id, callback) { console.log(id, callback); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.universalFilter.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.universalFilter.html Online Api}
 * @description A namespace for the BCD-UI widget. For creation &commat;see {@link bcdui.widgetNg.createUniversalFilter}
 * @namespace 
 */
bcdui.widgetNg.universalFilter = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.utils.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.utils.html Online Api}
 * @description A namespace for the BCDUI GUI widgetNg utils.
 * @namespace 
 */
bcdui.widgetNg.utils = {};



/**
@param {targetHtmlRef} targetHtml  element to undergo widget validation, selector, element or jQuery object.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.utils.html#.validate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.utils.html#.validate Online Api}
  @description Asynchronously triggers re-validation of visible widgets within container and focuses on first invalid input inside the targetHtml.
  @method validate
@example
  //<pre>
  const form = jQuery('.form');bcdui.widgetNg.utils.validate(form).then((validationResult) => {  if (validationResult.isValid) {    form.submit();  }});
  //</pre>
  @return {Promise} resolving to { isValid : true|false }
@memberOf bcdui.widgetNg.utils
 */
bcdui.widgetNg.utils.validate = function(targetHtml) { console.log(targetHtml); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html Online Api}
 * @description validators package, common API all validators share:  validator functions are simple functions taking argument object as parameter and returning either NULL (for successful validation) or a validationError object in case of a failed validation.  the validationErrorObject properties:  validationMessage{i18nToken}  validation function MUST not run asynchronously! it is expected to block and return once validation is done. the argument object is arbitrary and defined by particular validation function.
 * @namespace 
 */
bcdui.widgetNg.validation = {};



/**
@param {(string|element)} htmlElementId  validatable element
  @param {Array.<string>} customValidationMessages  An array of custom validation messages to display for this element (optional)
  @param {boolean} [skipNativeValidation]  If you want to skip implicit, native html5 validation on the element.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.validateField) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.validateField Online Api}
  @description this function carries out validation via native html5 constraint validation api (if available and not suppressed) and optionally marks the field as invalid in case customValidationMessages are provided (i.e. already has been validation with custom validators), additionally it displays the validationMessages to the user. Also resets the field to valid if neither customValidationMessages has been provided nor native validation has returned negative result.
  @method validateField
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.validation.validateField( htmlElementId, customValidationMessages );
  //</pre>
  @return TRUE if field has been validated and has no errors, false otherwise
@memberOf bcdui.widgetNg.validation
 */
bcdui.widgetNg.validation.validateField = function(htmlElementId, customValidationMessages, skipNativeValidation) { console.log(htmlElementId, customValidationMessages, skipNativeValidation); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.setCustomValidity) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.setCustomValidity Online Api}
  @description sets custom validity, use html5 constraint validation API if available, otherwise polyfill, ensures that following properties are set properly:  (Boolean) validity.valid (Boolean) validity.customError (String)  validationMessage (is set to "INVALID") in case of non-validity
  @method setCustomValidity
@memberOf bcdui.widgetNg.validation
 */
bcdui.widgetNg.validation.setCustomValidity = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.indicateFieldValidity) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.indicateFieldValidity Online Api}
  @description checks the field for validity via html5 constraint validation api and indicate by adding/removing particular CSS classes. The classes are always added, even in case native validation is supported (via :invalid pseudo class)
  @method indicateFieldValidity
@return TRUE if validation message has been placed, so field is not valid, false otherwise.
@memberOf bcdui.widgetNg.validation
 */
bcdui.widgetNg.validation.indicateFieldValidity = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.hasValidStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.hasValidStatus Online Api}
  @description NO REVALIDATION, just retrieval of current validity state, consideres native (constraint validation api) state and bcdui-internal ( existence of 'bcdInvalid' class). CSS case has to be considered because browsers native validation implementaion may switch validity state so that we cannot detect the change without fully revalidating the field.
  @method hasValidStatus
@return true if valid, false otherwise
@memberOf bcdui.widgetNg.validation
 */
bcdui.widgetNg.validation.hasValidStatus = function() {};



/**
@param {object} validationResult  The validationResult object to extend or null to create a new one, this object is modified.
  @param {(string|Array.<string>)} message  Message to append to the validationResult.validationMessage
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.addValidityMessage) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.html#.addValidityMessage Online Api}
  @description appends validity message to validationResult object and returns validationResult, creates a new one if none is provided. message must not be null.
  @method addValidityMessage
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.widgetNg.validation.addValidityMessage( validationResult, message );
  //</pre>
  @return {object} validationResult object with validationMessage array with appended message(s)
@memberOf bcdui.widgetNg.validation
 */
bcdui.widgetNg.validation.addValidityMessage = function(validationResult, message) { console.log(validationResult, message); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.html Online Api}
 * @description Validators for new generation of Widgets
 * @namespace 
 */
bcdui.widgetNg.validation.validators = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html Online Api}
 * @description A namespace for the BCD-UI widget validation (general).
 * @namespace 
 */
bcdui.widgetNg.validation.validators.general = {};

/**
 * generic type validators, input parameter is only a value:- value, nulls / empty values are valid!
 */
bcdui.widgetNg.validation.validators.general.TYPE_VALIDATORS = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.valueLengthValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.valueLengthValidator Online Api}
  @description validates on string length, params: - value {String}, may be null - max {int}: maximum string length
  @method valueLengthValidator
@memberOf bcdui.widgetNg.validation.validators.general
 */
bcdui.widgetNg.validation.validators.general.valueLengthValidator = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.patternValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.patternValidator Online Api}
  @description validates the string against given regex pattern, params: - value {String}, may be null - pattern {String} regular expression
  @method patternValidator
@memberOf bcdui.widgetNg.validation.validators.general
 */
bcdui.widgetNg.validation.validators.general.patternValidator = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.notEmptyValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.general.html#.notEmptyValidator Online Api}
  @description validates that value is neither null nor blank,params: - value
  @method notEmptyValidator
@memberOf bcdui.widgetNg.validation.validators.general
 */
bcdui.widgetNg.validation.validators.general.notEmptyValidator = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html Online Api}
 * @description A namespace for the BCD-UI widget validation (specific).
 * @namespace 
 */
bcdui.widgetNg.validation.validators.widget = {};

/**
 * type validator adapters
 */
bcdui.widgetNg.validation.validators.widget.TYPE_VALIDATORS = {};


/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.getValue) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.getValue Online Api}
  @description this getter we have to use which is compliant to the non-native placeholder feature
  @method getValue
@return value of the field or "" if the field is empty
@memberOf bcdui.widgetNg.validation.validators.widget
 */
bcdui.widgetNg.validation.validators.widget.getValue = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.valueLength) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.valueLength Online Api}
  @description checks the value of element for its length constraints, widget configuration API used: - maxlength
  @method valueLength
@return null if valid, validationMessageObject otherwise
@memberOf bcdui.widgetNg.validation.validators.widget
 */
bcdui.widgetNg.validation.validators.widget.valueLength = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.patternValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.patternValidator Online Api}
  @description 
  @method patternValidator
@memberOf bcdui.widgetNg.validation.validators.widget
 */
bcdui.widgetNg.validation.validators.widget.patternValidator = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.notEmptyValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.notEmptyValidator Online Api}
  @description 
  @method notEmptyValidator
@memberOf bcdui.widgetNg.validation.validators.widget
 */
bcdui.widgetNg.validation.validators.widget.notEmptyValidator = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.invalidModelDataValidator) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.validation.validators.widget.html#.invalidModelDataValidator Online Api}
  @description checks that target data node is not tagged invalid with bcdInvalid attribute. The attribute itself carries the validation-message. This validator shall not be used generally by sticking it to other widget validators, since it does NOT validate widget's validity but the model's validity. This validator shall be handled manually by a widget only during SYNC_READ, so that it is always able to SYNC_WRITE (write back) widget's data to the model. General widget validation API supports this case as of widget.validator.validateElement(htmlElementId, checkDataValidity) function.  extended widget configuration api used: - config.target.modelId - config.target.xPath
  @method invalidModelDataValidator
@memberOf bcdui.widgetNg.validation.validators.widget
 */
bcdui.widgetNg.validation.validators.widget.invalidModelDataValidator = function() {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.html Online Api}
 * @description Package for functionality around Wrs format
 * @namespace 
 */
bcdui.wrs = {};



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html Online Api}
 * @description Helper for js WRS format
 * @namespace 
 */
bcdui.wrs.jsUtil = {};



/**
@param {DomDocument} args  wrs:Wrs XML Document to be translated into a JavaScript object
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html#.domToJs) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html#.domToJs Online Api}
  @description Convert a DOM to an js object  Conventions for non-Wrs: - For each element child, except the root, there will be an array. obj.GuiStaus.Filters[0].Filter[1] - Each element itself is an object, text content becomes the property $t and attributes have their name as propertyname obj.GuiStaus.Filters[0].Filter[1].Expression[0].value - Textcontent of mixed content (an element has text and element childs) is only written of not blank. (Note, there is no mixed content in any of BCDUI defined XML.)  Special conventions for Wrs: - Only the elements in wrsArrayObjects are represented as arrays obj.Wrs.Data.R[0].C[0].attrName - If a Data.R[n].C element has no attributes, its is not an object but just the plain value to represent data as compact as possible obj.Wrs.Data.R[1].C[1] but obj.Wrs.Data.R[1].C[1].t$, if there are attributes obj.Wrs.Data.R[1].C[1].attrName  TODO namespaces
  @method domToJs
@return {Object}
@memberOf bcdui.wrs.jsUtil
 */
bcdui.wrs.jsUtil.domToJs = function(args) { console.log(args); };



/**
@param {Object} arg  The JavaScript object following Wrs conventions, from which the XML document is to be created
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html#.jsToXml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.jsUtil.html#.jsToXml Online Api}
  @description Converts a js object created with domToJs to an XML document
  @method jsToXml
@memberOf bcdui.wrs.jsUtil
 */
bcdui.wrs.jsUtil.jsToXml = function(arg) { console.log(arg); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html Online Api}
 * @description Utility functions for working with wrs:Wrs documents from JavaScript. These are mainly JavaScript wrappers around XML library found a bcdui/xslt
 * @namespace 
 */
bcdui.wrs.wrsUtil = {};



/**
@param {Object} args  Parameter object with the following properties
  @param {(string|bcdui.core.DataProvider)} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {string} args.rowId  Row id of which to get the position
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getRowPositionByRowId) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getRowPositionByRowId Online Api}
  @description 1-based position of a row which is identified by its row-id
  @method getRowPositionByRowId
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.getRowPositionByRowId( { model: model, rowId: rowId } );
  //</pre>
  @return {integer} Either position of a row in the document or -1 if no such row was found
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getRowPositionByRowId = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties:
  @param {(string|bcdui.core.DataProvider)} args.model  DataProvider (or its id), holding the Wrs with wrs:R|I|M|D row and wrs:C|O column nodesto be saved
  @param {boolean} [args.reload]  Useful especially for models of type SimpleModel for refreshing from server after save
  @param {function} [args.onSuccess]  Callback after saving (and optionally reloading) was successfully finished
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.saveModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.saveModel Online Api}
  @description Save Wrs data of a {@link bcdui.core.DataProvider}
  @method saveModel
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.saveModel( { model: model } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.saveModel = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} args.rowStartPos  Delete rows from
  @param {integer} [args.rowEndPos]  Delete rows including to. By default is equal rowStartPos
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRows) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRows Online Api}
  @description Deleting rows (operation will change source model). See {@link bcdui.wrs.wrsUtil.restore restore()} on how the change history is maintained.
  @method deleteRows
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.deleteRows( { model: model, rowStartPos: rowStartPos } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.deleteRows = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} args.rowStartPos  Restore rows from
  @param {integer} [args.rowEndPos]  Restore rows including to.
  @param {integer} [args.colStartPos]  Restore cols from
  @param {integer} [args.colEndPos]  Restore cols including to.
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.restore) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.restore Online Api}
  @description Restore (operation will change source model). Client side operations on Wrs keep a history, wrs:R turns into wrs:M for modified rows and wrs:D for deleted. Changed columns change from wrs:C to wrs:O. This allows undoing such a change till the data is send to the server.
  @method restore
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.restore( { model: model, rowStartPos: rowStartPos } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.restore = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} args.rowStartPos  Restore rows from
  @param {integer} [args.rowEndPos]  Restore rows including to.
  @param {integer} [args.colStartPos]  Restore cols from
  @param {integer} [args.colEndPos]  Restore cols including to.
  @param {function} [args.fn]  Callback function called after operation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.copy) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.copy Online Api}
  @description Copy (copies selected cells to clipboard, not changes source model)
  @method copy
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.copy( { model: model, rowStartPos: rowStartPos } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.copy = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} args.rowStartPos  Restore rows from
  @param {integer} [args.rowEndPos]  Restore rows including to.
  @param {integer} [args.colStartPos]  Restore cols from
  @param {integer} [args.colEndPos]  Restore cols including to.
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.paste) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.paste Online Api}
  @description paste (Paste data from clipboard. Changes source model)
  @method paste
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.paste( { model: model, rowStartPos: rowStartPos } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.paste = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} args.rowStartPos  Restore rows from
  @param {integer} [args.rowEndPos]  Restore rows including to.
  @param {integer} [args.colStartPos]  Restore cols from
  @param {integer} [args.colEndPos]  Restore cols including to.
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.pasteAsNewRows) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.pasteAsNewRows Online Api}
  @description Paste data from clipboard as new rows. Changes source model
  @method pasteAsNewRows
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.pasteAsNewRows( { model: model, rowStartPos: rowStartPos } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.pasteAsNewRows = function(args) { console.log(args); };



/**
@param {bcdui.core.DataProvider} model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {(DomElement|string)} row  Row element or row-id to be duplicated
  @param {boolean} [propagateUpdate]  If false, model is not fired
  @param {function} [fn]  Callback function called after operation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.duplicateRow) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.duplicateRow Online Api}
  @description 
  @method duplicateRow
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.duplicateRow( model, row );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.duplicateRow = function(model, row, propagateUpdate, fn) { console.log(model, row, propagateUpdate, fn); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} [args.rowStartPos]  First row to be duplicated
  @param {integer} [args.rowEndPos]  Last row to be duplicated
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.insertBeforeSelection]
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.duplicateRows) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.duplicateRows Online Api}
  @description Duplicate rows in Wrs. Fires fire
  @method duplicateRows
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.duplicateRows( { model: model } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.duplicateRows = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {function} [args.fn]  Callback function called after operation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.copyAllRows2CSV) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.copyAllRows2CSV Online Api}
  @description Copy all rows to CVS
  @method copyAllRows2CSV
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.copyAllRows2CSV( { model: model } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.copyAllRows2CSV = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {bcdui.core.DataProvider} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {integer} [args.rowStartPos]  Start
  @param {integer} [args.rowEndPos]  End
  @param {function} [args.fn]  Callback function called after operation
  @param {boolean} [args.insertBeforeSelection]
  @param {boolean} [args.propagateUpdate]  If false, model is not fired
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.insertRow) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.insertRow Online Api}
  @description Inserting rows
  @method insertRow
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.insertRow( { model: model } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.insertRow = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {string} validationId  'bcdValidationId' attribute in ValidationResult/Wrs yields this value
  @param {(string|bcdui.core.DataProvider)} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {url} [args.stylesheetUrl]  URL to validation stylesheet, defaults to 'xslt/validate/validateWrs.xslt'
  @param {Array.<bcdui.core.DataProvider>} args.dataProviders  additional data providers as parameters
  @param {function} [args.fn]  callback function called after validation done, gets object as parameter, containig properties: validationResult: the wrs:ValidationResult node of resulting transformation, may be null
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.validateModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.validateModel Online Api}
  @description runs validation xslt against given model, you can access the result via returned trafo, see return section. for one-time validation you can supply the callback function (fn parameter)
  @method validateModel
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.validateModel( { model: model, dataProviders: dataProviders } );
  //</pre>
  @return created transformation chain for the validation, it can be reused via bcdui.core.reExecute(_validatorTrafo, callBackFn);         the data can be accessed via _validatorTrafo.getData() which returns wrs:ValidationResult or null or ValidationResult with empty wrs:Data
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.validateModel = function(args, validationId) { console.log(args, validationId); };



/**
@param {Object} args  Parameter object with the following properties
  @param {string} args.validationId  the ID of this validator
  @param {(string|bcdui.core.DataProvider)} args.model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {function} args.cellValidation.func  function taking args object with: 'wrsC'        - the wrs:C element to validate 'wrsHeaderC'  - the wrs:Header/wrs:Columns/wrs:C meta info element returns either NULL (valid) or { validationMessage:String }
  @param {function} args.cellValidation.bRefSelector  function taking wrs:Header element and returns node-set of wrs:Columns/wrs:C to get validated
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.wrsValidation) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.wrsValidation Online Api}
  @description Wrs validation which validates selected wrs:C against provided validation function parameters:
  @method wrsValidation
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.wrsValidation( { validationId: validationId, model: model, cellValidation: cellValidation, cellValidation: cellValidation } );
  //</pre>
  @return wrsDoc
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.wrsValidation = function(args) { console.log(args); };



/**
@param {DomDocument} wrsDoc  WRS Document to build a header from
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.generateWrsHeaderMeta) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.generateWrsHeaderMeta Online Api}
  @description Generates metadata JS object from a Wrs document
  @method generateWrsHeaderMeta
@return {object} with { [column-id] : {object-with-attrs from wrs:Column/wrs:C} }
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.generateWrsHeaderMeta = function(wrsDoc) { console.log(wrsDoc); };



/**
@param {(string|bcdui.core.DataProvider)} wrs  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getValidationErrorCount) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getValidationErrorCount Online Api}
  @description Convenience method to return error count in current document (possibly validated by validateWrs.xml)
  @method getValidationErrorCount
@return -2: if no validation has been performed, -1: if the data provider is not ready yet, otherwise the number of errors found is returned
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getValidationErrorCount = function(wrs) { console.log(wrs); };



/**
@param {(string|bcdui.core.DataProvider)} input  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.transposeGrouping) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.transposeGrouping Online Api}
  @description This transposes the inner-most &commat;dim column column of a WRS from rows to columns. This is faster using the XLST with the same name except for Webkit, where this is faster
  @method transposeGrouping
@return {DomDocument} The transposed document
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.transposeGrouping = function(input) { console.log(input); };



/**
@param {(string|bcdui.core.DataProvider)} wrs  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {string} id  The column-id wrs:C/&commat;id
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getColPosById) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getColPosById Online Api}
  @description get column position by id
  @method getColPosById
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.getColPosById( wrs, id );
  //</pre>
  @return {integer} 1-based column position from the header/pos attribute, 0 if no such column was found
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getColPosById = function(wrs, id) { console.log(wrs, id); };



/**
@param {(string|bcdui.core.DataProvider)} wrs  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {(string|number)} rowId  The row-id or 1-based position of row
  @param {(string|number)} columnId  ID or 1-based position of column
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getCellValue) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getCellValue Online Api}
  @description Get cell value
  @method getCellValue
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.getCellValue( wrs, rowId, columnId );
  //</pre>
  @return {string} Current cell value or null
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getCellValue = function(wrs, rowId, columnId) { console.log(wrs, rowId, columnId); };



/**
@param {(string|bcdui.core.DataProvider)} wrs  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {string} validationId  validationId
  @param {boolean} doCreate  optional, in case no wrs:ValidationResult/wrs:Wrs exists, create one (empty)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getValidationResult) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getValidationResult Online Api}
  @description get wrs:ValidationResult/wrs:Wrs element for given Wrs (optionally creates an empty one)
  @method getValidationResult
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.getValidationResult( wrs, validationId, doCreate );
  //</pre>
  @return {Node} wrs:ValidationResult/wrs:Wrs or NULL if none exists and doCreate=false
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getValidationResult = function(wrs, validationId, doCreate) { console.log(wrs, validationId, doCreate); };



/**
@param {(DomElement|DomDocument)} wrsRootNode  Wrs itself or an element containing Wrs (i.e. Wrs document) where to replace the validation result in
  @param {(DomElement|DomDocument)} validationResultNode  wrs:ValidationResult (or container with it) containing wrs:Wrs element(s) (which obligatory is tagged with bcdValidationId attribute) if NULL, then the possible existing validationResult is effectively removed from wrs document
  @param {string} validationId  the validationId of the validation result Wrs to replace
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.replaceValidationResult) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.replaceValidationResult Online Api}
  @description Replaces validationResult/Wrs document in the Wrs, the validationDoc can be provided as NULL to remove the validationResult Wrs from previous validation; the validationId is mandatory to provide to uniquelly identify the subject of validation.
  @method replaceValidationResult
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.replaceValidationResult( wrsRootNode, validationResultNode, validationId );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.replaceValidationResult = function(wrsRootNode, validationResultNode, validationId) { console.log(wrsRootNode, validationResultNode, validationId); };



/**
@param {(string|bcdui.core.DataProvider)} wrs  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {(string|number)} rowId  The row-id or 1-based position of row
  @param {(string|number)} columnIdOrPos  ID or 1-based position of column
  @param {string} [value]  If NULL then wrs:null node is appended to column
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.setCellValue) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.setCellValue Online Api}
  @description Sets cell value, both, the row and cell MUST exist in target model This also changes wrs:R to wrs:M and clones wrs:C to wrs:O values.
  @method setCellValue
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.setCellValue( wrs, rowId, columnIdOrPos );
  //</pre>
  @return true if value has been set, false otherwise
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.setCellValue = function(wrs, rowId, columnIdOrPos, value) { console.log(wrs, rowId, columnIdOrPos, value); };



/**
@param {DomElement} wrs  WRSRootNode: Pointing to wrs:Wrs
  @param {Array.<string>} colIdArray  Array of column-ids to remove
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteColumns) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteColumns Online Api}
  @description Phsyically drops columns from Wrs
  @method deleteColumns
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.deleteColumns( wrs, colIdArray );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.deleteColumns = function(wrs, colIdArray) { console.log(wrs, colIdArray); };



/**
@param {(string|bcdui.core.DataProvider)} model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {string} rowId  Id of row to be deleted
  @param {boolean} [propagateUpdate]  If true, fire after change
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRow) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRow Online Api}
  @description Deletes a row identified by id, also see {@link bcdui.wrs.wrsUtil.deleteWrsRow deleteWrsRow()}
  @method deleteRow
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.deleteRow( model, rowId );
  //</pre>
  @return true if given row has been modified and converted to wrs:D or false
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.deleteRow = function(model, rowId, propagateUpdate) { console.log(model, rowId, propagateUpdate); };



/**
@param {(DomDocument|DomElement)} wrs  the Wrs document
  @param {(number|string)} colIdOrPos  column id or position
  @param {array} values  array of string values to lookup
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRowByColumnValue) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.deleteRowByColumnValue Online Api}
  @description delete rows identified by the column value(s)
  @method deleteRowByColumnValue
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.deleteRowByColumnValue( wrs, colIdOrPos, values );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.deleteRowByColumnValue = function(wrs, colIdOrPos, values) { console.log(wrs, colIdOrPos, values); };



/**
@param {(string|bcdui.core.DataProvider)} model  Id of a DataProvider or the DataProvider itself (dp must be ready)
  @param {string} rowId  Id of row to be deleted
  @param {boolean} [propagateUpdate]  If true, fire after change
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.restoreRow) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.restoreRow Online Api}
  @description Restores a wrs:D, wrs:M identified by id, also see {@link bcdui.wrs.wrsUtil.restore restore()}
  @method restoreRow
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.restoreRow( model, rowId );
  //</pre>
  @return true if given row has been restored or false if row is not wrs:M nor wrs:D
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.restoreRow = function(model, rowId, propagateUpdate) { console.log(model, rowId, propagateUpdate); };



/**
@param {(PostWrsParam|XMLDocument|Array.<XMLDocument>|bcdui.core.DataProvider|Array.<bcdui.core.DataProvider>)} args  DataProvider(s), Document(s) or a parameter object
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.postWrs) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.postWrs Online Api}
  @description 
  @method postWrs
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.postWrs = function(args) { console.log(args); };



/**
@param {Object} args  Parameter object with the following properties
  @param {string} args.scope  The scope requested
  @param {function} args.onSuccessCb  The callback, receives following args <ul> <li>scope           {string}    - Requested scope <li>isRange         {boolean}   - false if blockSize = 1, true otherwise <li>forEach:        {function}  - Helper iterating function, executing a passed function for each identifier; follows forEach() JS API spec; <li>nextIdentifier  {integer}   - The next identifier; ONLY defined if isRange = false; otherwise undefined <li>firstIdentifier {integer}   - First identifier; ONLY defined if isRange = true; otherwise undefined <li>lastIdentifier  {integer}   - Last identifier; ONLY defined if isRange = true; otherwise undefined </ul>
  @param {integer} [args.blockSize]  Number of identifiers to be retrieved
  @param {function} [args.onErrorCb]  An error callback
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getNextIdentifier) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.getNextIdentifier Online Api}
  @description Retrieves next identifier from the server (async)
  @method getNextIdentifier
@example
  //<pre>
  // Sample using the mandatory parameters
  bcdui.wrs.wrsUtil.getNextIdentifier( { scope: scope, onSuccessCb: onSuccessCb } );
  //</pre>
  @memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.getNextIdentifier = function(args) { console.log(args); };



/**
@param {DomDocument} wrsDoc  the Wrs document to apply changes on
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.applyScale) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.applyScale Online Api}
  @description applies number rounding at defined wrs:Header/wrs:Columns/wrs:C/&commat;scale
  @method applyScale
@return wrsDoc
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.applyScale = function(wrsDoc) { console.log(wrsDoc); };



/**
@param {string} expression  the expression to parse
  @param {object} params  the expression to parse
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.parseFilterExpression) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.wrs.wrsUtil.html#.parseFilterExpression Online Api}
  @description 
  @method parseFilterExpression
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = bcdui.wrs.wrsUtil.parseFilterExpression( expression, params );
  //</pre>
  @example
  //<pre>
  bcdui.wrs.wrsUtil.parseFilterExpression("country = :country or (revenue >= :revenue or today = :today and allow='true' or string='a and b')",{    country:"DE",    revenue:1000,    today:"2018-12-09"  });    // yields following result document  &lt;f:And xmlns:f="http://www.businesscode.de/schema/bcdui/filter-1.0.0">   &lt;f:Or>     &lt;f:Expression bRef="country" op="=" value="DE"/>     &lt;f:Or>       &lt;f:Or>         &lt;f:Expression bRef="revenue" op="&gt;=" value="1000"/>         &lt;f:And>           &lt;f:Expression bRef="today" op="=" value="2018-12-09"/>           &lt;f:Expression bRef="allow" op="=" value="true"/>         &lt;/f:And>       &lt;/f:Or>       &lt;f:Expression bRef="string" op="=" value="a and b"/>     &lt;/f:Or>   &lt;/f:Or>  &lt;/f:And>
  //</pre>
  @return {DomDocument} containing parsed expression
@memberOf bcdui.wrs.wrsUtil
 */
bcdui.wrs.wrsUtil.parseFilterExpression = function(expression, params) { console.log(expression, params); };



/**
 * @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html Online Api}
 * @description Custom BCD-UI utility functions provided as jQuery Plugins
 * @namespace 
 */
jQuery.fn = {};



/**
@param {(object|element|string)} target  Target to scroll the container to, must be a level-1 child of the container. Can be a jQuery object, an Element or jQuery compatible selector.
  @param {BcdScrollToParamOptions} [options]  Options to apply, all the options are optional
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdScrollTo) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdScrollTo Online Api}
  @description 
  @method bcdScrollTo
@example
  //<pre>
  // Sample using the mandatory parameters
  var ret = jQuery.fn.bcdScrollTo( target );
  //</pre>
  @return {object} jQuery object
@memberOf jQuery.fn
 */
jQuery.fn.bcdScrollTo = function(target, options) { console.log(target, options); };



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdTranslate) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdTranslate Online Api}
  @description jQuery BCD-UI bcdTranslate plugin  Translates element. In case i18n catalog is not loaded yet, the translation is scheduled and runs as soon as the catalog is loaded.
  @method bcdTranslate
@memberOf jQuery.fn
 */
jQuery.fn.bcdTranslate = function() {};



/**
@see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdLoad) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdLoad Online Api}
  @description jQuery BCD-UI bcdLoad plugin  like jQuery.load(), but evaluates 'bcdOnLoad' attributes in loaded fragments.
  @method bcdLoad
@memberOf jQuery.fn
 */
jQuery.fn.bcdLoad = function() {};



/**
@param {object} bcdRendererArgs  arguments to bcdui.core.Renderer
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdRender) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/jQuery.fn.html#.bcdRender Online Api}
  @description jQuery BCD-UI bcdRender plugin
  @method bcdRender
@memberOf jQuery.fn
 */
jQuery.fn.bcdRender = function(bcdRendererArgs) { console.log(bcdRendererArgs); };


/**
 * @typedef {Number} integer
 * @description
 * Integer
 */
/**
 * @typedef {Object} enum
 * @description
 * Enumeration
 */
/**
 * @typedef {Object} DomDocument
 * @description
 * DomDocument
 */
/**
 * @typedef {Object} DomElement
 * @description
 * DomElement
 */
/**
 * @typedef {Object} DomAttribute
 * @description
 * DomAttribute
 */
/**
 * @typedef {Object} DomNodeSet
 * @description
 * A DomNodeSet
 */
/**
 * @typedef {Object} HtmlElement
 * @description
 * HtmlElement
 */
/**
 * @typedef {Object} SymLink
 * @description
 * Symlink
 */
/**
 * @typedef {url|Function|Array.<(url|Function)>|bcdui.core.DataProvider} chainDef
 * @description
 * Defines the transformation steps of a transformation chain, like {@link bcdui.core.ModelWrapper} or {@link bcdui.core.Renderer}.
 * <br/>Can be: url | function | Array<(url|function)> | bcdui.core.DataProvider
 * <br/>You can provide
 * <ul>
 *   <li>A single DataProvider, holding a chain definition following XML Schema 'chain-1.0.0.xsd'. Or
 *   <li>A single string holding the url of an xslt document (*.xslt) or a doT.js file (*.dott). Or
 *   <li>A javascript transformator function, representing a transformation. Such a function gets two parameters, data, like a DOM or JSON, whatever DataProvider.getData() returns
 *       and a parameter object, which maps parameter names to the actual parameters. It can return a new data object or modify the one, which was its input.
 *       It it does not return anything, its (modified) input doc is used as return default. Or
 *   <li>An array of such strings and functions in the order they are to be executed. In this case, the output of the n-th transformation becomes the input of n+1.
 * </ul>
 * @example <caption>These are all valid values for a chainDef:</caption>
 * "myStylesheet.xslt"                         // An <b>url</b> pointing to an *.xslt or a *.dott file
 * ["myTrans.dott", jsTrans]                   // An <b>array</b> of transformators, can be urls (doT.js or xslt) and js functions
 * new bcdui.core.StaticModel(...)             // A <b>DataProvider subclass</b>, providing an xml chain definition according to chain-1.0.0.xsd
 * function jsTrans(doc, params) {             // A <b>js function</b>, expecting a data object (DOM or JSON)
 *   var n = doc.getElementById('someId');
 *   n.setAttribute('someAttr', params.newValue);
 * }
 */
/**
 * @typedef {string} i18nToken
 * @description
 * A string value which is either taken as-is or an i18n key-marker as proposed by
 * <br/>We use xE0FF prefix to separate an i18n token from a plain string. This marker is available via bcdui.i18n.TAG
 * For i18n keys, see messages.xml or binding set bcd_i18n
 * @example
 * caption = "data"       // Treats value 'data' literal
 * caption = "\uE0FFdata" // Treats value 'data' as an i18n-key
 */
/**
 * @typedef {string|HtmlElement|jQuery} targetHtmlRef
 * @description
 * Any reference to an existing HTML element: Can be a DOM element, a jQuery object, a css selector or a plain id of an element.
 * The referenced element *must*  be attached to html document unless the reference itself is a DOM element.
 * <br/>If jQuery returns a list with multiple matches, the first member is used. These are all valid examples:
 * @example
 * document.getElementById("myId").firstChild      // Any plain <b>DOM element</b>
 * jQuery('#myElementId') &bull; jQuery('ul li:first')  // A <b>jQuery</b> list, first one is used
 * 'ul li:first'                                   // A <b>css selector</b>, first match is used
 * 'myElementId'                                   // Treated as an <b>element id</b> if its just letters (id without #)
 */
/**
 * @typedef {string} modelXPath
 * @description
 * Provide an XPath, which can be used to use nodes from, can point to an attribute or a full subtree.
 * Start the XPath with $someModelId, make sure that you create this {@link bcdui.core.DataProvider} with an explicit id.
 * Default for this is $guiStatus, which is always auto-registered.
 * <br/>Note: You can also build quite complex XPaths and refer to further registered models via '$myModelId' in predicates, see second example.
 * @example
 * $guiStatus/guiStatus:Status/guiStatus:MyNode                                     // A string with a simple XPath
 * $modelId/f:Filter/f:Filters[$guiStatus/guiStatus:Status/guiStatus:MyNodes/@attr] // A string with a more complex XPath, using multiple models
 */
/**
 * @typedef {string} xPath
 * @description
 * Provide an XPath, which can be used to use nodes from, can point to an attribute or a full subtree.
 * <br/>Note: must not contain model references.
 * @example
 * /guiStatus:Status/guiStatus:MyNode                                     // A string with a simple XPath
 */
/**
 * @typedef {string} writableModelXPath
 * @description
 * Provide an XPath, which can be used to append nodes to. In most cases the path will be created if it does not exist,
 * reusing as much as possible. See {@link bcdui.core.createElementWithPrototype}
 * Start the XPath with $dataProviderId, make sure that you create this {@link bcdui.core.DataProvider} with an explicit id.
 * Default for this is $guiStatus, which is always auto-registered.
 * Be aware that the model's data changes, if it is a ModelWrapper, the next execute() would of course overwrite the change.
 * <br/>You can also build complex XPaths and refer to further models via '$dataProviderId' in predicates.
 * @example
 * /guiStatus:Status/guiStatus:MyNode                                               // Default is $guiStatus
 * $modelId/f:Filter/f:Filters[$guiStatus/guiStatus:Status/guiStatus:MyNodes/@attr] // A string with a more complex XPath, using multiple models
 */
/**
   * @typedef {object} BcdScrollToParamOptions
   * @property {string}                [snapTo=beginning] snapTo can have following values: 'beginning': put the scrollTo-target on the top of container.
   */
/**
   * @typedef {object} AddStatusListenerParam
   * @property {(function|bcdui.core.StatusListener)} listener - A function or StatusListener object representing the listener action.
   * @property {bcdui.core.Status} status - The status it should listen to.
   *   If it is missing the listener is executed on all status transitions, otherwise it is executed when the status is set to the specified status.
   * @property{boolean} [onlyOnce=false] - A boolean variable indicating that the listener should be automatically removed after it has been executed. 
   */
/**
   * @typedef {object} RemoveStatusListenerParam
   * @property {(function|bcdui.core.StatusListener)} listener - A function <p/>or StatusListener object representing the listener action.
   * @property {bcdui.core.Status}                  status   - The status this listener is listening to. If it is missing it is assumed that the listener belongs to the global scope.
   */
/**
     * @typedef {object} OnceReadyParam
     * @property {function} onSuccess - callback function which is called when {@link bcdui.core.AbstractExecutable} is or gets ready
     * @property {function} [onFailure] - callback function which is called when {@link bcdui.core.AbstractExecutable} gets into failed status
     * @property {boolean}  [executeIfNotReady=false] - do execute {@link bcdui.core.AbstractExecutable} if it's not ready
     */
/**
   * @typedef {object} OnReadyParam
   * @property {function} onSuccess - callback function which is called when {@link bcdui.core.AbstractExecutable} is or gets ready
   * @property {function} [onFailure] - callback function which is called when {@link bcdui.core.AbstractExecutable} gets into failed status
   * @property {boolean}  [onlyOnce=false] - call callback only once or on each ready state
   * @property {boolean}  [onlyFuture=false] - only future ready states will trigger the callback. Per default the callback is called immediately (but async), if the AbstractExecutable is already in ready state
   * @property {boolean}  [executeIfNotReady=false] - do execute {@link bcdui.core.AbstractExecutable} if it's not ready
   */
/**
   * @typedef {object} RemoveDataListenerParam
   * @property {string} [id] - listener id
   * @property {string} [callback] - listener function
   */
/**
   * Adds a data listener to the DataProvider which can be triggered when the data (XML
   * document) is changed. The listener offers two options: It can either be fired on
   * any change or on a change in a specific XPath result.
   * Note that no uniqueness check is done before adding the listener so it is possible to add the same listener twice or more times.
   * /
   /**
   * @typedef {object} OnChangeParam
   * @property {function} callback - function to be called after changes
   * @property {string}   [trackingXPath] - xPath to monitor for changes
   * @property {boolean}  [onlyOnce=false] - fire on each change or only once  (higher priority than listenerObject's onlyOnce)
   * @property {string}   [id] - listener id (only needed for removeDataListener usability)
   */
/**
   * @typedef {object} SimpleModelParamSaveOptions
   * @property {chainDef}                                      [saveChain]              - The definition of the transformation chain
   * @property {Object}                                        [saveParameters]         - An object, where each property holds a DataProvider, used as a transformation parameters.
   * @property {boolean}                                       [reload=false]           - Useful especially for models of type SimpleModel for refreshing from server after save
   * @property {function}                                      [onSuccess]              - Callback after saving (and optionally reloading) was successfully finished
   * @property {function}                                      [onFailure]              - Callback on failure, is called if error occurs
   * @property {function}                                      [onWrsValidationFailure] - Callback on serverside validate failure, if omitted the onFailure is used in case of validation failures
   * @property {bcdui.core.DataProvider}                       [urlProvider]            - dataProvider holding the request url (by default taken from the args.url).
   */
/**
   * @typedef {object} SimpleModelParam
   * @property {(string|bcdui.core.RequestDocumentDataProvider)} url                 - A string with the URL or a RequestDocumentDataProvider providing the request. See {@link bcdui.core.RequestDocumentDataProvider RequestDocumentDataProvider} for an example.
   * @property {string}                                        [uri]                 - uri extension as a suffix to .url to tag requests, must not start with '/'. This parameter is ineffective if .url is provided.
   * @property {string}                                        [id]                  - Globally unique id for used in declarative contexts
   * @property {boolean}                                       [isAutoRefresh=false] - If true, each change of args.urlProvider triggers a reload of the model
   * @property {string}                                        [mimeType=auto]       - Mimetype of the expected data. If "auto" or none is given it is derived from the url
   * @property {SimpleModelParamSaveOptions}                   [saveOptions]         - An argument map for save options {@link SimpleModelParamSaveOptions}
   */
/**
   * @typedef {Object} StaticModelParam
   * @property {string}                 [id] - Globally unique id for use in declarative contexts, ignored if args.data is not set
   * @property {(string|Object|DomDocument)} data - An XML string, which is parsed, a DOM document </p>or a parameter map
   */
/**
   * @typedef {object} ExecuteParam
   * @property {function} [fn] A function called once when the object becomes ready again. Called immediately if we are already ready && shouldRefresh==false
   * @property {String} [partialHtmlTargets] Space separated list of html element ids. If given, only these elements within targetHmtlElement of the render
   *         are touched in the DOM tree, plus the chain gets the parameter bcdPartialHtmlTargets set to this value. Valid for this one call only, cleared after.
   * @property {boolean} [shouldRefresh] "false" if this method should do nothing when the object is already in the ready status. Default is "true"false".
   */
/**
   * Translates and formats if needed the given message id.
   * The function should be used only if bcduiI18Model ready. If
   * the catalog is not initialized up to this moment (the catalog
   * initialization is asychronous) then NULL is returned in production
   * and an error is thrown in debug mode.
   *
   /**
   * @typedef {object} SyncTranslateFormatMessageParam
   * @property {string} [msgid] - the message id
  */
/**
   * @typedef {object} PostWrsParam
   * @property {DomDocument|DomDocument[]|bcdui.core.DataProvider|bcdui.core.DataProvider[]}          args.wrsDoc - Document(s) / DataProvider
   * @property {function}                           [onSuccess]              - Callback on success, is called after successful POST or if POST was not issued due to to changes in the document 
   * @property {function}                           [onFailure]              - Callback on failure, is called if error occurs
   * @property {function}                           [onWrsValidationFailure] - Callback on serverside validate failure, if omitted the onFailure is used in case of validation failures
   * @property {string}                             [uri]                    - An URI (i.e. SomeDoc) which is appended as pathInfo to WrsServlet
   */
/**
   * @typedef {string} QuickEdit.CallbackHandlerType
   * @description
   * Defined callback handler types:
   * "DISPOSE" - this type is called when disposing the widget, either on explicit close or via destruction.
   */
/**
     * This callback is displayed as part of the Requester class.
     * @callback QuickEdit~callbackHandler
     * @param {QuickEdit} instance - the QuickEdit instance
     * @param {QuickEdit.CallbackHandlerType} type - a string specifying the type of callback
     * @param {object} args - arguments specific to the type
     */

/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html Online Api}
  @description An abstract base class, representing a Status. See {@link bcdui.core.status} for concrete sub classes.
  */
bcdui.core.Status = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html Online Api}
  @description An abstract base class, representing a Status. See {@link bcdui.core.status} for concrete sub classes.
    */
  constructor(){ console.log(); }
  getCode() {}
  getDescription() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html#equals) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Status.html#equals Online Api}
  @description Test the status for logical equivalence to another status object. Usually this function should test if the target status is of the same class as this status.
  @return {boolean} True, if the specified status object represents the samelogical status as the current one.
  */
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html Online Api}
  @description Represents a status event thrown to status listeners of {@link bcdui.core.DataProvider DataProviders},  see {@link bcdui.core.AbstractExecutable#removeStatusListener} and {@link bcdui.core.StatusListener}
  @description The constructor creating a new StatusEvent object.
  */
bcdui.core.StatusEvent = class {
  /**
  @param {Object} args  This parameter map must contain two properties:
  @param {Object} args.source  The object the status transition happened
  @param {bcdui.core.Status} args.newStatus  The new status of the source object
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html Online Api}
  @description Represents a status event thrown to status listeners of {@link bcdui.core.DataProvider DataProviders}, see {@link bcdui.core.AbstractExecutable#removeStatusListener} and {@link bcdui.core.StatusListener}
  @description The constructor creating a new StatusEvent object.
    */
  constructor(args){ console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html#getSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusEvent.html#getSource Online Api}
  @description Getter for the object that made the status transition.
  @return {object} The causer of the event.
  */
  getSource() {}
  getStatus() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html Online Api}
  @description An interface that status listeners must implement. A StatusListener is informed by DataProviders (more precisely by {@link bcdui.core.AbstractExecutable AbstractExecutables}) about status changes, becoming ready is the most important.
  */
bcdui.core.StatusListener = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html Online Api}
  @description An interface that status listeners must implement. A StatusListener is informed by DataProviders (more precisely by {@link bcdui.core.AbstractExecutable AbstractExecutables}) about status changes, becoming ready is the most important.
    */
  constructor(){ console.log(); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html#handleStatusEvent) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StatusListener.html#handleStatusEvent Online Api}
  @description This method is called when the status transition the listener is registered for occurs.
  @param statusEvent  The status event belonging to the status transition. This object must not be modified, because it is shared among all listeners.
  */
  handleStatusEvent(statusEvent) { console.log(statusEvent); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html Online Api}
  @description The object registry is a class that tracks registration of BCD-UI objects by their id. It also offers methods to wait for the registration of one or more objects so that the dependencies can be managed more easily. <p/> Use the singleton {@link bcdui.factory.objectRegistry} for registering
  @description This class should not be instantiated directly, because there is already a singleton instance at {@link bcdui.factory.objectRegistry} which is used by the factory methods.
  */
bcdui.factory.ObjectRegistry = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html Online Api}
  @description The object registry is a class that tracks registration of BCD-UI objects by their id. It also offers methods to wait for the registration of one or more objects so that the dependencies can be managed more easily. <p/> Use the singleton {@link bcdui.factory.objectRegistry} for registering
  @description This class should not be instantiated directly, because there is already a singleton instance at {@link bcdui.factory.objectRegistry} which is used by the factory methods.
    */
  constructor(){ console.log(); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#getObject) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#getObject Online Api}
  @description Retrieves a DataProvider from the ObjectRegistry by the provided id. Use this if you need access from JavaScript to objects, which where created via XSLT, XAPI or JSP.
  @param {(string|SymLink)} id  The object to be resolved from the registry.
  @return {bcdui.core.DataProvider} The object registered under the id or null if no such object exists.
  */
  getObject(id) { console.log(id); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#generateTemporaryId) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#generateTemporaryId Online Api}
  @description Get a new page-unique id. Use this if you don't car about the id's value but need a unique one.
  */
  generateTemporaryId() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#generateTemporaryIdInScope) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#generateTemporaryIdInScope Online Api}
  @description Get a new page-unique id for a certain scope, i.e. prefix. The prefix makes it easier to debug.
  */
  generateTemporaryIdInScope() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withObjects) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withObjects Online Api}
  @description Waits until one or more ids are registered (but not necessarily ready) and then calls a JavaScript function. If they are already registered the JavaScript function will be called immediately. <p/> Use this if you need access from JavaScript to objects, which where created via XSLT, XAPI or JSP.  See {@link bcdui.factory.objectRegistry.withReadyObjects withReadyObjects()}
  @param {(Object|Array.<string>|string)} args1  This can either be a parameter object or an array of id strings or a single id. The format of the parameter object is as follows <ul> <li>ids: {string[]|string} The array of ids that must be registered before the callback function is called.</li> <li>fn: {Function} The function to be called when the ids are registered.</li> </ul>
  @param {function} args2  If the first parameter is not a parameter object, then this is the callback function that is called as soon as the requested ids are registered.
  */
  withObjects(args1,args2) { console.log(args1,args2); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#deRegisterObject) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#deRegisterObject Online Api}
  @description Removes a DataProvider from the object registry. <p/> Use this if you need access from XSLT, XAPI or JSP to objects created via JavaScript.
  @param {bcdui.core.DataProvider} obj  The DataProvider to be removed from the registry.
  */
  deRegisterObject(obj) { console.log(obj); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#registerObject) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#registerObject Online Api}
  @description Registers a new object in the object registry by its unique id property. Pending listeners can be informed on that event. Additionally it creates a JavaScript variable with the name of the object id and the object as value. <p/> Use this if you need access from XSLT, XAPI or JSP to objects created via JavaScript.
  @param {bcdui.core.DataProvider} obj  The DataProvider to be registered.
  */
  registerObject(obj) { console.log(obj); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withReadyObjects) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withReadyObjects Online Api}
  @description Waits until the specified DataProvider ids are registered and reach their ready states. Then it calls the specified callback function. Please note that it also works when the data providers are already in their ready state; then the callback is called immediately. Note that it will also execute the DataProviders it waits fir, if they are not yet ready. The interface is identical to the {@link bcdui.factory.objectRegistry.withObjects withObjects()} function.
  @param {(Object|Array.<string>|string)} args1  The parameter object or the object ids.
  @param {function} args2  The callback function if argsOrIds is an array.
  @param {boolean} skipExecute  do not execute the non-ready dataproviders
  */
  withReadyObjects(args1,args2,skipExecute) { console.log(args1,args2,skipExecute); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withReadyObjectsNoExecute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.factory.ObjectRegistry.html#withReadyObjectsNoExecute Online Api}
  @description Waits until the specified DataProvider ids are registered and reach their ready states. Then it calls the specified callback function. Please note that it also works when the data providers are already in their ready state; then the callback is called immediately. It does not execute the DataProviders it waits for, it waits until somebody else executes it. The interface is identical to the {@link bcdui.factory.objectRegistry.withObjects} function.
  @param {(Object|Array.<string>|string)} args1  The parameter object or the object ids.
  @param {function} args2  The callback function if argsOrIds is an array.
  */
  withReadyObjectsNoExecute(args1,args2) { console.log(args1,args2); }
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html Online Api}
  @description The abstract executable class is a base class for asynchronous operating status-based classes in BCD-UI library. It offers a basic set of methods that these classes share. Most methods deal with status handling, transitions, listeners and synchronization.  <br/>Most common implementations are: {@link bcdui.core.StaticModel} &bull; {@link bcdui.core.SimpleModel} &bull;
  @description The constructor which must be called by all sub-classes. It initializes the listeners, status and id fields. This class is abstract and not meant to be instantiated directly
  */
bcdui.core.AbstractExecutable = class {
  /**
  @param {Object} [args]  Parameter object
  @param {string} [args.id]  A unique id for declarative contexts
  @param {function} [args.bcdPreInit]  a function which can be used to execute code before any super code of derived classes
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html Online Api}
  @description The abstract executable class is a base class for asynchronous operating status-based classes in BCD-UI library. It offers a basic set of methods that these classes share. Most methods deal with status handling, transitions, listeners and synchronization.  <br/>Most common implementations are: {@link bcdui.core.StaticModel} &bull; {@link bcdui.core.SimpleModel} &bull;
  @description The constructor which must be called by all sub-classes. It initializes the listeners, status and id fields. This class is abstract and not meant to be instantiated directly
    */
  constructor(args){ console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#setStatus Online Api}
  @description Makes a transition from the current status to the new status if they are not equal. After the status is changed it fires the status event to the registered listeners.<p/> Usually this method will only be called by the library but you can use it to re-trigger an action. For available statuses and their effect, see the concrete class,
  @param {bcdui.core.Status} args  Either a Status object or a parameter map with a property "status" holding a Status object.
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractExecutable.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html Online Api}
  @description A data provider is an abstract class on top of the {@link bcdui.core.AbstractExecutable}, extending it by data-related functions (like getName, getData, data modification events). The name is filled with the id by default or set from the "name" argument. getData() is abstract and must be provided by sub-classes.  <br/>Most common implementations are: {@link bcdui.core.StaticModel} &bull; {@link bcdui.core.SimpleModel} &bull; {@link bcdui.core.ModelWrapper}  <br/>Further implementations: {@link bcdui.core.AsyncJsDataProvider} &bull; {@link bcdui.core.StringDataProvider} &bull; {@link bcdui.core.DataProviderHtmlAttribute} &bull; {@link bcdui.core.RequestDocumentDataProvider} &bull; {@link bcdui.core.DataProviderWithXPathNodes} &bull; {@link bcdui.core.DataProviderWithXPath} &bull; {@link bcdui.core.DataProviderHolder} &bull; {@link bcdui.core.DataProviderAlias} &bull; {@link bcdui.core.ConstantDataProvider} &bull; {@link bcdui.core.PromptDataProvider} &bull;
  @description Calls the initializer of {@link bcdui.core.AbstractExecutable} and additionally sets the name property. This property is filled from the "args" parameter map or set to the "id" if there is no "args.name" value in the map. <p>   In contrast to the id property the name does not need to be globally unique,   Instead, it should be unique within the scope it is used for. For example   if the data provider is passed to a {@link bcdui.core.TransformationChain} the name should   be unique for within this TransformationChain object. </p>
  @extends bcdui.core.AbstractExecutable
*/
bcdui.core.DataProvider = class extends bcdui.core.AbstractExecutable{
  /**
  @param {object} args
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html Online Api}
  @description A data provider is an abstract class on top of the {@link bcdui.core.AbstractExecutable}, extending it by data-related functions (like getName, getData, data modification events). The name is filled with the id by default or set from the "name" argument. getData() is abstract and must be provided by sub-classes.  <br/>Most common implementations are: {@link bcdui.core.StaticModel} &bull; {@link bcdui.core.SimpleModel} &bull; {@link bcdui.core.ModelWrapper}  <br/>Further implementations: {@link bcdui.core.AsyncJsDataProvider} &bull; {@link bcdui.core.StringDataProvider} &bull; {@link bcdui.core.DataProviderHtmlAttribute} &bull; {@link bcdui.core.RequestDocumentDataProvider} &bull; {@link bcdui.core.DataProviderWithXPathNodes} &bull; {@link bcdui.core.DataProviderWithXPath} &bull; {@link bcdui.core.DataProviderHolder} &bull; {@link bcdui.core.DataProviderAlias} &bull; {@link bcdui.core.ConstantDataProvider} &bull; {@link bcdui.core.PromptDataProvider} &bull;
  @description Calls the initializer of {@link bcdui.core.AbstractExecutable} and additionally sets the name property. This property is filled from the "args" parameter map or set to the "id" if there is no "args.name" value in the map. <p> In contrast to the id property the name does not need to be globally unique, Instead, it should be unique within the scope it is used for. For example if the data provider is passed to a {@link bcdui.core.TransformationChain} the name should be unique for within this TransformationChain object. </p>
  @extends bcdui.core.AbstractExecutable
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#toString Online Api}
  @description Useful for debugging.
  @overrides bcdui.core.AbstractExecutable#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#setStatus Online Api}
  @param {Status} args
  @overrides bcdui.core.AbstractExecutable#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.AbstractExecutable#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.AbstractExecutable#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.AbstractExecutable#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.AbstractExecutable#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.AbstractExecutable#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @overrides bcdui.core.AbstractExecutable#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.AbstractExecutable#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.AbstractExecutable#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.AbstractExecutable#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.AbstractExecutable#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.XHRwithFreeThreadedDocuments.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.XHRwithFreeThreadedDocuments.html Online Api}
  @description A class implementing the XmlHttpRequest interface for Internet Explorer so that it always created "FreeThreadedDOMDocuments". The default IE implementation creates non free-threaded document which cannot be used to create an XSLT processor. This bug is worked around by this class.  Sadly, we cannot switch to new (IE9) XMLHttpRequest. Because A) The new native docs do not support Xpath and b) By setting responseType = 'msxml-document' we can get MSXML docs instead of the native ones, having support for xPath, but the version then is only IXMLDomDocument2, which is incompatible with Msxml2.XSLTemplate.6.0 (being IXMLDomDocument3), XSLTProcessor will complain when using it as a parameter to a stylesheet.
  */
bcdui.core.browserCompatibility.ie.XHRwithFreeThreadedDocuments = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.XHRwithFreeThreadedDocuments.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.browserCompatibility.ie.XHRwithFreeThreadedDocuments.html Online Api}
  @description A class implementing the XmlHttpRequest interface for Internet Explorer so that it always created "FreeThreadedDOMDocuments". The default IE implementation creates non free-threaded document which cannot be used to create an XSLT processor. This bug is worked around by this class.  Sadly, we cannot switch to new (IE9) XMLHttpRequest. Because A) The new native docs do not support Xpath and b) By setting responseType = 'msxml-document' we can get MSXML docs instead of the native ones, having support for xPath, but the version then is only IXMLDomDocument2, which is incompatible with Msxml2.XSLTemplate.6.0 (being IXMLDomDocument3), XSLTProcessor will complain when using it as a parameter to a stylesheet.
    */
  constructor(){ console.log(); }
  _doReadyStateChange_xml() {}
  _doReadyStateChange_noXML() {}
  open() {}
  setRequestHeader() {}
  getAllResponseHeaders() {}
  send() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.NullStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.NullStatus.html Online Api}
  @description Initial status status indicating that the status of the respective executable object has not yet been set, the object was just created. Usually the object will change to InitializedStatus immediately.
  @extends bcdui.core.Status
*/
bcdui.core.status.NullStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.NullStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.NullStatus.html Online Api}
  @description Initial status status indicating that the status of the respective executable object has not yet been set, the object was just created. Usually the object will change to InitializedStatus immediately.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.InitializedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.InitializedStatus.html Online Api}
  @description This status is reached as soon as the executable object has been initialized.  This is the standard stable status after object creation. DataProviders are now waiting for execute()
  @extends bcdui.core.Status
*/
bcdui.core.status.InitializedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.InitializedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.InitializedStatus.html Online Api}
  @description This status is reached as soon as the executable object has been initialized. This is the standard stable status after object creation. DataProviders are now waiting for execute()
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadingStatus.html Online Api}
  @description This class is active while the executable object is waiting for its document to be loaded. As soon as the server response is complete, the status will switch.
  @extends bcdui.core.Status
*/
bcdui.core.status.LoadingStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadingStatus.html Online Api}
  @description This class is active while the executable object is waiting for its document to be loaded. As soon as the server response is complete, the status will switch.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.URLAvailableStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.URLAvailableStatus.html Online Api}
  @description A status that is reached as soon as the executable object got its main URL from its URL data provider.
  @extends bcdui.core.Status
*/
bcdui.core.status.URLAvailableStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.URLAvailableStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.URLAvailableStatus.html Online Api}
  @description A status that is reached as soon as the executable object got its main URL from its URL data provider.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadedStatus.html Online Api}
  @description This status indicates that the main data document of the executable object finished loading.
  @extends bcdui.core.Status
*/
bcdui.core.status.LoadedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadedStatus.html Online Api}
  @description This status indicates that the main data document of the executable object finished loading.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadFailedStatus.html Online Api}
  @description An generic error status which is reached when loading an XML document has failed.
  @extends bcdui.core.Status
*/
bcdui.core.status.LoadFailedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.LoadFailedStatus.html Online Api}
  @description An generic error status which is reached when loading an XML document has failed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavingStatus.html Online Api}
  @description This status is active while data is being sent to the server.
  @extends bcdui.core.Status
*/
bcdui.core.status.SavingStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavingStatus.html Online Api}
  @description This status is active while data is being sent to the server.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavedStatus.html Online Api}
  @description This status is reached after data has been sent to the server.
  @extends bcdui.core.Status
*/
bcdui.core.status.SavedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SavedStatus.html Online Api}
  @description This status is reached after data has been sent to the server.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SaveFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SaveFailedStatus.html Online Api}
  @description An error status indicating that a save operation has failed.
  @extends bcdui.core.Status
*/
bcdui.core.status.SaveFailedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SaveFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.SaveFailedStatus.html Online Api}
  @description An error status indicating that a save operation has failed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadedStatus.html Online Api}
  @description This status is used by the TransformationChain to signal that the chain document has finished loading.
  @extends bcdui.core.Status
*/
bcdui.core.status.ChainLoadedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadedStatus.html Online Api}
  @description This status is used by the TransformationChain to signal that the chain document has finished loading.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForParametersStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForParametersStatus.html Online Api}
  @description A status which is active as long as a transformation is waiting for its parameter DataProviders to become ready. If a transformation remains too long in this status, one of its, check why its paramaters or input model did not become ready.
  @extends bcdui.core.Status
*/
bcdui.core.status.WaitingForParametersStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForParametersStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForParametersStatus.html Online Api}
  @description A status which is active as long as a transformation is waiting for its parameter DataProviders to become ready. If a transformation remains too long in this status, one of its, check why its paramaters or input model did not become ready.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformingStatus.html Online Api}
  @description The status indicating that an (XSLT) transformation is currently being executed.
  @extends bcdui.core.Status
*/
bcdui.core.status.TransformingStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformingStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformingStatus.html Online Api}
  @description The status indicating that an (XSLT) transformation is currently being executed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformFailedStatus.html Online Api}
  @description This status is activated when a transformation failed.
  @extends bcdui.core.Status
*/
bcdui.core.status.TransformFailedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformFailedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformFailedStatus.html Online Api}
  @description This status is activated when a transformation failed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformedStatus.html Online Api}
  @description This status is activated when a transformation is finished. A transformation is successfully finished in this status.
  @extends bcdui.core.Status
*/
bcdui.core.status.TransformedStatus = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformedStatus.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.TransformedStatus.html Online Api}
  @description This status is activated when a transformation is finished. A transformation is successfully finished in this status.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadingFailed.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadingFailed.html Online Api}
  @description An error state reached when the loading of the chain document has failed.
  @extends bcdui.core.Status
*/
bcdui.core.status.ChainLoadingFailed = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadingFailed.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainLoadingFailed.html Online Api}
  @description An error state reached when the loading of the chain document has failed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainStylesheetLoadingFailed.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainStylesheetLoadingFailed.html Online Api}
  @description This error state is activated when one of the style sheets referenced in the chain document could not be loaded.
  @extends bcdui.core.Status
*/
bcdui.core.status.ChainStylesheetLoadingFailed = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainStylesheetLoadingFailed.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.ChainStylesheetLoadingFailed.html Online Api}
  @description This error state is activated when one of the style sheets referenced in the chain document could not be loaded.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdaters.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdaters.html Online Api}
  @description A status indicating that the model is executing the model updaters are auto-updating after   their target model has changed.
  @extends bcdui.core.Status
*/
bcdui.core.status.RefreshingModelUpdaters = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdaters.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdaters.html Online Api}
  @description A status indicating that the model is executing the model updaters are auto-updating after their target model has changed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdatersCausedByExecute.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdatersCausedByExecute.html Online Api}
  @description A status indicating that the model is executing the model updaters are auto-updating after   their target model has been executed.
  @extends bcdui.core.Status
*/
bcdui.core.status.RefreshingModelUpdatersCausedByExecute = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdatersCausedByExecute.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.RefreshingModelUpdatersCausedByExecute.html Online Api}
  @description A status indicating that the model is executing the model updaters are auto-updating after their target model has been executed.
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForUncomittedChanges.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForUncomittedChanges.html Online Api}
  @description This status is activated when there are outstanding writes on the dataprovider
  @extends bcdui.core.Status
*/
bcdui.core.status.WaitingForUncomittedChanges = class extends bcdui.core.Status{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForUncomittedChanges.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.status.WaitingForUncomittedChanges.html Online Api}
  @description This status is activated when there are outstanding writes on the dataprovider
  @extends bcdui.core.Status
    */
  constructor(){ super(); }
  getCode() {}
  getDescription() {}
  equals() {}
  toString() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html Online Api}
  @description This is a data provider showing the user a prompt on each execute() and returning the value the user has entered. It is mainly intended for debugging.
  @extends bcdui.core.DataProvider
*/
bcdui.core.PromptDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {object} args
  @param {string} [args.name]  Title provided to the user when the input box pops up.
  @param {id} [args.id]  Globally unique id for use in declarative contexts
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html Online Api}
  @description This is a data provider showing the user a prompt on each execute() and returning the value the user has entered. It is mainly intended for debugging.
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getReadyStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.PromptDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html Online Api}
  @description A data provider for constant values. This is especially useful to set values for the xsl:param elements of a {@link bcdui.core.TransformationChain TransformationChain} subclass.
  @extends bcdui.core.DataProvider
*/
bcdui.core.ConstantDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {object} args  paramater map
  @param {id} [args.id]  Globally unique id for use in declarative contexts
  @param {string} [args.name]  The name of the data provider. This name should be unique within the scopt it is used, however it is not required to globally unique
  @param {(string|number|boolean|object)} args.value  The data
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html Online Api}
  @description A data provider for constant values. This is especially useful to set values for the xsl:param elements of a {@link bcdui.core.TransformationChain TransformationChain} subclass.
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getData Online Api}
  @description Getter for the value passed to the constructor.
  @overrides bcdui.core.DataProvider#getData
  @return {*} The data provided in the constructor of this instance.
  */
  getData() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ConstantDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html Online Api}
  @description This acts as a holder for the real DataProvider and behaves like a DataProvider itself. It is possible to instantiate this even without a source, we then only become ready, once a source was set and became ready. Use this if a DataProvider or even its type is not known in the moment you need it as a parameter. If we are executed, we pass through it directly or once out source is added later.  We mirror our source's state but reduce them to only initialized and loaded = ready.
  @extends bcdui.core.DataProvider
*/
bcdui.core.DataProviderHolder = class extends bcdui.core.DataProvider{
  /**
  @param {object} [args]  The argument map
  @param {bcdui.core.DataProvider} [args.source]  The data provider to be wrapped, unless set later via {@link bcdui.core.DataProviderHolder#setSource}
  @param {string} [id]  id
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html Online Api}
  @description This acts as a holder for the real DataProvider and behaves like a DataProvider itself. It is possible to instantiate this even without a source, we then only become ready, once a source was set and became ready. Use this if a DataProvider or even its type is not known in the moment you need it as a parameter. If we are executed, we pass through it directly or once out source is added later. We mirror our source's state but reduce them to only initialized and loaded = ready.
  @extends bcdui.core.DataProvider
    */
  constructor(args, id){ super(args, id); }
  getClassName() {}
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#read Online Api}
  @description Reads value from a given xPath (or optionally return default value)
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if nothing found and no defaultValue supplied or when source isn't set yet)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr1" and there is already "/n:Root/n:MyElem@attr1", then ""/n:Root/n:MyElem" will be "re-used" and get a second attribute attr1. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format.
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node (can be null if source isn't set yet or dataProvider isn't ready)
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#remove Online Api}
  @description removes given xPath
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails or source isn't set yet
  */
  query(xPath) { console.log(xPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails or source isn't set yet
  */
  queryNodes(xPath) { console.log(xPath); }
  getReadyStatus() {}
  getData() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#setSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#setSource Online Api}
  @description Set the underlying source delayed instead of via the constructor. The DataProviderHolder does only become ready after the source was set and is or becomes ready.
  */
  setSource() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHolder.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html Online Api}
  @description This class is a wrapper for a DataProvider giving it a new name (not id) and reducing its states to only initialized and loaded. It is useful for renaming a DataProvider before passing it to a TransformationChain so that a DataProvider can be mapped to an arbitrary xsl:param element. where the bcdui.core.DataProviderAlias' name is used as the xsl:param's name
  @extends bcdui.core.DataProviderHolder
*/
bcdui.core.DataProviderAlias = class extends bcdui.core.DataProviderHolder{
  /**
  @param {object} args  The argument map taking two mandatory parameters:
  @param {bcdui.core.DataProvider} args.source  The data provider to be wrapped
  @param {string} args.name  The new name of the data provider
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html Online Api}
  @description This class is a wrapper for a DataProvider giving it a new name (not id) and reducing its states to only initialized and loaded. It is useful for renaming a DataProvider before passing it to a TransformationChain so that a DataProvider can be mapped to an arbitrary xsl:param element. where the bcdui.core.DataProviderAlias' name is used as the xsl:param's name
  @extends bcdui.core.DataProviderHolder
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#read Online Api}
  @description Reads value from a given xPath (or optionally return default value)
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProviderHolder#read
  @overrides bcdui.core.DataProviderHolder#read
  @return text value stored at xPath (or null if nothing found and no defaultValue supplied or when source isn't set yet)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr1" and there is already "/n:Root/n:MyElem@attr1", then ""/n:Root/n:MyElem" will be "re-used" and get a second attribute attr1. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format.
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProviderHolder#write
  @overrides bcdui.core.DataProviderHolder#write
  @return The xPath's node (can be null if source isn't set yet or dataProvider isn't ready)
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#remove Online Api}
  @description removes given xPath
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProviderHolder#remove
  @overrides bcdui.core.DataProviderHolder#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#query
  @overrides bcdui.core.DataProviderHolder#query
  @return single node or null if query fails or source isn't set yet
  */
  query(xPath) { console.log(xPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#queryNodes
  @overrides bcdui.core.DataProviderHolder#queryNodes
  @return node list or empty list if query fails or source isn't set yet
  */
  queryNodes(xPath) { console.log(xPath); }
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#setSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#setSource Online Api}
  @description Set the underlying source delayed instead of via the constructor. The DataProviderHolder does only become ready after the source was set and is or becomes ready.
  @inherits bcdui.core.DataProviderHolder#setSource
  @overrides bcdui.core.DataProviderHolder#setSource
  */
  setSource() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProviderHolder#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProviderHolder#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProviderHolder#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProviderHolder#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProviderHolder#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProviderHolder#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProviderHolder#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProviderHolder#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProviderHolder#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProviderHolder#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProviderHolder#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProviderHolder#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProviderHolder#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProviderHolder#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProviderHolder#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProviderHolder#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProviderHolder#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProviderHolder#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProviderHolder#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderAlias.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html Online Api}
  @description Reading a single data item from an XPath on getData() as string. See {@link bcdui.core.DataProviderWithXPathNodes DataProviderWithXPathNodes} for reading a full XML node-set
  @extends bcdui.core.DataProviderHolder
*/
bcdui.core.DataProviderWithXPath = class extends bcdui.core.DataProviderHolder{
  /**
  @param {object} args
  @param {modelXPath} args.xPath  Data source like <code>"$modelId/guiStatus:MyNode/&commat;myAttr"</code>
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html Online Api}
  @description Reading a single data item from an XPath on getData() as string. See {@link bcdui.core.DataProviderWithXPathNodes DataProviderWithXPathNodes} for reading a full XML node-set
  @extends bcdui.core.DataProviderHolder
    */
  constructor(args){ super(args); }
  getClassName() {}
  getData() {}
  getXPath() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#read Online Api}
  @description Reads value from a given xPath (or optionally return default value)
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProviderHolder#read
  @overrides bcdui.core.DataProviderHolder#read
  @return text value stored at xPath (or null if nothing found and no defaultValue supplied or when source isn't set yet)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr1" and there is already "/n:Root/n:MyElem@attr1", then ""/n:Root/n:MyElem" will be "re-used" and get a second attribute attr1. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format.
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProviderHolder#write
  @overrides bcdui.core.DataProviderHolder#write
  @return The xPath's node (can be null if source isn't set yet or dataProvider isn't ready)
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#remove Online Api}
  @description removes given xPath
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProviderHolder#remove
  @overrides bcdui.core.DataProviderHolder#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#query
  @overrides bcdui.core.DataProviderHolder#query
  @return single node or null if query fails or source isn't set yet
  */
  query(xPath) { console.log(xPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#queryNodes
  @overrides bcdui.core.DataProviderHolder#queryNodes
  @return node list or empty list if query fails or source isn't set yet
  */
  queryNodes(xPath) { console.log(xPath); }
  getReadyStatus() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#setSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#setSource Online Api}
  @description Set the underlying source delayed instead of via the constructor. The DataProviderHolder does only become ready after the source was set and is or becomes ready.
  @inherits bcdui.core.DataProviderHolder#setSource
  @overrides bcdui.core.DataProviderHolder#setSource
  */
  setSource() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProviderHolder#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProviderHolder#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProviderHolder#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProviderHolder#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProviderHolder#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProviderHolder#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProviderHolder#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProviderHolder#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProviderHolder#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProviderHolder#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProviderHolder#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProviderHolder#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProviderHolder#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProviderHolder#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProviderHolder#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProviderHolder#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProviderHolder#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProviderHolder#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPath.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProviderHolder#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html Online Api}
  @description This class creates a static model with a top level element '<Root/>' and appends all  the elements that are found by xpath as children. Useful for be passing data as parameter to an XSLT transformation.  See {@link bcdui.core.DataProviderWithXPath DataProviderWithXPath} for reading a single value as a string
  @extends bcdui.core.DataProviderHolder
*/
bcdui.core.DataProviderWithXPathNodes = class extends bcdui.core.DataProviderHolder{
  /**
  @param {object} args
  @param {modelXPath} [args.xPath]  Data source like <code>"$modelId/guiStatus:MyNode/&commat;myAttr"</code>
  @param {bcdui.core.DataProvider} [args.source]  Optional source, which will override source reference from args.xPath
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html Online Api}
  @description This class creates a static model with a top level element '<Root/>' and appends all the elements that are found by xpath as children. Useful for be passing data as parameter to an XSLT transformation. See {@link bcdui.core.DataProviderWithXPath DataProviderWithXPath} for reading a single value as a string
  @extends bcdui.core.DataProviderHolder
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getData Online Api}
  @description The xpath is applied to dataElement with selectSingleNode, selectNodes doesnt work in firefox
  */
  getData() {}
  getXPath() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#read Online Api}
  @description Reads value from a given xPath (or optionally return default value)
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProviderHolder#read
  @overrides bcdui.core.DataProviderHolder#read
  @return text value stored at xPath (or null if nothing found and no defaultValue supplied or when source isn't set yet)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr1" and there is already "/n:Root/n:MyElem@attr1", then ""/n:Root/n:MyElem" will be "re-used" and get a second attribute attr1. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format.
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProviderHolder#write
  @overrides bcdui.core.DataProviderHolder#write
  @return The xPath's node (can be null if source isn't set yet or dataProvider isn't ready)
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#remove Online Api}
  @description removes given xPath
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProviderHolder#remove
  @overrides bcdui.core.DataProviderHolder#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#query
  @overrides bcdui.core.DataProviderHolder#query
  @return single node or null if query fails or source isn't set yet
  */
  query(xPath) { console.log(xPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#queryNodes
  @overrides bcdui.core.DataProviderHolder#queryNodes
  @return node list or empty list if query fails or source isn't set yet
  */
  queryNodes(xPath) { console.log(xPath); }
  getReadyStatus() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#setSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#setSource Online Api}
  @description Set the underlying source delayed instead of via the constructor. The DataProviderHolder does only become ready after the source was set and is or becomes ready.
  @inherits bcdui.core.DataProviderHolder#setSource
  @overrides bcdui.core.DataProviderHolder#setSource
  */
  setSource() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProviderHolder#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProviderHolder#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProviderHolder#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProviderHolder#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProviderHolder#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProviderHolder#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProviderHolder#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProviderHolder#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProviderHolder#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProviderHolder#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProviderHolder#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProviderHolder#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProviderHolder#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProviderHolder#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProviderHolder#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProviderHolder#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProviderHolder#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProviderHolder#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderWithXPathNodes.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProviderHolder#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html Online Api}
  @description This class creates a static model with a top level element '&lt;cust:Options/>' and appends all  the elements that are found by xpath as children (as element '&lt;cust:Option value="v" caption="x"/>').  Useful for be passing data as parameter to transformators.
  @extends bcdui.core.DataProviderHolder
*/
bcdui.core.OptionsDataProvider = class extends bcdui.core.DataProviderHolder{
  /**
  @param {object} args
  @param {modelXPath} args.optionsModelXPath  Data xPath with model reference, like <code>"$modelId/guiStatus:MyNode/&commat;myAttr"</code>, is treated as value+caption in case args.optionsModelRelativeValueXPath is NOT DEFINED or is treated as value only in case args.optionsModelRelativeValueXPath IS DEFINED.
  @param {xPath} [args.optionsModelRelativeValueXPath]  optional xPath relative to args.optionsModelXPath
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html Online Api}
  @description This class creates a static model with a top level element '&lt;cust:Options/>' and appends all the elements that are found by xpath as children (as element '&lt;cust:Option value="v" caption="x"/>'). Useful for be passing data as parameter to transformators.
  @extends bcdui.core.DataProviderHolder
    */
  constructor(args){ super(args); }
  getClassName() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#read Online Api}
  @description Reads value from a given xPath (or optionally return default value)
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProviderHolder#read
  @overrides bcdui.core.DataProviderHolder#read
  @return text value stored at xPath (or null if nothing found and no defaultValue supplied or when source isn't set yet)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr1" and there is already "/n:Root/n:MyElem@attr1", then ""/n:Root/n:MyElem" will be "re-used" and get a second attribute attr1. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format.
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProviderHolder#write
  @overrides bcdui.core.DataProviderHolder#write
  @return The xPath's node (can be null if source isn't set yet or dataProvider isn't ready)
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#remove Online Api}
  @description removes given xPath
  @param {string} xPath  xPath pointing to value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProviderHolder#remove
  @overrides bcdui.core.DataProviderHolder#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#query
  @overrides bcdui.core.DataProviderHolder#query
  @return single node or null if query fails or source isn't set yet
  */
  query(xPath) { console.log(xPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @inherits bcdui.core.DataProviderHolder#queryNodes
  @overrides bcdui.core.DataProviderHolder#queryNodes
  @return node list or empty list if query fails or source isn't set yet
  */
  queryNodes(xPath) { console.log(xPath); }
  getReadyStatus() {}
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#setSource) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#setSource Online Api}
  @description Set the underlying source delayed instead of via the constructor. The DataProviderHolder does only become ready after the source was set and is or becomes ready.
  @inherits bcdui.core.DataProviderHolder#setSource
  @overrides bcdui.core.DataProviderHolder#setSource
  */
  setSource() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProviderHolder#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProviderHolder#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProviderHolder#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProviderHolder#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProviderHolder#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProviderHolder#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProviderHolder#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProviderHolder#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProviderHolder#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProviderHolder#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProviderHolder#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProviderHolder#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProviderHolder#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProviderHolder#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProviderHolder#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProviderHolder#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProviderHolder#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProviderHolder#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.OptionsDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProviderHolder#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html Online Api}
  @description Turns a DataProvider into a URL provider for SimpleModel.<p/> We do reflect the status of the requestModel transparently as we are just glueware. If the requestModel becomes invalid or throws dataModification, we do also become not-ready and stay so.  Even if the requestModel becomes ready again, we stay until we are executed unless args.isAutoRefresh = true is set.
  @example
  <-- <pre> -->
  // Load a SimpleModel from a static Wrs requestvar requestString =   "&lt;WrsRequest xmlns=\"http://www.businesscode.de/schema/bcdui/wrs-request-1.0.0\" xmlns:f=\"http://www.businesscode.de/schema/bcdui/filter-1.0.0\">" +  "  &lt;Select>"+  "    &lt;Columns> &lt;C bRef='region'/> &lt;/Columns>"+  "    &lt;From> &lt;BindingSet>md_geo</BindingSet> &lt;/From>"+  "    &lt;f:Filter> &lt;f:Expression bRef='country' op='=' value='US'/> &lt;/f:Filter>"+  "    &lt;Grouping> &lt;C bRef='region'/> &lt;/Grouping>"+  "  &lt;/Select>"+  "&lt;/WrsRequest>";var myRequestModel = new bcdui.core.StaticModel( requestString );var myUrlProvider  = new bcdui.core.RequestDocumentDataProvider({ requestModel: myRequestModel });var geoModel       = new bcdui.core.SimpleModel({ url: myUrlProvider, isAutoRefresh: true});geoModel.execute();// Once geoModel.isReady() === true, it will hold region data for 'US'// Somewhat latermyRequestModel.getData().selectSingleNode("/wrq:WrsRequest/wrq:Select/f:Filter/f:Expression[@bRef='country']/@value").nodeValue = "FR";myRequestModel.fire();// It will auto-reload and once geoModel.isReady() === true, it will hold region data for 'FR'
  <-- </pre> -->
  @extends bcdui.core.DataProvider
*/
bcdui.core.RequestDocumentDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args  Parameter object
  @param {bcdui.core.DataProvider} [args.requestModel]  A DataProvider providing a request, for example a wrs:WrsRequest
  @param {string} [args.url]  URL to load the data from, use this or args.requestModel.
  @param {(string|bcdui.core.DataProvider)} [args.modelUrl]  When using args.requestModel, this is a string or string- DataProvider with the URL which to send the requestModel result to
  @param {string} [args.uri]  uri extension as a suffix to .url to tag requests, must not start with '/'. This parameter is ineffective if .modelUrl or .url is provided.
  @param {id} [args.id]  Globally unique id for use in declarative contexts
  @param {boolean} [args.isAutoRefresh]  If true, this DataProvider will always update itself when the requestDoc changes (without the need for execute) and fire a data modification event If used as a urlProvider from a {@link bcdui.core.SimpleModel SimpleModel}, it inherits its isAutoRefresh
  @param {boolean} [args.attachSessionHash]  Logical name of this DataProvider when used as a parameter in a transformation
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation, locally unique
  @param {string} [args.method]  Request method for SimpleModel, either "POST" or "GET"
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html Online Api}
  @description Turns a DataProvider into a URL provider for SimpleModel.<p/> We do reflect the status of the requestModel transparently as we are just glueware. If the requestModel becomes invalid or throws dataModification, we do also become not-ready and stay so. Even if the requestModel becomes ready again, we stay until we are executed unless args.isAutoRefresh = true is set.
  @example
  <-- <pre> -->
  // Load a SimpleModel from a static Wrs requestvar requestString =   "&lt;WrsRequest xmlns=\"http://www.businesscode.de/schema/bcdui/wrs-request-1.0.0\" xmlns:f=\"http://www.businesscode.de/schema/bcdui/filter-1.0.0\">" +  "  &lt;Select>"+  "    &lt;Columns> &lt;C bRef='region'/> &lt;/Columns>"+  "    &lt;From> &lt;BindingSet>md_geo</BindingSet> &lt;/From>"+  "    &lt;f:Filter> &lt;f:Expression bRef='country' op='=' value='US'/> &lt;/f:Filter>"+  "    &lt;Grouping> &lt;C bRef='region'/> &lt;/Grouping>"+  "  &lt;/Select>"+  "&lt;/WrsRequest>";var myRequestModel = new bcdui.core.StaticModel( requestString );var myUrlProvider  = new bcdui.core.RequestDocumentDataProvider({ requestModel: myRequestModel });var geoModel       = new bcdui.core.SimpleModel({ url: myUrlProvider, isAutoRefresh: true});geoModel.execute();// Once geoModel.isReady() === true, it will hold region data for 'US'// Somewhat latermyRequestModel.getData().selectSingleNode("/wrq:WrsRequest/wrq:Select/f:Filter/f:Expression[@bRef='country']/@value").nodeValue = "FR";myRequestModel.fire();// It will auto-reload and once geoModel.isReady() === true, it will hold region data for 'FR'
  <-- </pre> -->
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getData() {}
  getReadyStatus() {}
  getStatus() {}
  isReady() {}
  setIsAutoRefresh() {}
  markAsDirty() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.RequestDocumentDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html Online Api}
  @description A DataProvider retrieving its content on getData() from an attribute in the HTML DOM tree.
  @example
  //<pre>
  &lt;div id="myDiv" attr="123">&lt;/div>&lt;script type="text/javascript">  var dp = new bcdui.core.DataProviderHtmlAttribute({ htmlElementId: 'myDiv', attributeName: 'attr'});  console.log(dp.getData());&lt;/script>
  //</pre>
  @extends bcdui.core.DataProvider
*/
bcdui.core.DataProviderHtmlAttribute = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args
  @param {string} args.htmlElementId
  @param {string} args.attributeName
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html Online Api}
  @description A DataProvider retrieving its content on getData() from an attribute in the HTML DOM tree.
  @example
  //<pre>
  &lt;div id="myDiv" attr="123">&lt;/div>&lt;script type="text/javascript">  var dp = new bcdui.core.DataProviderHtmlAttribute({ htmlElementId: 'myDiv', attributeName: 'attr'});  console.log(dp.getData());&lt;/script>
  //</pre>
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getData() {}
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.DataProviderHtmlAttribute.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html Online Api}
  @description A StringDataProvider provides a plain string via getData()
  @extends bcdui.core.DataProvider
*/
bcdui.core.StringDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args
  @param {string} args.value  The data
  @param {id} [args.id]  Globally unique id for use in declarative contexts
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation, locally unique
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html Online Api}
  @description A StringDataProvider provides a plain string via getData()
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getReadyStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#setData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#setData Online Api}
  @description Assign a new value
  @param {string} value  The new value
  */
  setData(value) { console.log(value); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#toString Online Api}
  @description Debugging function showing a text for this model.
  @overrides bcdui.core.DataProvider#toString
  @return {string} A summary of the model.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StringDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html Online Api}
  @description Allows providing a custom js callback function returning a value.
  @extends bcdui.core.DataProvider
*/
bcdui.core.JsDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args  The parameter map contains the following properties:
  @param {function} args.callback  The callback providing the data
  @param {boolean} [args.doAllwaysRefresh]  If true, each getData() calls the callback, otherwise only execute() will do.
  @param {id} [args.id]  Globally unique id for use in declarative contexts
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation, locally unique
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html Online Api}
  @description Allows providing a custom js callback function returning a value.
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getReadyStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.JsDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html Online Api}
  @description Allows providing a js callback function for deferred execution which has to execute .setData(data) on provided instance once data is available.<p/> As all DataProviders, AsyncJsDataProvider will not become ready until data is available, i.e. until the callback has delivered data for the first time. This leaves the callback time to do asynchronous data requests against a server for example.
  @extends bcdui.core.DataProvider
*/
bcdui.core.AsyncJsDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param args  The parameter map contains the following properties:
  @param {function} args.callback  The callback providing the data; gets args object with 'setData' function to call once data is available.
  @param {id} [args.id]  A globally unique id for use in declarative contexts
  @param {string} [args.name]  Logical name of this DataProvider when used as a parameter in a transformation, locally unique
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html Online Api}
  @description Allows providing a js callback function for deferred execution which has to execute .setData(data) on provided instance once data is available.<p/> As all DataProviders, AsyncJsDataProvider will not become ready until data is available, i.e. until the callback has delivered data for the first time. This leaves the callback time to do asynchronous data requests against a server for example.
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  _executeImpl() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#setData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#setData Online Api}
  @description To be called by the callback once data is available. Sets data and transits this dataproviders state to .getReadyStatus() and fires data updated event
  @param {*} data
  */
  setData(data) { console.log(data); }
  getReadyStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AsyncJsDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html Online Api}
  @description This is the base class for Model classes which support the usage of {@link bcdui.core.ModelUpdater ModelUpdaters}. Model updaters are executed on each data modification event.
  @description This class is abstract and not meant to be instantiated directly
  @extends bcdui.core.DataProvider
*/
bcdui.core.AbstractUpdatableModel = class extends bcdui.core.DataProvider{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html Online Api}
  @description This is the base class for Model classes which support the usage of {@link bcdui.core.ModelUpdater ModelUpdaters}. Model updaters are executed on each data modification event.
  @description This class is abstract and not meant to be instantiated directly
  @extends bcdui.core.DataProvider
    */
  constructor(){ super(); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @overrides bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @overrides bcdui.core.DataProvider#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AbstractUpdatableModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html Online Api}
  @description This class represents the standard case of a model where the loaded from a specified URL. Its document can be accessed   via {@link bcdui.core.SimpleModel#getData myModel.getData()}. Javascript and {@link bcdui.core.Modelupdater Modelupdaters} can modify the data.   Data loading is triggered by {@link bcdui.core.AbstractExecutable#execute myModel.execute()} The constructor of the model takes only one property besides the mandatory "id" property (defined in AbstractExecutable) in its args parameter map namely the "url" property. It specifies the URL the XML document represented by this model should be loaded from. The parameter isAutoRefresh=true forces a reload if the DataProvider has changed. If not text/plain, (derived or via mimeType), the data is parsed.  <table>    <tr><th>file extension</th><th>value</th><th>Result</th></tr>    <tr><td>*.json</td><td>"application/json"</td><td>are turned into a js object</li>    <tr><td>*.js</td><td>"application/javascript"</td><td>are loaded and executed</li>    <tr><td>*.xml, .xsl, .xslt</td><td>"application/xml", "application/xslt+xml"</td><td>are parsed into DOM</li>  </table>  All other content is just loaded as plain text.
  @example
  //<pre>
  // Load plain content and use it in a renderervar bookModel = new bcdui.core.SimpleModel( "../docs/allBooks.xml" );var renderer  = new bcdui.core.Renderer({ targetHtml: "booksDiv", chain: "renderer.xslt", inputModel: bookModel });
  //</pre>
  @example
  //<pre>
  // Load a model using a Wrs request document from Wrs servletvar myModel = new bcdui.core.SimpleModel({ id  : "myModel", url : new bcdui.core.RequestDocumentDataProvider({ url: "requestDoc.xml"}) });myModel.execute();
  //</pre>
  @extends bcdui.core.AbstractUpdatableModel
*/
bcdui.core.SimpleModel = class extends bcdui.core.AbstractUpdatableModel{
  /**
  @param {(string|SimpleModelParam)} args  An url for the data or an argument map {@link SimpleModelParam}
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html Online Api}
  @description This class represents the standard case of a model where the loaded from a specified URL. Its document can be accessed via {@link bcdui.core.SimpleModel#getData myModel.getData()}. Javascript and {@link bcdui.core.Modelupdater Modelupdaters} can modify the data. Data loading is triggered by {@link bcdui.core.AbstractExecutable#execute myModel.execute()} The constructor of the model takes only one property besides the mandatory "id" property (defined in AbstractExecutable) in its args parameter map namely the "url" property. It specifies the URL the XML document represented by this model should be loaded from. The parameter isAutoRefresh=true forces a reload if the DataProvider has changed. If not text/plain, (derived or via mimeType), the data is parsed. <table> <tr><th>file extension</th><th>value</th><th>Result</th></tr> <tr><td>*.json</td><td>"application/json"</td><td>are turned into a js object</li> <tr><td>*.js</td><td>"application/javascript"</td><td>are loaded and executed</li> <tr><td>*.xml, .xsl, .xslt</td><td>"application/xml", "application/xslt+xml"</td><td>are parsed into DOM</li> </table> All other content is just loaded as plain text.
  @example
  //<pre>
  // Load plain content and use it in a renderervar bookModel = new bcdui.core.SimpleModel( "../docs/allBooks.xml" );var renderer  = new bcdui.core.Renderer({ targetHtml: "booksDiv", chain: "renderer.xslt", inputModel: bookModel });
  //</pre>
  @example
  //<pre>
  // Load a model using a Wrs request document from Wrs servletvar myModel = new bcdui.core.SimpleModel({ id  : "myModel", url : new bcdui.core.RequestDocumentDataProvider({ url: "requestDoc.xml"}) });myModel.execute();
  //</pre>
  @extends bcdui.core.AbstractUpdatableModel
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getReadyStatus Online Api}
  @description The SimpleModel reaches its ready status when the XML document has been loaded from the URL and the optional model updates have run. The document can then be retrieved with the "getDataDoc" method. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td rowspan="10">&nbsp;</td><td style="border: 3px double black; text-align: center" colspan="2"> {@link bcdui.core.status.InitializedStatus InitializedStatus}  </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> Loading </i>                                             </td><td style="padding-left: 20px"> If it is not ready execute URL data provider (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> URLAvailable                                             </td><td style="padding-left: 20px"> The URL data provider is ready, start loading data. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loaded                                                   </td><td style="padding-left: 20px"> The data has been loaded from the URL. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> RefreshingModelUpdaters                                  </td><td style="padding-left: 20px"> ModelUpdaters are currently running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td rowspan="5" style="padding: 5px 0px 5px 5px"><div style="height: 6em; width: 0.5em; border-left: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black">&nbsp;</div></td><td style="border: 3px double black; text-align: center" colspan="2"> <b>{@link bcdui.core.status.TransformedStatus TransformedStatus}</b></td><td style="padding-left: 20px"> All model updaters have run. (<b>ready</b>) </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Saving                                                   </td><td style="padding-left: 20px"> The posting of data will start. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> {@link bcdui.core.status.SavedStatus SavedStatus}        </td><td style="padding-left: 20px"> The data has been posted to the server.  </td></tr></table></p>
  @overrides bcdui.core.AbstractUpdatableModel#getReadyStatus
  @return {bcdui.core.Status} The ready state of the document.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getFailedStatus Online Api}
  @description Returns the list of status objects indicating that something has failed.
  @overrides bcdui.core.AbstractUpdatableModel#getFailedStatus
  @return {Array} The array of failure {@link bcdui.core.Status} objects.
  */
  getFailedStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#toString Online Api}
  @description Debugging function showing a text for this model.
  @overrides bcdui.core.AbstractUpdatableModel#toString
  @return {string} A summary of the model.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.AbstractUpdatableModel#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.AbstractUpdatableModel#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.AbstractUpdatableModel#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.AbstractUpdatableModel#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.AbstractUpdatableModel#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.AbstractUpdatableModel#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.AbstractUpdatableModel#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.AbstractUpdatableModel#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.AbstractUpdatableModel#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.AbstractUpdatableModel#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.AbstractUpdatableModel#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.AbstractUpdatableModel#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.AbstractUpdatableModel#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.AbstractUpdatableModel#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.AbstractUpdatableModel#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.AbstractUpdatableModel#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.AbstractUpdatableModel#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.AbstractUpdatableModel#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.AbstractUpdatableModel#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.AbstractUpdatableModel#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.AbstractUpdatableModel#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.AbstractUpdatableModel#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.SimpleModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.AbstractUpdatableModel#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html Online Api}
  @description Creates a model from fixed data without accessing the network.</p> As opposed to most DataProviders, execute() of a StaticModel is guaranteed to be synchronous except when using model updaters. Note that this implies that it is only static once the page is fully loaded {@link bcdui.core.ready()} <ol>   <li> execute() is called after {@link bcdui.core.ready()} was reached, because otherwise model updaters may still register themselves</li>   <li> at the time of .execute() no model updaters were registered for this model, because model updaters operate asynchronously</li> </ol>
  @description Create a StaticModel and provide the data.
  @example
  <-- <pre> -->
  // Provide data as a {@link bcdui.core.DataProvider DataProvider}var myModel = new bcdui.core.StaticModel( "<Root myAttr='Test'></Root>" );myModel.execute();var myAttr = myModel.getData().selectSingleNode("/Root/@myAttr").nodeValue;
  <-- </pre> -->
  @example
  <-- <pre> -->
  // Provide data as a {@link bcdui.core.DataProvider DataProvider} with an id or use in a declarative contextvar myModel = new bcdui.core.StaticModel({ id: "dayModel", data: "<Values> <V>Mon</V> <V>Wed</V> </Values>" });myModel.execute();bcdui.widgetNg.createSingleSelect({ targetHtml: "selectDayHtml", optionsModelXPath: "$dayModel/Values/V", targetModelXPath: "$guiStatus/guiStatus:Status/guiStatus:SelectedDay/@value" });
  <-- </pre> -->
  @extends bcdui.core.AbstractUpdatableModel
*/
bcdui.core.StaticModel = class extends bcdui.core.AbstractUpdatableModel{
  /**
  @param {(string|StaticModelParam|DomDocument)} args  And XML string, which is parsed, an XML Document or a JSON object or any other kind of data
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html Online Api}
  @description Creates a model from fixed data without accessing the network.</p> As opposed to most DataProviders, execute() of a StaticModel is guaranteed to be synchronous except when using model updaters. Note that this implies that it is only static once the page is fully loaded {@link bcdui.core.ready()} <ol> <li> execute() is called after {@link bcdui.core.ready()} was reached, because otherwise model updaters may still register themselves</li> <li> at the time of .execute() no model updaters were registered for this model, because model updaters operate asynchronously</li> </ol>
  @description Create a StaticModel and provide the data.
  @example
  <-- <pre> -->
  // Provide data as a {@link bcdui.core.DataProvider DataProvider}var myModel = new bcdui.core.StaticModel( "<Root myAttr='Test'></Root>" );myModel.execute();var myAttr = myModel.getData().selectSingleNode("/Root/@myAttr").nodeValue;
  <-- </pre> -->
  @example
  <-- <pre> -->
  // Provide data as a {@link bcdui.core.DataProvider DataProvider} with an id or use in a declarative contextvar myModel = new bcdui.core.StaticModel({ id: "dayModel", data: "<Values> <V>Mon</V> <V>Wed</V> </Values>" });myModel.execute();bcdui.widgetNg.createSingleSelect({ targetHtml: "selectDayHtml", optionsModelXPath: "$dayModel/Values/V", targetModelXPath: "$guiStatus/guiStatus:Status/guiStatus:SelectedDay/@value" });
  <-- </pre> -->
  @extends bcdui.core.AbstractUpdatableModel
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getReadyStatus Online Api}
  @description <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> RefreshingModelUpdaters </i>                             </td><td style="padding-left: 20px"> ModelUpdaters are currently running. (<i>execute</i>) </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The data XML document has been generated. (<b>ready</b>)  </td></tr></table></p>
  @overrides bcdui.core.AbstractUpdatableModel#getReadyStatus
  @return {bcdui.core.Status} The ready state of the document.
  */
  getReadyStatus() {}
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#toString Online Api}
  @description Debugging function showing a text for this model.
  @overrides bcdui.core.AbstractUpdatableModel#toString
  @return {string} A summary of the model.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.AbstractUpdatableModel#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.AbstractUpdatableModel#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.AbstractUpdatableModel#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.AbstractUpdatableModel#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.AbstractUpdatableModel#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.AbstractUpdatableModel#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.AbstractUpdatableModel#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.AbstractUpdatableModel#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.AbstractUpdatableModel#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.AbstractUpdatableModel#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.AbstractUpdatableModel#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.AbstractUpdatableModel#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.AbstractUpdatableModel#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.AbstractUpdatableModel#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.AbstractUpdatableModel#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.AbstractUpdatableModel#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.AbstractUpdatableModel#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.AbstractUpdatableModel#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.AbstractUpdatableModel#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.AbstractUpdatableModel#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.AbstractUpdatableModel#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.AbstractUpdatableModel#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.AbstractUpdatableModel#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.StaticModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.AbstractUpdatableModel#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html Online Api}
  @description An AutoModel is an easy way for loading data from a BindingSet in many cases. At minimum just provide the BindingSet id and a list of bRefs.
  @example
  //<pre>
  // Create a simple AutoModel, reading distinct bindingItems 'country', 'region' and 'city' from BindingSet 'md_geo'var am = new bcdui.core.AutoModel({ bindingSetId: "md_geo", bRefs: "country region city", isDistinct: true, filterElement: "country='DE'" });
  //</pre>
  @extends bcdui.core.SimpleModel
*/
bcdui.core.AutoModel = class extends bcdui.core.SimpleModel{
  /**
  @param {Object} args  The parameter map contains the following properties. Most parameters only apply when using default wrq-stylesheet.
  @param {string} args.bindingSetId  Id of BindingSet to read from.
  @param {string} args.bRefs  Space separated list of bRefs to be loaded.
  @param {string} [args.filterBRefs]  Space separated list of bRefs in $guiStatus f:Filter to be used as filters. TODO: add static
  @param {string} [args.orderByBRefs]  Space separated list of bRefs that will be used to order the data. This ordering has a higher priority over possible auto ordering by useCaptions or isDistinct. A minus(-) sign at the end indicates descending sorting.
  @param {string} [args.initialFilterBRefs]  Space separated list of bRefs in $guiStatus f:Filter to be used as filters for initial, very first request only. Unlike filterBRefs, these filter values are not monitored for changes.
  @param {string} [args.mandatoryFilterBRefsSubset]  Space separated subset of bRefs that needs to be set before the AutoModel gets data. Until available, no request will be run.
  @param {boolean} [args.isDistinct]  If true, a group-by across all columns is generated. Parameter .groupByBRefs is ignored in this case.
  @param {boolean} [args.useCaptions]  If true, &commat;bRef+'_caption' will be used as bRef for the caption.
  @param {modelXPath} [args.additionalFilterXPath]  Allows using additional filters not part of $guiStatus f:Filter. These filters are monitored for changes. The given xPath needs to point to the filter expression itself, not to a parent.
  @param {modelXPath} [args.additionalPassiveFilterXPath]  Optional, allows using additional filters not part of $guiStatus f:Filter, unlike 'additionalFilterXPath', this xPath is not monitored for changes.
  @param {number} [args.maxRows]  Optional, limits the request to n rows. Use distinct if you need a certain order.
  @param {string} [args.id]  A globally unique id for use in declarative contexts
  @param {boolean} [args.isAutoRefresh]  If true, will reload when any (other) filter regarding a bRefs or the additionalFilterXPath change.
  @param {Object} [args.reqDocParameters]  Optional parameters for a custom request document builder.
  @param {Array} [args.reqDocChain]  Optional custom chain for request document builder.
  @param {bcdui.core.DataProvider} [args.statusModel]  the status model to resolve .filterBRefs against
  @param {bcdui.core.DataProvider} [args.statusModelEstablished]  the established status model to provide to ModelWrapper creating request document as 'statusModelEstablished' parameter
  @param {string} [args.groupByBRefs]  Space separated list of bRefs for grouping. Is not effective when using .isDistinct=true parameter.
  @param {(DomDocument|DomElement|string)} [args.filterElement]  custom filter element (f:And, f:Or, f:Not, f:Expression) in wrs-filter format, see filter-1.0.0.xsd or a string as required by {@link bcdui.wrs.wrsUtil.parseFilterExpression} or the result of it - note that the function allows filling in values without escaping issues if the filter is not fixed.
  @param {Object} [args.saveOptions]  An object, with the following elements
  @param {chainDef} [args.saveOptions.saveChain]  The definition of the transformation chain
  @param {Object} [args.saveOptions.saveParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @param {boolean} [args.saveOptions.reload]  Useful especially for models of type SimpleModel for refreshing from server after save
  @param {function} [args.saveOptions.onSuccess]  Callback after saving (and optionally reloading) was successfully finished
  @param {function} [args.saveOptions.onFailure]  Callback on failure, is called if error occurs
  @param {function} [args.saveOptions.onWrsValidationFailure]  Callback on serverside validate failure, if omitted the onFailure is used in case of validation failures
  @param {bcdui.core.DataProvider} [args.saveOptions.urlProvider]  DataProvider holding the request url (by default taken from the underlying simple model url)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html Online Api}
  @description An AutoModel is an easy way for loading data from a BindingSet in many cases. At minimum just provide the BindingSet id and a list of bRefs.
  @example
  //<pre>
  // Create a simple AutoModel, reading distinct bindingItems 'country', 'region' and 'city' from BindingSet 'md_geo'var am = new bcdui.core.AutoModel({ bindingSetId: "md_geo", bRefs: "country region city", isDistinct: true, filterElement: "country='DE'" });
  //</pre>
  @extends bcdui.core.SimpleModel
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getReadyStatus Online Api}
  @description The SimpleModel reaches its ready status when the XML document has been loaded from the URL and the optional model updates have run. The document can then be retrieved with the "getDataDoc" method. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td rowspan="10">&nbsp;</td><td style="border: 3px double black; text-align: center" colspan="2"> {@link bcdui.core.status.InitializedStatus InitializedStatus}  </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> Loading </i>                                             </td><td style="padding-left: 20px"> If it is not ready execute URL data provider (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> URLAvailable                                             </td><td style="padding-left: 20px"> The URL data provider is ready, start loading data. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loaded                                                   </td><td style="padding-left: 20px"> The data has been loaded from the URL. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> RefreshingModelUpdaters                                  </td><td style="padding-left: 20px"> ModelUpdaters are currently running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td rowspan="5" style="padding: 5px 0px 5px 5px"><div style="height: 6em; width: 0.5em; border-left: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black">&nbsp;</div></td><td style="border: 3px double black; text-align: center" colspan="2"> <b>{@link bcdui.core.status.TransformedStatus TransformedStatus}</b></td><td style="padding-left: 20px"> All model updaters have run. (<b>ready</b>) </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Saving                                                   </td><td style="padding-left: 20px"> The posting of data will start. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> {@link bcdui.core.status.SavedStatus SavedStatus}        </td><td style="padding-left: 20px"> The data has been posted to the server.  </td></tr></table></p>
  @inherits bcdui.core.SimpleModel#getReadyStatus
  @overrides bcdui.core.SimpleModel#getReadyStatus
  @return {bcdui.core.Status} The ready state of the document.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getFailedStatus Online Api}
  @description Returns the list of status objects indicating that something has failed.
  @inherits bcdui.core.SimpleModel#getFailedStatus
  @overrides bcdui.core.SimpleModel#getFailedStatus
  @return {Array} The array of failure {@link bcdui.core.Status} objects.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#toString Online Api}
  @description Debugging function showing a text for this model.
  @inherits bcdui.core.SimpleModel#toString
  @overrides bcdui.core.SimpleModel#toString
  @return {string} A summary of the model.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.SimpleModel#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.SimpleModel#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.SimpleModel#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.SimpleModel#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.SimpleModel#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.SimpleModel#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.SimpleModel#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.SimpleModel#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.SimpleModel#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.SimpleModel#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.SimpleModel#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.SimpleModel#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.SimpleModel#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.SimpleModel#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.SimpleModel#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.SimpleModel#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.SimpleModel#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.SimpleModel#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.SimpleModel#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.SimpleModel#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.SimpleModel#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.SimpleModel#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.SimpleModel#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.AutoModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html Online Api}
  @description A class representing one or more transformations applied on models with parameters. Transformators can be js functions, XSLTs or doTjs templates. Use {@link bcdui.core.Renderer Renderer} or {@link bcdui.core.ModelWrapper ModelWrapper} as concrete sub classes
  @description The constructor for the TransformationChain class.
  @extends bcdui.core.DataProvider
*/
bcdui.core.TransformationChain = class extends bcdui.core.DataProvider{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html Online Api}
  @description A class representing one or more transformations applied on models with parameters. Transformators can be js functions, XSLTs or doTjs templates. Use {@link bcdui.core.Renderer Renderer} or {@link bcdui.core.ModelWrapper ModelWrapper} as concrete sub classes
  @description The constructor for the TransformationChain class.
  @extends bcdui.core.DataProvider
    */
  constructor(){ super(); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @overrides bcdui.core.DataProvider#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @overrides bcdui.core.DataProvider#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getDataProviderByName Online Api}
  @param {String} name
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.TransformationChain.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, inserting its output into targetHtml. Renderer execute() automatically on creation, and as usual execute their dependencies (i.e. parameters) automatically.
  @extends bcdui.core.TransformationChain
*/
bcdui.core.Renderer = class extends bcdui.core.TransformationChain{
  /**
  @param {Object} args  An argument object with the following properties:
  @param {chainDef} args.chain  The definition of the transformation chain <ul> <li>a single string with the URL of the transformation XSLT or doTjs template</li> <li>or a JS transformator function</li> <li>or an array with a mixture of URLs and JS transformators</li> <li>or a DataProvider with an XML document following xsd http://www.businesscode.de/schema/bcdui/chain-1.0.0</li> </ul> Make sure the last transformation outputs html, for example in case of XSLT set the last stylesheet to &lt;xsl:output method="html"
  @param {bcdui.core.DataProvider} args.inputModel  The model with the data to be transformed in html
  @param {targetHtmlRef} [args.targetHtml]  A reference to the HTML DOM Element where to put the output
  @param {Object} [args.parameters]  An object, where each property holds a DataProvider as a transformation parameter Once this Renderer is {@link bcdui.core.AbstractExecutable#execute executed}, it will check each parameter and execute it if it is not {@link bcdui.core.AbstractExecutable .isReady()} before executing itself.
  @param {string} [args.id]  Globally unique id for use in declarative contexts
  @param {boolean} [args.suppressInitialRendering]  If true, the renderer does not initially auto execute but waits for an explicit execute
  @param {function} [args.postHtmlAttachProcess]  synchronous js function called after attaching html fragment to dom (either partitially or fully)
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, inserting its output into targetHtml. Renderer execute() automatically on creation, and as usual execute their dependencies (i.e. parameters) automatically.
  @extends bcdui.core.TransformationChain
    */
  constructor(args){ super(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @overrides bcdui.core.TransformationChain#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.TransformationChain#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.TransformationChain#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.TransformationChain#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.TransformationChain#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.TransformationChain#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.TransformationChain#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.TransformationChain#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.TransformationChain#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.TransformationChain#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.TransformationChain#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.TransformationChain#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.TransformationChain#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.TransformationChain#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.TransformationChain#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.TransformationChain#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.TransformationChain#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.TransformationChain#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.TransformationChain#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.TransformationChain#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.TransformationChain#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.TransformationChain#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.TransformationChain#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.TransformationChain#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.TransformationChain#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.TransformationChain#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.TransformationChain#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.TransformationChain#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.TransformationChain#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.Renderer.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.TransformationChain#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, being a DataProvider itself, providing the transformed input.
  @extends bcdui.core.TransformationChain
*/
bcdui.core.ModelWrapper = class extends bcdui.core.TransformationChain{
  /**
  @param {Object} args  An argument object with the following properties:
  @param {chainDef} args.chain  The definition of the transformation chain <ul> <li>a single string with the URL of the transformation XSLT or doTjs template</li> <li>or a JS transformator function</li> <li>or an array with a mixture of URLs and JS transformators</li> <li>or a DataProvider with an XML document following xsd http://www.businesscode.de/schema/bcdui/chain-1.0.0</li> </ul>
  @param {bcdui.core.DataProvider} args.inputModel  The model with the data to be transformed
  @param {Object} [args.parameters]  An object, where each property holds a DataProvideras a transformation parameter Once this ModelWapper is {@link bcdui.core.AbstractExecutable#execute executed}, it will check each parameter and execute it, if it is not {@link bcdui.core.AbstractExecutable .isReady()}
  @param {string} [args.id]  Globally unique id for use in declarative contexts
  @param {bcdui.core.DataProvider} [args.statusModel]  custom model to use as 'guiStatus' parameter
  @param {bcdui.core.DataProvider} [args.statusModelEstablished]  custom model to use as 'guiStatusEstablished' parameter
  @param {Object} [args.saveOptions]  An object, with the following elements
  @param {chainDef} [args.saveOptions.saveChain]  The definition of the transformation chain
  @param {Object} [args.saveOptions.saveParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @param {boolean} [args.saveOptions.reload]  Useful especially for models of type SimpleModel for refreshing from server after save
  @param {function} [args.saveOptions.onSuccess]  Callback after saving (and optionally reloading) was successfully finished
  @param {function} [args.saveOptions.onFailure]  Callback on failure, is called if error occurs
  @param {function} [args.saveOptions.onWrsValidationFailure]  Callback on serverside validate failure, if omitted the onFailure is used in case of validation failures
  @param {bcdui.core.DataProvider} [args.saveOptions.urlProvider]  dataprovider holding the request url, this is mandatory for saving
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, being a DataProvider itself, providing the transformed input.
  @extends bcdui.core.TransformationChain
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.TransformationChain#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.TransformationChain#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.TransformationChain#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.TransformationChain#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.TransformationChain#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.TransformationChain#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.TransformationChain#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.TransformationChain#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.TransformationChain#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.TransformationChain#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.TransformationChain#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.TransformationChain#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.TransformationChain#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.TransformationChain#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.TransformationChain#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.TransformationChain#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.TransformationChain#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.TransformationChain#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.TransformationChain#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.TransformationChain#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.TransformationChain#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.TransformationChain#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.TransformationChain#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.TransformationChain#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.TransformationChain#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.TransformationChain#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.TransformationChain#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.TransformationChain#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.TransformationChain#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelWrapper.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.TransformationChain#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, replacing its targetModel's content with the result of the transformation applied to it. Can be applied to all concrete subclasses of {@link bcdui.core.AbstractUpdatableModel AbstractUpdatableModel},  like {@link bcdui.core.StaticModel StaticModel} or {@link bcdui.core.SimpleModel SimpleModel} Technically, this is a bcdui.core.TransformationChain object but it should not be executed, fired, modified or read from directly.
  @extends bcdui.core.TransformationChain
*/
bcdui.core.ModelUpdater = class extends bcdui.core.TransformationChain{
  /**
  @param {Object} args  An argument object with the following properties:
  @param {chainDef} args.chain  The definition of the transformation chain <ul> <li>a single string with the URL of the transformation XSLT or doTjs template</li> <li>or a JS transformator function</li> <li>or an array with a mixture of URLs and JS transformators</li> <li>or a DataProvider with an XML document following xsd http://www.businesscode.de/schema/bcdui/chain-1.0.0</li> </ul>
  @param {bcdui.core.DataProvider} args.targetModel  The model to be transformed and replaced
  @param {Object} [args.parameters]  An object, where each property holds a DataProvider, used as a transformation parameters. Once this ModelUpdater is {@link bcdui.core.AbstractExecutable#execute executed}, it will check each parameter and execute it, if it is not {@link bcdui.core.AbstractExecutable#isReady .isReady()}
  @param {boolean} [args.autoUpdate]  A boolean value indicating if the ModelUpdater should run on every change in the targetModel. Can be a data modification event or if targetModel again reaches the ready status. If autoUpdate is false a model updater only runs when the targetModel is (re)executed.
  @param {string} [args.id]  Globally unique id for use in declarative contexts
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html Online Api}
  @description A concrete subclass of {@link bcdui.core.TransformationChain TransformationChain}, replacing its targetModel's content with the result of the transformation applied to it. Can be applied to all concrete subclasses of {@link bcdui.core.AbstractUpdatableModel AbstractUpdatableModel}, like {@link bcdui.core.StaticModel StaticModel} or {@link bcdui.core.SimpleModel SimpleModel} Technically, this is a bcdui.core.TransformationChain object but it should not be executed, fired, modified or read from directly.
  @extends bcdui.core.TransformationChain
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.TransformationChain#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.TransformationChain#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.TransformationChain#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.TransformationChain#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.TransformationChain#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.TransformationChain#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.TransformationChain#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.TransformationChain#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.TransformationChain#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.TransformationChain#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.TransformationChain#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.TransformationChain#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.TransformationChain#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.TransformationChain#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.TransformationChain#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.TransformationChain#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.TransformationChain#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.TransformationChain#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.TransformationChain#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.TransformationChain#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.TransformationChain#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.TransformationChain#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.TransformationChain#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.TransformationChain#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.TransformationChain#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.TransformationChain#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.TransformationChain#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.TransformationChain#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.TransformationChain#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.ModelUpdater.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.TransformationChain#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html Online Api}
  @description Support for auto-refreshing a {bcdui.core.DataProvider} in the background and detecting, if new data is available.<br/> After trying to reload every periodSec, args.modifiedIf to see, if new data was sent.<br/> * If the server sent an 'expires' header in the future, our re-load attempts will not even go to the server but be fullfilled from the cache.<br/> * If the server sent a 304, we keep using the latest data sent from server.<br/> Both is supported for example by DataRefreshedFilter for example. Once new data was received from the server, args.onModified will be executed.
  @example
  //<pre>
  let arModel = myCube.getPrimaryModel().getPrimaryModel();new bcdui.core.lifecycle.AutoRefresh({ model: arModel });
  //</pre>
  */
bcdui.core.lifecycle.AutoRefresh = class {
  /**
  @param {Object} args  The parameter map contains the following properties:
  @param {bcdui.core.DataProvider} args.model  Model to monitor for updates by calling execute(true) and checking with modifiedIf
  @param {number} [args.periodSec]  Period in sec how often to query the server
  @param {(boolean|function)} [args.activeIf]  Boolean or function to determine whether we should check for model updates, queries all periodSec. Also see strategies below
  @param {(boolean|function)} [args.modifiedIf]  Function called (with the current AutoRefresh as param) to check whether model was updated. Also see strategies below
  @param {function} [args.onModified]  Function called (with the current AutoRefresh as param) when new model data is available. Also see strategies below
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html Online Api}
  @description Support for auto-refreshing a {bcdui.core.DataProvider} in the background and detecting, if new data is available.<br/> After trying to reload every periodSec, args.modifiedIf to see, if new data was sent.<br/> * If the server sent an 'expires' header in the future, our re-load attempts will not even go to the server but be fullfilled from the cache.<br/> * If the server sent a 304, we keep using the latest data sent from server.<br/> Both is supported for example by DataRefreshedFilter for example. Once new data was received from the server, args.onModified will be executed.
  @example
  //<pre>
  let arModel = myCube.getPrimaryModel().getPrimaryModel();new bcdui.core.lifecycle.AutoRefresh({ model: arModel });
  //</pre>
    */
  constructor(args){ console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html#isActive) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.lifecycle.AutoRefresh.html#isActive Online Api}
  @description Check whether we are still active according to args.activeIf
  */
  isActive() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.validationToolTip.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.validationToolTip.html Online Api}
  @description Tooltip for widget validation results
  @description Initializing tooltip widget
  */
bcdui.widget.validationToolTip = class {
  /**
  @param args
  @param args.id  option widget identifier
  @param args.targetModelId  identifier of model that should be tracked
  @param args.targetModelXPath  xpath of model that should be tracked
  @param args.containerHtmlElement  html container with binded control
  @param args.validateWrapperUrl  xstl transformation which implement concrete validation logic
  @param args.validateWrapperParameters  parameters that should be passed to validateWrapper
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.validationToolTip.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.validationToolTip.html Online Api}
  @description Tooltip for widget validation results
  @description Initializing tooltip widget
    */
  constructor(args){ console.log(args); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html Online Api}
  @description <p>   This class represents a DOM event which can be stored for later use,   especially in a timeout function. It encapsulates the event functionality   provided by prototype.js, but it is not destroyed when the event has   finished. Instead it can be kept to invoke the event handler later. </p> <p>   A use case for this event object is for example a delayed tooltip   appearing for example 200 ms after the mouse over event has occurred. </p>
  */
bcdui.widget.DetachedEvent = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html Online Api}
  @description <p> This class represents a DOM event which can be stored for later use, especially in a timeout function. It encapsulates the event functionality provided by prototype.js, but it is not destroyed when the event has finished. Instead it can be kept to invoke the event handler later. </p> <p> A use case for this event object is for example a delayed tooltip appearing for example 200 ms after the mouse over event has occurred. </p>
    */
  constructor(){ console.log(); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#element) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#element Online Api}
  @description Getter for the event origin element.
  @return {HtmlElement} The element that caused the event.
  */
  element() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointer) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointer Online Api}
  @description Getter for the coordinates the event has been triggered at.
  @return An object in the form \{ x: ##, y: ## \} holding the x and y positionwhere the event has been triggered.
  */
  pointer() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointerX) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointerX Online Api}
  @description Getter for the X coordinate of the event.
  @return The X coordinate where the event has been triggered.
  */
  pointerX() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointerY) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#pointerY Online Api}
  @description Getter for the Y coordinate of the event.
  @return The Y coordinate where the event has been triggered.
  */
  pointerY() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#findAttribute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.DetachedEvent.html#findAttribute Online Api}
  @description A convenience wrapper for {@link bcdui.widget._findAttribute}.
  */
  findAttribute() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html Online Api}
  @description <p>   A utility class tracking mouse enter and leave events within a specified   parent element. It keeps track of the mouse movement and fires the event   as soon as the mouse does not move for a certain amount of time (default   200 ms). This is useful because when the function does a complex   computation like executing a tooltip XSLT it is not recommended to   execute it with every mouse move. </p> <p>   Please note that "onLeave" does NOT work on HTML table elements in FireFox. So   in this case the baseElement must be the DIV containing the table. </p> <p>   Example: </p> <pre>  new bcdui.widget.MouseTracker({            baseElement: $$("table.treeView")[0].up()          , delay: 1000          , onEnter: function(e) {              bcdui.log.isTraceEnabled() && bcdui.log.trace("row No: " + e.element().rowIndex);            }          , onLeave: function() {              bcdui.log.isTraceEnabled() && bcdui.log.trace("onLeave")            }          , filter: "tr"        }).start();  </pre>
  @description Creates a new mouse tracker instance. This instance is inactive until the {@link #start()} method is called. Then it tracks the mouse movement on the specified base element until the {@link #stop()} method is executed.
  */
bcdui.widget.MouseTracker = class {
  /**
  @param {Object} args  The argument map offers the following properties:
  @param {(HtmlElement|String)} args.baseElement  The id or HTML element that contains the sub-elements the mouse enter / leave events should be tracked on. It is recommended to use an HTML DIV element as base element.
  @param {function} [args.onEnter]  The function to be executed when an observed element is entered by the mouse pointer. This function gets an event parameter (of the type {@link bcdui.widget.DetachedEvent}) as argument.
  @param {function} [args.onLeave]  A function which is run when the mouse leaves an observed element. The function has no arguments.
  @param {String} [args.filter]  The tag name (or multiple pipe-separated tag names) that should be observed for the onEnter / onLeave events. It is often TD or TR so that moving the mouse over table cells / rows inside the base element is observed. If omitted every child element is observed.
  @param {integer} [args.delay]  The duration in milliseconds defining how long the events should be idle until the provided function is triggered. The default value is 200.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html Online Api}
  @description <p> A utility class tracking mouse enter and leave events within a specified parent element. It keeps track of the mouse movement and fires the event as soon as the mouse does not move for a certain amount of time (default 200 ms). This is useful because when the function does a complex computation like executing a tooltip XSLT it is not recommended to execute it with every mouse move. </p> <p> Please note that "onLeave" does NOT work on HTML table elements in FireFox. So in this case the baseElement must be the DIV containing the table. </p> <p> Example: </p> <pre> new bcdui.widget.MouseTracker({ baseElement: $$("table.treeView")[0].up() , delay: 1000 , onEnter: function(e) { bcdui.log.isTraceEnabled() && bcdui.log.trace("row No: " + e.element().rowIndex); } , onLeave: function() { bcdui.log.isTraceEnabled() && bcdui.log.trace("onLeave") } , filter: "tr" }).start(); </pre>
  @description Creates a new mouse tracker instance. This instance is inactive until the {@link #start()} method is called. Then it tracks the mouse movement on the specified base element until the {@link #stop()} method is executed.
    */
  constructor(args){ console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html#start) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html#start Online Api}
  @description Starts the observation of the base element. New instances of the MouseTracker object do not automatically start tracking so the start() method should be called on them.
  */
  start() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html#stop) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.MouseTracker.html#stop Online Api}
  @description Stops observing the base element for mouse enter / leave.
  */
  stop() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html Online Api}
  @description This listener is an abstract base class for XML listeners registered to a targetModel   and depending on the existence of a specific HTML element. When the HTML element disappears   the listener de-registers itself from the target model.
  */
bcdui.widget.XMLDataUpdateListener = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html Online Api}
  @description This listener is an abstract base class for XML listeners registered to a targetModel and depending on the existence of a specific HTML element. When the HTML element disappears the listener de-registers itself from the target model.
    */
  constructor(){ console.log(); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html#hasBeenUnRegistered) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html#hasBeenUnRegistered Online Api}
  @description Tests, if the class has already unregistered itself from its target model. This happens when the listener is called, but the HTML element it is assigned to has disappeared.
  @return {Boolean} True, if the class is unregistered.
  */
  hasBeenUnRegistered() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html#unregister) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.XMLDataUpdateListener.html#unregister Online Api}
  @description This method removes this listener from the targetModel. It is called by the {@link #callback} method when the listener is triggered and the HTML element has disappeared.
  */
  unregister() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html Online Api}
  @description Notificator component displaying user notifications
  */
bcdui.widget.notifications.Notificator = class {
  /**
  @param {Object} args  Parameter object
  @param {integer} [args.retainMessagesNumber]  number of messages to retain in viewable area
  @param {boolean} [args.attachMouseHandler]  if true, the mousehover/unhover will close the box
  @param {integer} [args.autoHideMs]  if greater 0, the box will autohide after that amount of ms, otherwise the box has to be closed manually
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html Online Api}
  @description Notificator component displaying user notifications
    */
  constructor(args){ console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#addMessage) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#addMessage Online Api}
  @description adds a message to notificator and displays notificator if appropriate
  @param {string} message  The message you want to display
  @param {string} [type]  The type of the message, use WARN or INFO
  @param {string} [anchorId]  If given the message will contain a link to that anchor)
  */
  addMessage(message,type,anchorId) { console.log(message,type,anchorId); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#removeAllMessages) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#removeAllMessages Online Api}
  @description removes all messages and hides notification window
  */
  removeAllMessages() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#displayNotificationBar) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#displayNotificationBar Online Api}
  @description displays notification bar rendering messages in the queue
  */
  displayNotificationBar() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#hideNotificationBar) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#hideNotificationBar Online Api}
  @description hides notification bar
  */
  hideNotificationBar() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#showNotificationBar) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.notifications.Notificator.html#showNotificationBar Online Api}
  @description shows notification bar
  */
  showNotificationBar() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.Menu.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.Menu.html Online Api}
  */
bcdui.widget.menu.Menu = class {
  /**
  @param args
  @param {(String|HtmlElement)} args.rootIdOrElement  root Node of the menu (ul)
  @param {String} args.name  name of the variable that stores the result of this constructor function
  @param {function} args.customConfigFunction  optional config function to override the default settings for an example see Menu.prototype.config
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.Menu.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.Menu.html Online Api}
    */
  constructor(args){ console.log(args); }
  getClassName() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuContainer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuContainer.html Online Api}
  @description MenuContainer
  */
bcdui.widget.menu.MenuContainer = class {
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuContainer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuContainer.html Online Api}
  @description MenuContainer
    */
  constructor(){ console.log(); }
  getClassName() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuItem.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuItem.html Online Api}
  @description Menu
  @extends bcdui.widget.menu.MenuContainer
*/
bcdui.widget.menu.MenuItem = class extends bcdui.widget.menu.MenuContainer{
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuItem.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widget.menu.MenuItem.html Online Api}
  @description Menu
  @extends bcdui.widget.menu.MenuContainer
    */
  constructor(){ super(); }
  getClassName() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html Online Api}
  @extends bcdui.core.DataProvider
*/
bcdui.core.HTML2XMLDataProvider = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args
  @param {String} args.id
  @param {String} args.name
  @param {(String|HtmlElement)} args.idOrElement
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html Online Api}
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getData() {}
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.core.HTML2XMLDataProvider.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.TreeSupport.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.TreeSupport.html Online Api}
  @description Tree support class providing item rendering, controls binding and onItemMoved handler
  */
bcdui.widgetNg.connectable.TreeSupport = class {
  /**
  @param {jQuery} container  The container
  @param {object} config  Options
  @param {boolean} [config.isDefaultCollapsed]  Initial state
  @param {string} config.levelNodeName  Local nodename of the level, i.e. "Level"
  @param {string} config.itemNodeName  Local nodename of the item, i.e. "Item"
  @param {string} config.valueAttrName  Attribute name of value attribute, i.e. "id"
  @param {string} config.captionAttrName  Attribute name of caption attribute, i.e. "caption"
  @param {number} [config.leftPaddingLevel]  Left padding in pixels per level depth
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.TreeSupport.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.connectable.TreeSupport.html Online Api}
  @description Tree support class providing item rendering, controls binding and onItemMoved handler
    */
  constructor(container, config){ console.log(container, config); }
  _buildAncestorPath() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.QuickEdit.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.QuickEdit.html Online Api}
  @description QuickEdit widget provides UI to edit Wrs row
  @example
  <-- <pre> -->
  <caption>HTML container for QuickEdit</caption>&lt;div id="formContainer">&lt;/div>
  <-- </pre> -->
  @example
  <-- <pre> -->
  <caption>Sample 1: static call</caption>jQuery("#formContainer").bcduiQuickEdit({  wrsDataProvider  : new bcdui.core.SimpleModel(), // some wrs data  rowId            : "R1"                          // i.e. first row});
  <-- </pre> -->
  @example
  <-- <pre> -->
  <caption>Sample 2: call edit form from Wrs grid rendering (default/htmlBuilder.xslt rendering)</caption>const targetHtml = jQuery(".grid-rendering");  // element for grid rendererconst wrsModel = new bcdui.core.SimpleModel(); // Wrs data model// default Wrs renderingconst wrsRendering = new bcdui.core.Renderer({ targetHtml, inputModel:wrsModel });// attach DOM event to open quickEdit on doubleclick on grid rowtargetHtml.on("dblclick", "[bcdrowident]", function(){  jQuery("&lt;div/>").appendTo(jQuery("#formContainer").empty()) // add DIV wrapper for repetitive rendering  .bcduiQuickEdit({    wrsDataProvider  : wrsModel,    rowId            : jQuery(this).attr("bcdrowident"), // current row identifier    callbackHandler  : (instance, type, args) => {       // our callback to process callbacks      if (type == "DISPOSE"){        wrsRendering.execute(); // refresh rendered grid on disposal of the form      }    }  });});
  <-- </pre> -->
  */
bcdui.widgetNg.QuickEdit = class {
  /**
  @param {object} args  the arguments
  @param {bcdui.core.DataProvider} args.wrsDataProvider  The dataProvider with Wrs document
  @param {string} args.rowId  the rowId to edit, the row with such ID must exist in the document already
  @param {targetHtmlRef} args.targetHtml  the targetHtml to render UI
  @param {object} [args.columnTypeWidgetRendererMap]  optional mapping for widget renderers mapped by 'type-name' of Wrs
  @param {QuickEdit~callbackHandler} [args.callbackHandler]  optional callback handler function. It is recommended to provide a handler to at least handle "DISPOSE" type, otherwise we just hide the widget and clean its targetHtml if user clicks on "close" button.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.QuickEdit.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.widgetNg.QuickEdit.html Online Api}
  @description QuickEdit widget provides UI to edit Wrs row
  @example
  <-- <pre> -->
  <caption>HTML container for QuickEdit</caption>&lt;div id="formContainer">&lt;/div>
  <-- </pre> -->
  @example
  <-- <pre> -->
  <caption>Sample 1: static call</caption>jQuery("#formContainer").bcduiQuickEdit({  wrsDataProvider  : new bcdui.core.SimpleModel(), // some wrs data  rowId            : "R1"                          // i.e. first row});
  <-- </pre> -->
  @example
  <-- <pre> -->
  <caption>Sample 2: call edit form from Wrs grid rendering (default/htmlBuilder.xslt rendering)</caption>const targetHtml = jQuery(".grid-rendering");  // element for grid rendererconst wrsModel = new bcdui.core.SimpleModel(); // Wrs data model// default Wrs renderingconst wrsRendering = new bcdui.core.Renderer({ targetHtml, inputModel:wrsModel });// attach DOM event to open quickEdit on doubleclick on grid rowtargetHtml.on("dblclick", "[bcdrowident]", function(){  jQuery("&lt;div/>").appendTo(jQuery("#formContainer").empty()) // add DIV wrapper for repetitive rendering  .bcduiQuickEdit({    wrsDataProvider  : wrsModel,    rowId            : jQuery(this).attr("bcdrowident"), // current row identifier    callbackHandler  : (instance, type, args) => {       // our callback to process callbacks      if (type == "DISPOSE"){        wrsRendering.execute(); // refresh rendered grid on disposal of the form      }    }  });});
  <-- </pre> -->
    */
  constructor(args){ console.log(args); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html Online Api}
  @description This class represents a chart. In many cases you use {@link bcdui.component.chart.XmlChart} and you have a config for the chart
  @extends bcdui.core.DataProvider
*/
bcdui.component.chart.Chart = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args  Parameter object:
  @param {targetHtmlRef} args.targetHtml  Where to place the chart
  @param {boolean} [args.suppressInitialRendering]  If true, the renderer does not initially auto execute but waits for an explicit execute
  @param {string} [args.id]  Page unique id for used in declarative contexts. If provided, the chart will register itself
  @param {boolean} [args.showAxes]  If false, no axes will be shown
  @param {string} [args.title]  Title
  @param {number} [args.width]  Overwrite the chart's auto-width derived from targetHtml
  @param {number} [args.height]  Overwrite the chart's auto-height derived from targetHtml
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html Online Api}
  @description This class represents a chart. In many cases you use {@link bcdui.component.chart.XmlChart} and you have a config for the chart
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setXAxis) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setXAxis Online Api}
  @description Defines x (horizontal) axis
  @param {Object} args  Parameter object
  @param {Array.<number>} [args.categories]  Distinct values, provide this or xValues
  @param {Array.<number>} [args.xValues]  Values for continuous axis for x-y charts
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  */
  setXAxis(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setYAxis1) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setYAxis1 Online Api}
  @description Defines left y axis
  @param {Object} args  Parameter object
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  @param {numeric} [args.minValueUser]  User set axis min value. Only used when below lowest actual value
  @param {numeric} [args.maxValueUser]  User set axis max value. Only used when above highest actual value
  @param {boolean} [args.showGrid]  If false, no horizontal grid is shown but only small lines next to the y-axis values
  */
  setYAxis1(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setYAxis2) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setYAxis2 Online Api}
  @description Defines right y axis
  @param {Object} args  Parameter object
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  @param {numeric} [args.minValueUser]  User set axis min value. Only used when below lowest actual value
  @param {numeric} [args.maxValueUser]  User set axis max value. Only used when above highest actual value
  */
  setYAxis2(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#addSeries) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#addSeries Online Api}
  @description Adds a data series to the chart
  @param {Object} args  Parameter object
  @param {integer} [args.yAxis1Or2]  1 for left and 2 for right axis
  @param {Array.<numeric>} [args.yData]  Data array or provide yDataInfo
  @param {DomNodeSet} [args.yDataInfo]  XML nodeset with data
  @param {Array.<numeric>} [args.sizeData]  2nd value for scattered charts
  @param {Array.<numeric>} [args.xValues]  For x-y charts
  @param {(integer|string)} [args.chartType]  Either name or numeric value for chart type
  @param {string} [args.rgb]  Color
  @param {string} [args.dashstyle]  Dash style
  @param {Array.<string>} [args.baseColors]  Colors defining the tones of the generated colors, for example in case of a pie chart
  @param {string} [args.caption]  Series caption
  @param {numeric} [args.width]  Line width</li>
  @param {(function|string)} [args.onClick]  Either a function or the name of a function
  @param {boolean} [args.toSeriesPercentage]  If true, each value is represented by its percentage value of the full series.
  */
  addSeries(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setStacked) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setStacked Online Api}
  @description Define series as being stacked
  @param {Object} args  map with
  @param {integer} args.axis  1 for left axis 2 for right one</li>
  @param {(integer|string)} args.chartType  Either name or numeric value for chart type
  @param {boolean} [args.asPercent]  Each series is calculated to its percentage of the sum if all series and shown as *100'%'
  @param {boolean} [args.isStacked]  Whether to stack or not
  */
  setStacked(args) { console.log(args); }
  _drawGridMainAxes() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#toString Online Api}
  @description Debugging function showing a text for this class.
  @overrides bcdui.core.DataProvider#toString
  @return {string} A summary of the class.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getData Online Api}
  @description Not implemented for Chart
  @overrides bcdui.core.DataProvider#getData
  @return null
  */
  getData() {}
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getPrimaryModel Online Api}
  @description Not implemented for Chart
  @return null
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.Chart.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html Online Api}
  @description A SVG drawer, drawing basic geometries
  @extends bcdui.component.chart.SVGVMLDrawer
*/
bcdui.component.chart.SVGDrawer = class extends bcdui.component.chart.SVGVMLDrawer{
  /**
  @param {Object} args  Parameter object
  @param {DomDocument} args.doc  Document for creating the SVG drawing
  @param {Object} [args.scale]  Default is no scaling \{ x: 1, y: 1\}
  @param {Object} [args.transform]  Default is no shifting \{ x: 0, y: 0 \}
  @param {function} [args.createToolTipCb]  Call back getting the source element, returning the tool tip HTML</li>
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html Online Api}
  @description A SVG drawer, drawing basic geometries
  @extends bcdui.component.chart.SVGVMLDrawer
    */
  constructor(args){ super(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#line) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#line Online Api}
  @description Draw a SVG line
  @param {Object} args  Parameter object
  @param {Array.<Array.<numeric>>} args.points  2 dimensional array with x,y points, args.points[0][0] being the first one</li>
  @param {string} [args.effect]  An effect to be used for areas. Possible values: linearGradient, radialPlate, linearRound, linearPlate
  @param {string} [args.rgb]  Line color
  @param {numeric} [args.width]  Line width
  @param {boolean} [args.isFilled]  Fill area
  @param {function} [args.onClick]  On click callback
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  */
  line(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#box) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#box Online Api}
  @description Draw a SVG box
  @param {Object} args  Parameter object
  @param {numeric} args.x  Left
  @param {numeric} args.y  Top
  @param {numeric} args.width  Width
  @param {numeric} args.height  Height
  @param {string} [args.effect]  An effect to be used for areas. Possible values: linearGradient, radialPlate, linearRound, linearPlate
  @param {string} [args.rgb]  Color
  @param {boolean} [args.isFilled]  Fill area
  @param {function} [args.onClick]  On click callback
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  */
  box(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#arc) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#arc Online Api}
  @description Draw a SVG arc
  @param {Object} args  Parameter object
  @param {numeric} args.x  Center
  @param {numeric} args.y  Center
  @param {numeric} args.radius  Radius
  @param {numeric} args.start  Start
  @param {numeric} args.end  End
  @param {string} [args.effect]  An effect to be used for areas. Possible values: linearGradient, radialPlate, linearRound, linearPlate
  @param {numeric} [args.percWidth]  Inner radius
  @param {string} [args.rgb]  Fill color
  @param {string} [args.stroke]  Border color
  @param {boolean} [args.isFilled]  Fill area
  @param {function} [args.onClick]  On click callback
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  */
  arc(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#circle) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#circle Online Api}
  @description Draw a SVG circle
  @param {Object} args  Parameter object
  @param {numeric} args.x  Center
  @param {numeric} args.y  Center
  @param {numeric} args.radius  Radius
  @param {string} [args.effect]  An effect to be used for areas. Possible values: linearGradient, radialPlate, linearRound, linearPlate
  @param {string} [args.rgb]  Color
  @param {boolean} [args.isFilled]  Fill area
  @param {function} [args.onClick]  On click callback
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  */
  circle(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#text) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#text Online Api}
  @description Draw a SVG text
  @param {Object} args  Parameter object
  @param {numeric} args.x  Position
  @param {numeric} args.y  Position
  @param {string} args.text  The text
  @param {string} [args.cssClass]  A css class to be used
  @param {string} [args.align]  Possible values middle, end
  @param {string} [args.layoutFlow]  A css value lie vertical-ideographic
  */
  text(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#image) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#image Online Api}
  @description Draw an SVG image element
  @param {Object} args  Parameter object
  @param {numeric} args.x  Left
  @param {numeric} args.y  Top
  @param {numeric} args.width  Width
  @param {numeric} args.height  Height
  @param {string} [args.href]  The image
  @param {function} [args.onClick]  On click callback
  @param {Object} [args.addAttr]  A set of additional string attributes to be attached to the root element</li>
  */
  image(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#setTransScale) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#setTransScale Online Api}
  @description Set transform and scale
  @param {Object} args  parameter Object
  @param {Object} [args.scale]  Default is no scaling \{ x: 1, y: 1\}
  @param {Object} [args.transform]  Default is no shifting \{ x: 0, y: 0 \}
  @inherits bcdui.component.chart.SVGVMLDrawer#setTransScale
  @overrides bcdui.component.chart.SVGVMLDrawer#setTransScale
  */
  setTransScale(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#getResult) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.SVGDrawer.html#getResult Online Api}
  @description Returns the a DOM element containing the SVG drawing
  @inherits bcdui.component.chart.SVGVMLDrawer#getResult
  @overrides bcdui.component.chart.SVGVMLDrawer#getResult
  @return {Element} Returns the a DOM element containing the VML or SVG drawing
  */
  getResult() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html Online Api}
  @description Implements XML-definition interface. Extends the JS implementation of the Chart class allowing an XML definition model as input.
  @description Constructor of bcdui.component.XmlChart, called by prototype.
  @extends bcdui.component.chart.Chart
*/
bcdui.component.chart.XmlChart = class extends bcdui.component.chart.Chart{
  /**
  @param {Object} args  Parameter object
  @param {targetHtmlRef} args.targetHtml  Where to place the chart
  @param {bcdui.core.DataProvider} args.config  Definition if the chat according to Model with the chart definition according to XSD http://www.businesscode.de/schema/bcdui/charts-1.0.0
  @param {boolean} [args.suppressInitialRendering]  If true, the renderer does not initially auto execute but waits for an explicit execute
  @param {string} [args.id]  Page unique id for used in declarative contexts. If provided, the chart will register itself
  @param {boolean} [args.showAxes]  If false, no axes will be shown
  @param {string} [args.title]  Title
  @param {boolean} [args.suppressInitialRendering]  As every renderer, charts will execute and output itself automatically and their parameters after creation. This can be suppressed here.
  @param {number} [args.width]  Overwrite the chart's auto-width derived from targetHtml
  @param {number} [args.height]  Overwrite the chart's auto-height derived from targetHtml
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html Online Api}
  @description Implements XML-definition interface. Extends the JS implementation of the Chart class allowing an XML definition model as input.
  @description Constructor of bcdui.component.XmlChart, called by prototype.
  @extends bcdui.component.chart.Chart
    */
  constructor(args){ super(args); }
  getClassName() {}
  getData() {}
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setXAxis) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setXAxis Online Api}
  @description Defines x (horizontal) axis
  @param {Object} args  Parameter object
  @param {Array.<number>} [args.categories]  Distinct values, provide this or xValues
  @param {Array.<number>} [args.xValues]  Values for continuous axis for x-y charts
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  @inherits bcdui.component.chart.Chart#setXAxis
  @overrides bcdui.component.chart.Chart#setXAxis
  */
  setXAxis(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setYAxis1) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setYAxis1 Online Api}
  @description Defines left y axis
  @param {Object} args  Parameter object
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  @param {numeric} [args.minValueUser]  User set axis min value. Only used when below lowest actual value
  @param {numeric} [args.maxValueUser]  User set axis max value. Only used when above highest actual value
  @param {boolean} [args.showGrid]  If false, no horizontal grid is shown but only small lines next to the y-axis values
  @inherits bcdui.component.chart.Chart#setYAxis1
  @overrides bcdui.component.chart.Chart#setYAxis1
  */
  setYAxis1(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setYAxis2) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setYAxis2 Online Api}
  @description Defines right y axis
  @param {Object} args  Parameter object
  @param {string} [args.caption]  Axis caption
  @param {string} [args.unit]  Unit like € or sec. If '%', values are shown as percent. Use '% ' to show percent without dividing by 100
  @param {string} [args.layoutFlow]  css value
  @param {numeric} [args.minValueUser]  User set axis min value. Only used when below lowest actual value
  @param {numeric} [args.maxValueUser]  User set axis max value. Only used when above highest actual value
  @inherits bcdui.component.chart.Chart#setYAxis2
  @overrides bcdui.component.chart.Chart#setYAxis2
  */
  setYAxis2(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#addSeries) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#addSeries Online Api}
  @description Adds a data series to the chart
  @param {Object} args  Parameter object
  @param {integer} [args.yAxis1Or2]  1 for left and 2 for right axis
  @param {Array.<numeric>} [args.yData]  Data array or provide yDataInfo
  @param {DomNodeSet} [args.yDataInfo]  XML nodeset with data
  @param {Array.<numeric>} [args.sizeData]  2nd value for scattered charts
  @param {Array.<numeric>} [args.xValues]  For x-y charts
  @param {(integer|string)} [args.chartType]  Either name or numeric value for chart type
  @param {string} [args.rgb]  Color
  @param {string} [args.dashstyle]  Dash style
  @param {Array.<string>} [args.baseColors]  Colors defining the tones of the generated colors, for example in case of a pie chart
  @param {string} [args.caption]  Series caption
  @param {numeric} [args.width]  Line width</li>
  @param {(function|string)} [args.onClick]  Either a function or the name of a function
  @param {boolean} [args.toSeriesPercentage]  If true, each value is represented by its percentage value of the full series.
  @inherits bcdui.component.chart.Chart#addSeries
  @overrides bcdui.component.chart.Chart#addSeries
  */
  addSeries(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setStacked) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setStacked Online Api}
  @description Define series as being stacked
  @param {Object} args  map with
  @param {integer} args.axis  1 for left axis 2 for right one</li>
  @param {(integer|string)} args.chartType  Either name or numeric value for chart type
  @param {boolean} [args.asPercent]  Each series is calculated to its percentage of the sum if all series and shown as *100'%'
  @param {boolean} [args.isStacked]  Whether to stack or not
  @inherits bcdui.component.chart.Chart#setStacked
  @overrides bcdui.component.chart.Chart#setStacked
  */
  setStacked(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#toString Online Api}
  @description Debugging function showing a text for this class.
  @inherits bcdui.component.chart.Chart#toString
  @overrides bcdui.component.chart.Chart#toString
  @return {string} A summary of the class.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.component.chart.Chart#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.component.chart.Chart#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.component.chart.Chart#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.component.chart.Chart#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.component.chart.Chart#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.component.chart.Chart#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.component.chart.Chart#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.component.chart.Chart#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.component.chart.Chart#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.component.chart.Chart#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.component.chart.Chart#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.component.chart.Chart#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.component.chart.Chart#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.component.chart.Chart#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.component.chart.Chart#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.component.chart.Chart#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.component.chart.Chart#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.component.chart.Chart#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.component.chart.Chart#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.XmlChart.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html Online Api}
  @description Create a chart based on http://www.businesscode.de/schema/bcdui/charts-1.0.0 XML
  @extends bcdui.core.Renderer
*/
bcdui.component.chart.ChartEchart = class extends bcdui.core.Renderer{
  /**
  @param {Object} args  Parameter object:
  @param {targetHtmlRef} args.targetHtml  Where to place the chart
  @param {bcdui.core.DataProvider} args.config  Definition if the chart according to Model with the chart definition according to XSD http://www.businesscode.de/schema/bcdui/charts-1.0.0
  @param {Object} args.options  Options of ECharts, extending / being merged with the options deried from config
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html Online Api}
  @description Create a chart based on http://www.businesscode.de/schema/bcdui/charts-1.0.0 XML
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#.saveAsImage) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#.saveAsImage Online Api}
  @description Export an EChart as PNG
  @param targetHtml  Html element where the chart is found
  @param name  File name: name+".png"
  */
  saveAsImage(targetHtml,name) { console.log(targetHtml,name); }
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.chart.ChartEchart.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html Online Api}
  @description Creates a cube model, provides data with calculations and col dimensions applied
  @extends bcdui.core.ModelWrapper
*/
bcdui.component.cube.CubeModel = class extends bcdui.core.ModelWrapper{
  /**
  @param {Object} args  The parameter map contains the following properties:
  @param {bcdui.core.DataProvider} [args.config]  The model containing the cube meta data (see cube-2.0.0.xsd). If it is not present, the configuration at './cubeConfiguration.xml' is used
  @param {string} [args.cubeId]  When settings are to be derived from status model, this is the id in <cube:Layout cubeId="myCube">
  @param {string} [args.id]  The object's id, needed only when later accessing via id. If given the CubeModel registers itself at {@link bcdui.factory.objectRegistry}
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel, containing the filters as /SomeRoot/f:Filter and the layout definition at /SomeRoot//cube:Layout[&commat;cubeId=args.cubeId]
  @param {chainDef} [args.requestChain]  An alternative request building chain. Default here is /bcdui/js/component/cube/request.xslt.
  @param {Object} [args.requestParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html Online Api}
  @description Creates a cube model, provides data with calculations and col dimensions applied
  @extends bcdui.core.ModelWrapper
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.ModelWrapper#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.ModelWrapper#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.ModelWrapper#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.ModelWrapper#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.ModelWrapper#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.ModelWrapper#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.ModelWrapper#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.ModelWrapper#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.ModelWrapper#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.ModelWrapper#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.ModelWrapper#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.ModelWrapper#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.ModelWrapper#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.ModelWrapper#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.ModelWrapper#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.ModelWrapper#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.ModelWrapper#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.ModelWrapper#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.ModelWrapper#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.ModelWrapper#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.ModelWrapper#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.ModelWrapper#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.ModelWrapper#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.ModelWrapper#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.ModelWrapper#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.ModelWrapper#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.ModelWrapper#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.ModelWrapper#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.ModelWrapper#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.CubeModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.ModelWrapper#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html Online Api}
  @description Creates a cube front end based on given data or a configuration
  @extends bcdui.core.Renderer
*/
bcdui.component.cube.Cube = class extends bcdui.core.Renderer{
  /**
  @param args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  A reference to the HTML DOM Element where to put the output
  @param {bcdui.core.DataProvider} [args.config]  The model containing the cube's configuration (see cube-2.0.0.xsd). If it is not present, the configuration at './cubeConfiguration.xml' is used
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel (default is 'guiStatusEstablished'), containing the filters as /SomeRoot/f:Filter and the layout definition at /SomeRoot//cube:Layout[&commat;cubeId=args.cubeId]
  @param {bcdui.core.DataProvider} [args.detailExportFilterModel]  Use this to overwrite filters found in args.statusModel, default set to args.statusModel
  @param {string} [args.id]  The object's id, needed only when later accessing via id. If given the Cube registers itself at {@link bcdui.factory.objectRegistry}
  @param {chainDef} [args.chain]  An alternative rendering chain, See {@link bcdui.core.Renderer}. Default here is HtmlBuilder.
  @param {Object} [args.parameters]  An object, where each property holds a DataProvider being a renderer parameter used in custom chains
  @param {chainDef} [args.requestChain]  An alternative request building chain. Default here is /bcdui/js/component/cube/request.xslt.
  @param {Object} [args.requestParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html Online Api}
  @description Creates a cube front end based on given data or a configuration
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  getClassName() {}
  getConfigModel() {}
  getEnhancedConfiguration() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.cube.Cube.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html Online Api}
  @description Data provider implementation reading far:Configuration document and providing data according to it, you can use this model if you solely want to read data using far:Configuration.
  @extends bcdui.core.AsyncJsDataProvider
*/
bcdui.component.far.FarModel = class extends bcdui.core.AsyncJsDataProvider{
  /**
  @param {object} args  Parameter map contains the following properties:
  @param {bcdui.core.DataProvider} args.config  Configuration document from http://www.businesscode.de/schema/bcdui/far-1.0.0
  @param {string} [args.componentId]  An ID for the component, 'far' is the default. This is not the data provider's technical identifier, this ID is used as component identifer to support multiple components on single page, i.e. reuse same configuration.
  @param {bcdui.core.DataProvider} [args.statusModel]  The StatusModel, containing the filters at /SomeRoot/f:Filter
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html Online Api}
  @description Data provider implementation reading far:Configuration document and providing data according to it, you can use this model if you solely want to read data using far:Configuration.
  @extends bcdui.core.AsyncJsDataProvider
    */
  constructor(args){ super(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#setData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#setData Online Api}
  @description To be called by the callback once data is available. Sets data and transits this dataproviders state to .getReadyStatus() and fires data updated event
  @param {*} data
  @inherits bcdui.core.AsyncJsDataProvider#setData
  @overrides bcdui.core.AsyncJsDataProvider#setData
  */
  setData(data) { console.log(data); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.AsyncJsDataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.AsyncJsDataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.AsyncJsDataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.AsyncJsDataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.AsyncJsDataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.AsyncJsDataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.AsyncJsDataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.AsyncJsDataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.AsyncJsDataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.AsyncJsDataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.AsyncJsDataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.AsyncJsDataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.AsyncJsDataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.AsyncJsDataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.AsyncJsDataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.AsyncJsDataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.AsyncJsDataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.AsyncJsDataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.AsyncJsDataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.AsyncJsDataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.AsyncJsDataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.AsyncJsDataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.AsyncJsDataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.AsyncJsDataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.AsyncJsDataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getReadyStatus Online Api}
  @description Getter for the ready status of the instance. This status is a final state defined by each sub-class which is reached when the process has finished normally.
  @inherits bcdui.core.AbstractExecutable#getReadyStatus
  @return {bcdui.core.Status} The status object indicating that the process belongingto this class is finished.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.FarModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.Far.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.Far.html Online Api}
  @description A FAR component
  */
bcdui.component.far.Far = class {
  /**
  @param {object} args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  A reference to the HTML DOM Element where to render the output.
  @param {bcdui.core.DataProvider} args.config  Configuration document from http://www.businesscode.de/schema/bcdui/far-1.0.0
  @param {string} [args.componentId]  An ID for the component, 'far' is the default. This is not the data provider's technical identifier, this ID is used as component identifer to support multiple components on single page, i.e. reuse same configuration.
  @param {bcdui.core.DataProvider} [args.statusModel]  The StatusModel, containing the filters at /SomeRoot/f:Filter
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.Far.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.far.Far.html Online Api}
  @description A FAR component
    */
  constructor(args){ console.log(args); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html Online Api}
  @description Creates a scorecard-model from a scorecard definition, the scorecard model is derived {@link bcdui.core.DataProvider DataProvider} Format of scorecard definition is defined by XSD http://www.businesscode.de/schema/bcdui/scorecard-1.0.0  This scorecard does all calculations and also transposes data if necessary. It does not deal with any presentation part, though. See {@link bcdui.component.createScorecard} if you want a default scorecard rendering.
  @extends bcdui.core.DataProvider
*/
bcdui.component.scorecard.ScorecardModel = class extends bcdui.core.DataProvider{
  /**
  @param {Object} args  Parameter map contains the following properties:
  @param {bcdui.core.DataProvider} args.config  The scorecard definition
  @param {string} [args.id]  The id of the new object. If omitted the id is automatically generated
  @param {bcdui.core.DataProvider} [args.customParameter]  Custom parameters for usage in the custom aggregator and aspect transformations.</li>
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel, containing the filters at /SomeRoot/f:Filter
  @param {object} [args.parameters]  Custom parameters to be shared between all aggregators, aspects, etc.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html Online Api}
  @description Creates a scorecard-model from a scorecard definition, the scorecard model is derived {@link bcdui.core.DataProvider DataProvider} Format of scorecard definition is defined by XSD http://www.businesscode.de/schema/bcdui/scorecard-1.0.0  This scorecard does all calculations and also transposes data if necessary. It does not deal with any presentation part, though. See {@link bcdui.component.createScorecard} if you want a default scorecard rendering.
  @extends bcdui.core.DataProvider
    */
  constructor(args){ super(args); }
  getClassName() {}
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getData Online Api}
  @description 22) Final data is in internal mode and passed on getData()
  @overrides bcdui.core.DataProvider#getData
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.DataProvider#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.DataProvider#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.DataProvider#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.DataProvider#promptData
  */
  promptData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#toString Online Api}
  @description Useful for debugging.
  @inherits bcdui.core.DataProvider#toString
  @overrides bcdui.core.DataProvider#toString
  @return {string} A short string summary of this object.
  */
  toString() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.DataProvider#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.DataProvider#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.DataProvider#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.DataProvider#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.DataProvider#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.DataProvider#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.DataProvider#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.DataProvider#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.DataProvider#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.DataProvider#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.DataProvider#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.DataProvider#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.DataProvider#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.DataProvider#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.DataProvider#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.DataProvider#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#getFailedStatus Online Api}
  @description Getter for the list of error statuses of this class. This implementation returns an empty list.
  @inherits bcdui.core.AbstractExecutable#getFailedStatus
  @overrides bcdui.core.DataProvider#getFailedStatus
  @return {Array.<bcdui.core.Status>} The status objects corresponding to failures in the object'sprocess.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.DataProvider#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.DataProvider#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.ScorecardModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.DataProvider#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html Online Api}
  @description Creates a convenience standard scorecard renderer. You can create this with a configuration args.config or a {@link bcdui.component.scorecard.ScorecardModel} as args.input.   This renderer provides a default tooltip and supports default actions for detail-export, WSYIWYG export and detail-drill-over for a context menu Call these by triggering scorecardActions:[detailExport|reportExcelExport|drillToAnalysis] at the cell,  you may provide them with a custom 'chain' and 'chainParameters', see bcdRowIdent in default context menu as samples.
  @extends bcdui.core.Renderer
*/
bcdui.component.scorecard.Scorecard = class extends bcdui.core.Renderer{
  /**
  @param {Object} args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  The socrecard renderer's target html element.
  @param {bcdui.core.DataProvider} [args.inputModel]  The data of the scorecard model {@link bcdui.component.scorecard.ScorecardModel}. Provide args.config or args.inputModel
  @param {bcdui.core.DataProvider} [args.config]  The data of the scorecard configuration model according to XSD http://www.businesscode.de/schema/bcdui/scorecard-1.0.0 If given, an internal ScorecardModel based on the configuration data will be created. args.config it will be provided as 'scConfig' to the renderer chain. Provide args.config or args.inputModel
  @param {string} [args.id]  The id of the new object. If omitted the id is automatically generated.
  @param {chainDef} args.chain  An alternative rendering chain, See {@link bcdui.core.Renderer}. Default here is HtmlBuilder.
  @param {string} [args.tooltipUrl]  To overwrite default renderer xslt of the tooltip. An empty string will disable tooltips. Default is BCD-UI's default sc tooltip, which shows all attributes of a cell. To give a KPI an attribute, nest an scc:AspectRef into scc:AspectKpi in the scorecard definition.
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel, containing the filters at /SomeRoot/f:Filter, default is 'guiStatusEstablished'
  @param {bcdui.core.DataProvider} [args.customParameter]  Custom parameters for usage in custom aggregators, aspects and renderer as 'customParameter' parameter.</li>
  @param {Object} [args.parameters]  An object, where each property holds a DataProvider being a renderer parameter used in custom chains
  @param {(boolean|string)} [args.contextMenu]  If true, scorecard's default context menu is used, otherwise provide the url to your context menu xslt here.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html Online Api}
  @description Creates a convenience standard scorecard renderer. You can create this with a configuration args.config or a {@link bcdui.component.scorecard.ScorecardModel} as args.input. This renderer provides a default tooltip and supports default actions for detail-export, WSYIWYG export and detail-drill-over for a context menu Call these by triggering scorecardActions:[detailExport|reportExcelExport|drillToAnalysis] at the cell, you may provide them with a custom 'chain' and 'chainParameters', see bcdRowIdent in default context menu as samples.
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  getClassName() {}
  getConfigModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.scorecard.Scorecard.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html Online Api}
  @description Creates a GridModel
  @extends bcdui.core.SimpleModel
*/
bcdui.component.grid.GridModel = class extends bcdui.core.SimpleModel{
  /**
  @param {Object} args  The parameter map contains the following properties:
  @param {bcdui.core.DataProvider} [args.config]  The model containing the grid configuration data. If it is not present a SimpleModel with the url  './gridConfiguration.xml' is created.
  @param {string} [args.id]  The object's id, needed only when later accessing via id. If given the GridModel registers itself at {@link bcdui.factory.objectRegistry}
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel, containing the filters as /SomeRoot/f:Filter
  @param {chainDef} [args.saveChain]  The definition of the transformation chain
  @param {Object} [args.saveParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @param {chainDef} [args.validationChain]  The definition of the transformation chain
  @param {Object} [args.validationParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @param {chainDef} [args.loadChain]  The definition of the transformation chain
  @param {Object} [args.loadParameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @param {Object} [args.serverSidedPagination]  Set to true if you want to enable server sided pagination
  @param {bcdui.core.DataProvider} [args.pagerModel]  StatusModel of the pagination information
  @param {chainDef} [args.requestPostChain]  The definition of the transformation chain
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html Online Api}
  @description Creates a GridModel
  @extends bcdui.core.SimpleModel
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getReadyStatus Online Api}
  @description The SimpleModel reaches its ready status when the XML document has been loaded from the URL and the optional model updates have run. The document can then be retrieved with the "getDataDoc" method. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td rowspan="10">&nbsp;</td><td style="border: 3px double black; text-align: center" colspan="2"> {@link bcdui.core.status.InitializedStatus InitializedStatus}  </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> Loading </i>                                             </td><td style="padding-left: 20px"> If it is not ready execute URL data provider (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> URLAvailable                                             </td><td style="padding-left: 20px"> The URL data provider is ready, start loading data. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loaded                                                   </td><td style="padding-left: 20px"> The data has been loaded from the URL. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> RefreshingModelUpdaters                                  </td><td style="padding-left: 20px"> ModelUpdaters are currently running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td rowspan="5" style="padding: 5px 0px 5px 5px"><div style="height: 6em; width: 0.5em; border-left: 1px solid black; border-top: 1px solid black; border-bottom: 1px solid black">&nbsp;</div></td><td style="border: 3px double black; text-align: center" colspan="2"> <b>{@link bcdui.core.status.TransformedStatus TransformedStatus}</b></td><td style="padding-left: 20px"> All model updaters have run. (<b>ready</b>) </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Saving                                                   </td><td style="padding-left: 20px"> The posting of data will start. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> {@link bcdui.core.status.SavedStatus SavedStatus}        </td><td style="padding-left: 20px"> The data has been posted to the server.  </td></tr></table></p>
  @inherits bcdui.core.SimpleModel#getReadyStatus
  @overrides bcdui.core.SimpleModel#getReadyStatus
  @return {bcdui.core.Status} The ready state of the document.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getFailedStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getFailedStatus Online Api}
  @description Returns the list of status objects indicating that something has failed.
  @inherits bcdui.core.SimpleModel#getFailedStatus
  @overrides bcdui.core.SimpleModel#getFailedStatus
  @return {Array} The array of failure {@link bcdui.core.Status} objects.
  */
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#toString) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#toString Online Api}
  @description Debugging function showing a text for this model.
  @inherits bcdui.core.SimpleModel#toString
  @overrides bcdui.core.SimpleModel#toString
  @return {string} A summary of the model.
  */
  toString() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.SimpleModel#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.SimpleModel#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.SimpleModel#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.SimpleModel#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.SimpleModel#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.SimpleModel#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.SimpleModel#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.SimpleModel#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.SimpleModel#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.SimpleModel#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.SimpleModel#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.SimpleModel#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.SimpleModel#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.SimpleModel#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.SimpleModel#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.SimpleModel#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.SimpleModel#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.SimpleModel#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.SimpleModel#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.SimpleModel#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#execute Online Api}
  @description Executes the process implemented by the concrete sub-class.
  @param {boolean} [doesRefresh]  Set this parameter to "false" if this method should do nothing when the object is already in the ready status. The default is "true" meaning that the process is re-started when it is currently ready.
  @inherits bcdui.core.AbstractExecutable#execute
  @overrides bcdui.core.SimpleModel#execute
  */
  execute(doesRefresh) { console.log(doesRefresh); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.SimpleModel#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.SimpleModel#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.GridModel.html#getData Online Api}
  @description Access to the data of this DataProvider for read and modification access
  @inherits bcdui.core.DataProvider#getData
  @return {*} The data provided by the specific sub-class.
  */
  getData() {}

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html Online Api}
  @description Creates a grid front end based on given data or a configuration
  @extends bcdui.core.Renderer
*/
bcdui.component.grid.Grid = class extends bcdui.core.Renderer{
  /**
  @param args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  A reference to the HTML DOM Element where to put the output
  @param {bcdui.core.DataProvider} [args.config]  The model containing the grid configuration data. If it is not present a SimpleModel with the url  './gridConfiguration.xml' is created.
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel (default is 'guiStatusEstablished'), containing the filters as /SomeRoot/f:Filter
  @param {bcdui.core.DataProvider} [args.inputModel]  WRS or GridModel which is used, if not provided, it is generated out of the config. If provided, config is ignored unless it is set explicitly
  @param {string} [args.id]  The object's id, needed only when later accessing via id. If given the Grid registers itself at {@link bcdui.factory.objectRegistry}
  @param {Object} [args.hotArgs]  Arguments which are extended to handsontable creation
  @param {(string|chainDef)} [args.tooltipChain]  To overwrite default tooltip chain. An empty string will disable tooltips, otherwise the default gridTooltip.xslt is used
  @param {(boolean|string)} [args.contextMenu]  If true, grid's default context menu is used, otherwise provide the url to your context menu xslt here.
  @param {function} [args.customSave]  Custom save function
  @param {function} [args.afterAddRow]  Custom function(args) which is called after a row was added (args.rowNode, wrs row node which was added, args.headerMeta wrs header object)
  @param {chainDef} [args.saveChain]  A chain definition which is used for the grid saving operation
  @param {Object} [args.saveParameters]  Parameters for the saving chain
  @param {chainDef} [args.loadChain]  A chain definition which is used for the grid loading operation
  @param {Object} [args.loadParameters]  Parameters for the loading chain
  @param {chainDef} [args.validationChain]  A chain definition which is used for the validation operation. basic wrs and reference validation is given by default
  @param {Object} [args.validationParameters]  Parameters for the validation chain
  @param {boolean} [args.allowNewRows]  Allows inserting new rows via default contextMenu or drag/paste
  @param {boolean} [args.columnFilters]  Enable basic column filter input fields
  @param {integer} [args.maxHeight]  Set a maximum vertical size in pixel (only used when no handsontable height is set)
  @param {boolean} [args.isReadOnly]  Turn on viewer-only mode
  @param {boolean} [args.topMode]  Add/save/restore buttons appear at the top, pagination at bottom, insert row at top
  @param {boolean} [args.forceAddAtBottom]  Always add a new row at the bottom, no matter if topMode or pagination
  @param {boolean} [args.disableDeepKeyCheck]  Set this to true if you really want to disable the deep key check which is active if your grid is only a subset of the underlying table
  @param {function} [args.isReadOnlyCell]  Custom check function if a given cell is read only or not. Function gets gridModel, wrsHeaderMeta, rowId, colId and value as input and returns true if the cell becomes readonly
  @param {function} [args.columnFiltersGetCaptionForColumnValue]  Function which is used to determine the caption values for column filters. You need to customize this when you're e.g. using XML data in cells.
  @param {Object} [args.columnFiltersCustomFilter]  CustomColumnFilter functions passed to column filter
  @param {boolean} [args.defaultButtons]  Set to false if you want to hide the default buttons reset/delete/save
  @param {boolean} [args.serverSidedPagination]  Set to true if you want to enable server sided pagination
  @param {integer} [args.paginationSize]  Set pagination page size (and enable pagination)
  @param {boolean} [args.paginationAllPages]  Set pagination show all option (and enable pagination)
  @param {chainDef} [args.requestPostChain]  The definition of the transformation chain
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html Online Api}
  @description Creates a grid front end based on given data or a configuration
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  afterAddRow() {}
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#jumpToError) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#jumpToError Online Api}
  @description Jumps to the first error
  */
  jumpToError() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#jumpToRow) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#jumpToRow Online Api}
  @description Jumps to given row/col
  */
  jumpToRow() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#save) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#save Online Api}
  @description Save the modified data to the database
  */
  save() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#actionReset) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#actionReset Online Api}
  @description Drop all changes and load fresh data
  */
  actionReset() {}
  actionAddRow() {}
  getConfigModel() {}
  getEnhancedConfiguration() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.grid.Grid.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html Online Api}
  @description Creates an Uploader
  @extends bcdui.core.Renderer
*/
bcdui.component.docUpload.Uploader = class extends bcdui.core.Renderer{
  /**
  @param args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  A reference to the HTML DOM Element where to put the output
  @param {string} args.scope  The scope identifier
  @param {string} args.instance  The instance identifier
  @param {string} [args.id]  The object's id, needed only when later accessing via id. If given the docUpload registers itself at {@link bcdui.factory.objectRegistry}
  @param {string} [args.addBRefs]  Space separated list of additional bRefs you want to load
  @param {function} [args.onBeforeSave]  Function which is called before each save operation. Parameter holds current wrs dataprovider. Function needs to return true to save or false for skipping save process and resetting data
  @param {filterBRefs} [args.filterBRefs]  The space separated list of binding Refs that will be used in filter clause of request document
  @param {chainDef} [args.renderChain]  A custom renderer chain
  @param {Object} [args.renderParameters]  Renderer parameters. Will be enrichted with docUploader default parameters
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html Online Api}
  @description Creates an Uploader
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getUploadInfo) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getUploadInfo Online Api}
  @description returns an array with objects for each category of the current scope. in case of uploaded data it holds additional information like filename, size, url, comment, etc
  */
  getUploadInfo() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.docUpload.Uploader.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html Online Api}
  @description Creates a tree front end based on a configuration
  @extends bcdui.core.Renderer
*/
bcdui.component.tree.Tree = class extends bcdui.core.Renderer{
  /**
  @param args  The parameter map contains the following properties:
  @param {targetHtmlRef} args.targetHtml  A reference to the HTML DOM Element where to put the output
  @param {bcdui.core.DataProvider} [args.config]  The model containing the tree configuration data. If it is not present a SimpleModel with the url  './treeConfiguration.xml' is created.
  @param {bcdui.core.DataProvider} [args.statusModel]  StatusModel (default is 'guiStatus'), containing the filters as /SomeRoot/f:Filter and used to store tree expand/collapse status
  @param {string} [args.id]  The object's id, needed only when later accessing via id.
  @param {boolean} [args.persistent]  Tree expand/collapse status is stored
  @param {(boolean|string)} [args.contextMenu]  If true, tree's default context menu is used, otherwise provide the url to your context menu xslt here.
  @param {Object} [args.parameters]  An object, where each property holds a DataProvider, used as a transformation parameters.
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html Online Api}
  @description Creates a tree front end based on a configuration
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  _render() {}
  _renderNextNode() {}
  getClassName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.tree.Tree.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}



/**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html Online Api}
  @description Create a text navigation based on http://www.businesscode.de/schema/bcdui/textnavigation-1.0.0 XSD
  @extends bcdui.core.Renderer
*/
bcdui.component.textnavigation.TextNavigation = class extends bcdui.core.Renderer{
  /**
  @param {Object} args  Parameter object:
  @param {targetHtmlRef} args.targetHtml  Where to place the microphone and text field
  @param {function} args.customPreEvaluator  Called before the standard evaluation, can remove words by returning a shorter array
  @param {function} args.customPostEvaluator  Called after the standard evaluation, can trigger page switches for example
  @param {bcdui.core.DataProvider} args.config  Definition if the chat according to Model with the chart definition according to XSD http://www.businesscode.de/schema/bcdui/textnavigation-1.0.0
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html Online Api}
  @description Create a text navigation based on http://www.businesscode.de/schema/bcdui/textnavigation-1.0.0 XSD
  @extends bcdui.core.Renderer
    */
  constructor(args){ super(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#startVoiceRecognition) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#startVoiceRecognition Online Api}
  @description Start voice recognition
  */
  startVoiceRecognition() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#stopVoiceRecognition) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#stopVoiceRecognition Online Api}
  @description Stop voice recognition
  */
  stopVoiceRecognition() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#singleDigitToWord) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#singleDigitToWord Online Api}
  @description Replace all single-digits in the text be the corresponding English word "1" -> "one"
  @param {String} text  Text in which to replace single digit words representing numbers
  @param {String} prefix  Optional prefix to make the words longer and less ambiguous in conains relations
  @return transformed text
  */
  singleDigitToWord(text,prefix) { console.log(text,prefix); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#execute) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#execute Online Api}
  @param {(boolean|ExecuteParam)} args  either true for forced or parameter map
  @inherits bcdui.core.Renderer#execute
  @overrides bcdui.core.Renderer#execute
  */
  execute(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getTargetHtml Online Api}
  @description Return the target html element where the renderer places its output
  @inherits bcdui.core.Renderer#getTargetHtml
  @overrides bcdui.core.Renderer#getTargetHtml
  */
  getTargetHtml() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setTargetHtml) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setTargetHtml Online Api}
  @description Sets the target html element where the renderer places its output
  @param {HtmlElement} targetHtmlElement  target html element
  @inherits bcdui.core.Renderer#setTargetHtml
  @overrides bcdui.core.Renderer#setTargetHtml
  */
  setTargetHtml(targetHtmlElement) { console.log(targetHtmlElement); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getReadyStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getReadyStatus Online Api}
  @description The ready status for the transformation chain is reached as soon as all transformations are finished. <p> The status transitions of the class are as follows:          </p> <p style="padding-left: 10px"><table><tr><td style="border: 3px double black; text-align: center" colspan="2"> Initialized                                              </td><td style="padding-left: 20px"> All variables have been initialized. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Loading                                                  </td><td style="padding-left: 20px"> Start loading chain document. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> ChainLoaded                                              </td><td style="padding-left: 20px"> The chain document has been loaded. Start loading chain stylesheets. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> <i> WaitingForParameters </i>                                </td><td style="padding-left: 20px"> Chain stylesheets loaded. Waiting for parameter data providers (<i>execute</i>). </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 1px solid black; text-align: center" colspan="2"> Transforming                                             </td><td style="padding-left: 20px"> The chain stylesheets are running. </td></tr><tr><td>&nbsp;</td><td style="border-left: 1px solid black">&nbsp;</td><td></td></tr><tr><td style="border: 3px double black; text-align: center" colspan="2"> <b> Transformed </b>                                         </td><td style="padding-left: 20px"> The output has been generated. (<b>ready</b>)  </td></tr></table></p>
  @inherits bcdui.core.TransformationChain#getReadyStatus
  @overrides bcdui.core.Renderer#getReadyStatus
  @return {Status} The transformed status.
  */
  getReadyStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getData Online Api}
  @description A getter for the document produced by the transformation chain.
  @inherits bcdui.core.TransformationChain#getData
  @overrides bcdui.core.Renderer#getData
  @return {*} The output of the last transfomration in the chain if it doesnot produce HTML (output="html").
  */
  getData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#reloadStylesheets) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#reloadStylesheets Online Api}
  @description Start the loading process of the stylesheets and executes the transformations again.
  @inherits bcdui.core.TransformationChain#reloadStylesheets
  @overrides bcdui.core.Renderer#reloadStylesheets
  */
  reloadStylesheets() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getDataProviderByName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getDataProviderByName Online Api}
  @param {String} name
  @inherits bcdui.core.TransformationChain#getDataProviderByName
  @overrides bcdui.core.Renderer#getDataProviderByName
  @return {bcdui.core.DataProvider} returns the parameter of the given name
  */
  getDataProviderByName(name) { console.log(name); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#addDataProvider) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#addDataProvider Online Api}
  @description Adds a new data provider to the transformation chain. If there is already a data provider with the given name it is replaced.
  @param {Object} newDataProvider  the new dataprovider which should be added
  @param {string} [newName]  an optional new name for the provider. if given an alias will be created
  @inherits bcdui.core.TransformationChain#addDataProvider
  @overrides bcdui.core.Renderer#addDataProvider
  @return {bcdui.core.DataProvider} The old data provider registered under the name ornull if there has not been any.
  */
  addDataProvider(newDataProvider,newName) { console.log(newDataProvider,newName); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getPrimaryModel Online Api}
  @description Getter for the primary model of the chain. The first transformation of the chain takes a document as input. This document comes from the primary model.
  @inherits bcdui.core.TransformationChain#getPrimaryModel
  @overrides bcdui.core.Renderer#getPrimaryModel
  @return {bcdui.core.DataProvider} The model the first transformation inthe chain is running on.
  */
  getPrimaryModel() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setPrimaryModel) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setPrimaryModel Online Api}
  @description Adds a new data provider to the list which becomes the new primary model of the transformation chain.
  @param {bcdui.core.DataProvider} primaryModel  the new primary model of the transformation chain.
  @inherits bcdui.core.TransformationChain#setPrimaryModel
  @overrides bcdui.core.Renderer#setPrimaryModel
  */
  setPrimaryModel(primaryModel) { console.log(primaryModel); }
  toString() {}
  getFailedStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#sendData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#sendData Online Api}
  @description Sends the current data to the original URL
  @inherits bcdui.core.DataProvider#sendData
  @overrides bcdui.core.Renderer#sendData
  */
  sendData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#fire) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#fire Online Api}
  @description This informs modification listeners, registered via {@link bcdui.core.DataProvider#onChange onChange(args)}, that a change set was completed and data is consistent again.
  @inherits bcdui.core.DataProvider#fire
  @overrides bcdui.core.Renderer#fire
  */
  fire() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getName) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getName Online Api}
  @description Getter for the name of the data provider. This name is for example used to set parameters names of a {@link bcdui.core.TransformationChain}.
  @inherits bcdui.core.DataProvider#getName
  @overrides bcdui.core.Renderer#getName
  @return {string} The name of the data provider. This name should be uniquewithin the scope it is used and is usually not globally unique (as the id).
  */
  getName() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#promptData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#promptData Online Api}
  @description Convenience method for debugging showing data in a prompt for copy-and-paste
  @inherits bcdui.core.DataProvider#promptData
  @overrides bcdui.core.Renderer#promptData
  */
  promptData() {}
  debugIsWaitingFor() {}
  debugStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#read) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#read Online Api}
  @description Reads the string value from a given xPath (or optionally return default value).
  @param {string} xPath  xPath pointing to value (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {string} [defaultValue]  default value in case xPath value does not exist
  @inherits bcdui.core.DataProvider#read
  @overrides bcdui.core.Renderer#read
  @return text value stored at xPath (or null if no text was found and no defaultValue supplied)
  */
  read(xPath,fillParams,defaultValue) { console.log(xPath,fillParams,defaultValue); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#write) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#write Online Api}
  @description Set a value to on a certain xPath and create the xPath where necessary. This combines Element.evaluate() for a single node with creating the path where necessary. It will prefer extending an existing start-part over creating a second one. After the operation the xPath (with the optional value) is guaranteed to exist (pre-existing or created or extended) and the addressed node is returned.
  @param {string} xPath  xPath pointing to the node which is set to the value value or plain xPath to be created if not there. It tries to reuse all matching parts that are already there. If you provide for example "/n:Root/n:MyElem/&commat;attr2" and there is already "/n:Root/n:MyElem/&commat;attr1", then "/n:Root/n:MyElem" will be "re-used" and get an additional attribute attr2. Many expressions are allowed, for example "/n:Root/n:MyElem[&commat;attr1='attr1Value']/n:SubElem" is also ok. By nature, some xPath expressions are not allowed, for example using '//' or "/n:Root/n:MyElem/[&commat;attr1 or &commat;attr2]/n:SubElem" is obviously not unambiguous enough and will throw an error. This method is Wrs aware, use for example '/wrs:Wrs/wrs:Data/wrs:*[2]/wrs:C[3]' as xPath and it will turn wrs:R[wrs:C] into wrs:M[wrs:C and wrs:O], see Wrs format. (can include dot template placeholders which get filled with the given fillParams)
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions Example: bcdui.wkModels.guiStatus.write("/guiStatus:Status/guiStatus:ClientSettings/guiStatus:Test[&commat;caption='{{=it[0]}}' and &commat;caption2='{{=it[1]}}']", ["china's republic", "drag\"n drop"])
  @param {string} [value]  Optional value which should be written, for example to "/n:Root/n:MyElem/&commat;attr" or with "/n:Root/n:MyElem" as the element's text content. If not provided, the xPath contains all values like in "/n:Root/n:MyElem[&commat;attr='a' and &commat;attr1='b']" or needs none like "/n:Root/n:MyElem"
  @param {boolean} [fire]  If true a fire is triggered to inform data modification listeners
  @inherits bcdui.core.DataProvider#write
  @overrides bcdui.core.Renderer#write
  @return The xPath's node or null if dataProvider isn't ready
  */
  write(xPath,fillParams,value,fire) { console.log(xPath,fillParams,value,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#remove) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#remove Online Api}
  @description Deletes data at a given xPath from the model
  @param {string} xPath  xPath pointing to the value
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @param {boolean} [fire]  if true a fire is triggered to notify data modification listener
  @inherits bcdui.core.DataProvider#remove
  @overrides bcdui.core.Renderer#remove
  */
  remove(xPath,fillParams,fire) { console.log(xPath,fillParams,fire); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#query) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#query Online Api}
  @description Reads a single node from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#query
  @overrides bcdui.core.Renderer#query
  @return single node or null if query fails
  */
  query(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#queryNodes) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#queryNodes Online Api}
  @description Get node list from a given xPath
  @param {string} xPath  xPath to query
  @param {Object} [fillParams]  array or object holding the values for the dot placeholders in the xpath. Values with "'" get 'escaped' with a concat operation to avoid bad xpath expressions
  @inherits bcdui.core.DataProvider#queryNodes
  @overrides bcdui.core.Renderer#queryNodes
  @return node list or empty list if query fails
  */
  queryNodes(xPath,fillParams) { console.log(xPath,fillParams); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#serialize) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#serialize Online Api}
  @description Serialize dataprovider's data if available
  @inherits bcdui.core.DataProvider#serialize
  @overrides bcdui.core.Renderer#serialize
  @return String containing the serialized data
  */
  serialize() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#removeDataListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#removeDataListener Online Api}
  @param {(string|function|RemoveDataListenerParam)} listenerObject  Either a listener function or id or a parameter map {@link RemoveDataListenerParam}. Listeners are added with onChange()
  @inherits bcdui.core.DataProvider#removeDataListener
  @overrides bcdui.core.Renderer#removeDataListener
  */
  removeDataListener(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onChange) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onChange Online Api}
  @param {(function|OnChangeParam)} listenerObject  Either a function to be called after changes or a parameter map {@link OnChangeParam}. Listeners can be removed with removeDataListener()
  @param {string} [trackingXPath]  xPath to monitor to monitor for changes
  @inherits bcdui.core.DataProvider#onChange
  @overrides bcdui.core.Renderer#onChange
  */
  onChange(listenerObject,trackingXPath) { console.log(listenerObject,trackingXPath); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#setStatus Online Api}
  @param {Status} args
  @inherits bcdui.core.DataProvider#setStatus
  @overrides bcdui.core.Renderer#setStatus
  */
  setStatus(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#isClean) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#isClean Online Api}
  @description True, if DataProvider is ready and there are no uncommitted write transactions, see {@link bcdui.core.AbstractExecutable#isReady isReady()} and {@link bcdui.core.DataProvider#onChange fire()}.
  @inherits bcdui.core.DataProvider#isClean
  @overrides bcdui.core.Renderer#isClean
  @return {boolean}
  */
  isClean() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#fetchData) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#fetchData Online Api}
  @description asynchronously fetch data for this data provider.
  @inherits bcdui.core.DataProvider#fetchData
  @overrides bcdui.core.Renderer#fetchData
  @return {Promise} resolving once data has been loaded, first argument is this instance
  */
  fetchData() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#addStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#addStatusListener Online Api}
  @description Listen for any status to be reached. For use cases with the ready status (by far the most common), see onReady() and onceReady() convenience functions.
  @param {(function|StatusListener|AddStatusListenerParam)} args  Either a function executed on all status transitions or a parameter map {@link AddStatusListenerParam}
  @inherits bcdui.core.AbstractExecutable#addStatusListener
  @overrides bcdui.core.Renderer#addStatusListener
  */
  addStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#removeStatusListener) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#removeStatusListener Online Api}
  @param {(function|StatusListener|RemoveStatusListenerParam)} args  The listener to be removed. This can either be a function or a {@link bcdui.core.StatusListener StatusListener} or a parameter map {@link RemoveStatusListenerParam}.
  @inherits bcdui.core.AbstractExecutable#removeStatusListener
  @overrides bcdui.core.Renderer#removeStatusListener
  */
  removeStatusListener(args) { console.log(args); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getStatus) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#getStatus Online Api}
  @description Getter for the status of this object. See {@link bcdui.core.status} for possible return values.
  @inherits bcdui.core.AbstractExecutable#getStatus
  @overrides bcdui.core.Renderer#getStatus
  @return {bcdui.core.Status} The current status.
  */
  getStatus() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#isReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#isReady Online Api}
  @description Tests if the current state is the readyStatus. This status is the same status as returned by "getReadyStatus".
  @inherits bcdui.core.AbstractExecutable#isReady
  @overrides bcdui.core.Renderer#isReady
  @return {boolean} True, if the object is ready.
  */
  isReady() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#hasFailed) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#hasFailed Online Api}
  @description Tests if the object has reached a failure status. These status codes are returned by the "getFailedStatus" method.
  @inherits bcdui.core.AbstractExecutable#hasFailed
  @overrides bcdui.core.Renderer#hasFailed
  @return {boolean} True, if the object's process has failed.
  */
  hasFailed() {}
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onceReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onceReady Online Api}
  @param {(function|OnceReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnceReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onceReady
  @overrides bcdui.core.Renderer#onceReady
  */
  onceReady(listenerObject) { console.log(listenerObject); }
  /**
  @see [Online Api](https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onReady) {@link https://businesscode.github.io/BCD-UI-Docu/jsdoc/bcdui.component.textnavigation.TextNavigation.html#onReady Online Api}
  @param {(function|OnReadyParam)} listenerObject  Either a function to be called on ready status (i.e. onSuccess) or a parameter map {@link OnReadyParam}. To listen for other states see addStatusListener()
  @inherits bcdui.core.AbstractExecutable#onReady
  @overrides bcdui.core.Renderer#onReady
  */
  onReady(listenerObject) { console.log(listenerObject); }

}


export { bcdui };
